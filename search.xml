<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Spring整合</title>
    <url>/posts/Accidence-Spring-Volume-Three/</url>
    <content><![CDATA[<p>Spring官网：<a href="https://spring.io/">https://spring.io/</a></p>
<p>参考视频：</p>
<ul>
<li><a href="https://www.bilibili.com/video/BV1Ft4y1g7Fb/">Spring视频零基础入门到高级，Spring全套视频教程详解</a></li>
<li><a href="https://www.bilibili.com/video/BV1Fi4y1S7ix/">黑马程序员SSM框架教程Spring部分</a></li>
</ul>
<p>源码仓库：<a href="https://github.com/muyoukule/accidence-spring">muyoukule&#x2F;accidence-spring (github.com)</a></p>
<h1 id="Spring整合JdbcTemplate"><a href="#Spring整合JdbcTemplate" class="headerlink" title="Spring整合JdbcTemplate"></a>Spring整合JdbcTemplate</h1><p>JdbcTemplate是Spring提供的一个JDBC模板类，是对JDBC的封装，简化JDBC代码。</p>
<blockquote>
<p>环境准备</p>
</blockquote>
<p>a. 创建数据表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE `tbl_user` (</span><br><span class="line">  `id` int NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `real_name` varchar(255) DEFAULT NULL,</span><br><span class="line">  `age` int DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;</span><br></pre></td></tr></table></figure>

<p>b. 引入相关依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.27<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.24<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--新增的依赖:mysql驱动--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.31<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--新增的依赖：spring jdbc，这个依赖中有JdbcTemplate--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.27<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>c. 准备实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String realName;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>d. 编写Spring.xml配置文件</p>
<p>JdbcTemplate 是 Spring 提供好的类，这类的完整类名是：<code>org.springframework.jdbc.core.JdbcTemplate</code></p>
<p>我们怎么使用这个类呢？new对象就可以了。怎么new对象？直接将这个类配置到Spring配置文件中，纳入Bean管理即可。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>JdbcTemplate 中有一个 <code>DataSource</code> 属性，这个属性是数据源，我们都知道连接数据库需要 <code>Connection</code> 对象，而生成 <code>Connection</code> 对象是数据源负责的。所以我们需要给 JdbcTemplate 设置数据源属性。</p>
<p>所有的数据源都是要实现 <code>javax.sql.DataSource</code> 接口的。这个数据源可以自己写一个，也可以用写好的。比如：阿里巴巴的德鲁伊连接池，c3p0，dbcp等。</p>
<p>e. 手写一个数据源</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyDataSource</span> <span class="keyword">implements</span> <span class="title class_">DataSource</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加4个属性</span></span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重点写怎么获取Connection对象就行。其他方法不用管。</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Connection <span class="title function_">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(driver);</span><br><span class="line">            <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(url, username, password);</span><br><span class="line">            <span class="keyword">return</span> conn;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>f. 数据源传递给JdbcTemplate</p>
<p>写完数据源，我们需要把这个数据源传递给 JdbcTemplate 。因为 JdbcTemplate 中有一个 <code>DataSource</code> 属性：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myDataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.muyoukule.Datasource.MyDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/spring_db&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;myDataSource&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>到这里环境就准备好了。</p>
<blockquote>
<p>新增</p>
</blockquote>
<p>编写测试程序：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInsert</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 获取JdbcTemplate对象</span></span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring.xml&quot;</span>);</span><br><span class="line">    <span class="type">JdbcTemplate</span> <span class="variable">jdbcTemplate</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;jdbcTemplate&quot;</span>, JdbcTemplate.class);</span><br><span class="line">    <span class="comment">// 执行插入操作</span></span><br><span class="line">    <span class="comment">// 注意：insert delete update的sql语句，都是执行update方法。</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into tbl_user(id,real_name,age) values(?,?,?)&quot;</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> jdbcTemplate.update(sql, <span class="literal">null</span>, <span class="string">&quot;张三&quot;</span>, <span class="number">30</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;插入的记录条数：&quot;</span> + count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">插入的记录条数：1</span><br></pre></td></tr></table></figure>

<p><code>update</code> 方法有两个参数：</p>
<ul>
<li>第一个参数：要执行的 SQL 语句。（SQL语句中可能会有占位符 ? ）</li>
<li>第二个参数：可变长参数，参数的个数可以是0个，也可以是多个。一般是 SQL 语句中有几个问号，则对应几个参数。</li>
</ul>
<blockquote>
<p>修改</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdate</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 获取JdbcTemplate对象</span></span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring.xml&quot;</span>);</span><br><span class="line">    <span class="type">JdbcTemplate</span> <span class="variable">jdbcTemplate</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;jdbcTemplate&quot;</span>, JdbcTemplate.class);</span><br><span class="line">    <span class="comment">// 执行更新操作</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update tbl_user set real_name = ?, age = ? where id = ?&quot;</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> jdbcTemplate.update(sql, <span class="string">&quot;张三丰&quot;</span>, <span class="number">55</span>, <span class="number">1</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;更新的记录条数：&quot;</span> + count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">更新的记录条数：1</span><br></pre></td></tr></table></figure>

<blockquote>
<p>删除</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDelete</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 获取JdbcTemplate对象</span></span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring.xml&quot;</span>);</span><br><span class="line">    <span class="type">JdbcTemplate</span> <span class="variable">jdbcTemplate</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;jdbcTemplate&quot;</span>, JdbcTemplate.class);</span><br><span class="line">    <span class="comment">// 执行delete</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;delete from tbl_user where id = ?&quot;</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> jdbcTemplate.update(sql, <span class="number">1</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;删除了几条记录：&quot;</span> + count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">删除了几条记录：1</span><br></pre></td></tr></table></figure>

<blockquote>
<p>查询一个对象</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectOne</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 获取JdbcTemplate对象</span></span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring.xml&quot;</span>);</span><br><span class="line">    <span class="type">JdbcTemplate</span> <span class="variable">jdbcTemplate</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;jdbcTemplate&quot;</span>, JdbcTemplate.class);</span><br><span class="line">    <span class="comment">// 执行select</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select id, real_name, age from tbl_user where id = ?&quot;</span>;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> jdbcTemplate.queryForObject(sql, <span class="keyword">new</span> <span class="title class_">BeanPropertyRowMapper</span>&lt;&gt;(User.class), <span class="number">2</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因为刚才已经将数据库数据删除了，所以需要先插入再测试查询</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">User(id=2, realName=张三, age=30)</span><br></pre></td></tr></table></figure>

<p>queryForObject方法三个参数：</p>
<ul>
<li>第一个参数：sql语句</li>
<li>第二个参数：Bean属性值和数据库记录行的映射对象。在构造方法中指定映射的对象类型。</li>
<li>第三个参数：可变长参数，给sql语句的占位符问号传值。</li>
</ul>
<blockquote>
<p>查询多个对象</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectAll</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 获取JdbcTemplate对象</span></span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring.xml&quot;</span>);</span><br><span class="line">    <span class="type">JdbcTemplate</span> <span class="variable">jdbcTemplate</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;jdbcTemplate&quot;</span>, JdbcTemplate.class);</span><br><span class="line">    <span class="comment">// 执行select</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select id, real_name, age from tbl_user&quot;</span>;</span><br><span class="line">    List&lt;User&gt; users = jdbcTemplate.query(sql, <span class="keyword">new</span> <span class="title class_">BeanPropertyRowMapper</span>&lt;&gt;(User.class));</span><br><span class="line">    System.out.println(users);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>查询前先使用不同的数据多次执行插入方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[User(id=2, realName=张三, age=30), User(id=3, realName=李四, age=31), User(id=4, realName=王五, age=32)]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>查询一个值</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectOneValue</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 获取JdbcTemplate对象</span></span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring.xml&quot;</span>);</span><br><span class="line">    <span class="type">JdbcTemplate</span> <span class="variable">jdbcTemplate</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;jdbcTemplate&quot;</span>, JdbcTemplate.class);</span><br><span class="line">    <span class="comment">// 执行select</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select count(1) from tbl_user&quot;</span>;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> jdbcTemplate.queryForObject(sql, <span class="type">int</span>.class); <span class="comment">// 这里用Integer.class也可以</span></span><br><span class="line">    System.out.println(<span class="string">&quot;总记录条数：&quot;</span> + count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">总记录条数：3</span><br></pre></td></tr></table></figure>

<blockquote>
<p>批量添加</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAddBatch</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 获取JdbcTemplate对象</span></span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring.xml&quot;</span>);</span><br><span class="line">    <span class="type">JdbcTemplate</span> <span class="variable">jdbcTemplate</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;jdbcTemplate&quot;</span>, JdbcTemplate.class);</span><br><span class="line">    <span class="comment">// 批量添加</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into tbl_user(id,real_name,age) values(?,?,?)&quot;</span>;</span><br><span class="line"></span><br><span class="line">    Object[] objs1 = &#123;<span class="literal">null</span>, <span class="string">&quot;小花&quot;</span>, <span class="number">20</span>&#125;;</span><br><span class="line">    Object[] objs2 = &#123;<span class="literal">null</span>, <span class="string">&quot;小明&quot;</span>, <span class="number">21</span>&#125;;</span><br><span class="line">    Object[] objs3 = &#123;<span class="literal">null</span>, <span class="string">&quot;小刚&quot;</span>, <span class="number">22</span>&#125;;</span><br><span class="line">    List&lt;Object[]&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    list.add(objs1);</span><br><span class="line">    list.add(objs2);</span><br><span class="line">    list.add(objs3);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span>[] count = jdbcTemplate.batchUpdate(sql, list);</span><br><span class="line">    System.out.println(Arrays.toString(count));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[1, 1, 1]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>批量修改</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdateBatch</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 获取JdbcTemplate对象</span></span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring.xml&quot;</span>);</span><br><span class="line">    <span class="type">JdbcTemplate</span> <span class="variable">jdbcTemplate</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;jdbcTemplate&quot;</span>, JdbcTemplate.class);</span><br><span class="line">    <span class="comment">// 批量修改</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update tbl_user set real_name = ?, age = ? where id = ?&quot;</span>;</span><br><span class="line">    Object[] objs1 = &#123;<span class="string">&quot;小花11&quot;</span>, <span class="number">10</span>, <span class="number">5</span>&#125;;</span><br><span class="line">    Object[] objs2 = &#123;<span class="string">&quot;小明22&quot;</span>, <span class="number">12</span>, <span class="number">6</span>&#125;;</span><br><span class="line">    Object[] objs3 = &#123;<span class="string">&quot;小刚33&quot;</span>, <span class="number">9</span>, <span class="number">7</span>&#125;;</span><br><span class="line">    List&lt;Object[]&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    list.add(objs1);</span><br><span class="line">    list.add(objs2);</span><br><span class="line">    list.add(objs3);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span>[] count = jdbcTemplate.batchUpdate(sql, list);</span><br><span class="line">    System.out.println(Arrays.toString(count));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[1, 1, 1]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>批量删除</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDeleteBatch</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 获取JdbcTemplate对象</span></span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring.xml&quot;</span>);</span><br><span class="line">    <span class="type">JdbcTemplate</span> <span class="variable">jdbcTemplate</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;jdbcTemplate&quot;</span>, JdbcTemplate.class);</span><br><span class="line">    <span class="comment">// 批量删除</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;delete from tbl_user where id = ?&quot;</span>;</span><br><span class="line">    Object[] objs1 = &#123;<span class="number">5</span>&#125;;</span><br><span class="line">    Object[] objs2 = &#123;<span class="number">6</span>&#125;;</span><br><span class="line">    Object[] objs3 = &#123;<span class="number">7</span>&#125;;</span><br><span class="line">    List&lt;Object[]&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    list.add(objs1);</span><br><span class="line">    list.add(objs2);</span><br><span class="line">    list.add(objs3);</span><br><span class="line">    <span class="type">int</span>[] count = jdbcTemplate.batchUpdate(sql, list);</span><br><span class="line">    System.out.println(Arrays.toString(count));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[1, 1, 1]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>使用回调函数</p>
</blockquote>
<p>使用回调函数，可以参与的更加细节：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCallback</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 获取JdbcTemplate对象</span></span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring.xml&quot;</span>);</span><br><span class="line">    <span class="type">JdbcTemplate</span> <span class="variable">jdbcTemplate</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;jdbcTemplate&quot;</span>, JdbcTemplate.class);</span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select id, real_name, age from tbl_user where id = ?&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> jdbcTemplate.execute(sql, <span class="keyword">new</span> <span class="title class_">PreparedStatementCallback</span>&lt;User&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> User <span class="title function_">doInPreparedStatement</span><span class="params">(PreparedStatement ps)</span> <span class="keyword">throws</span> SQLException, DataAccessException &#123;</span><br><span class="line">            <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            ps.setInt(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">            <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> ps.executeQuery();</span><br><span class="line">            <span class="keyword">if</span> (rs.next()) &#123;</span><br><span class="line">                user = <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">                user.setId(rs.getInt(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">                user.setRealName(rs.getString(<span class="string">&quot;real_name&quot;</span>));</span><br><span class="line">                user.setAge(rs.getInt(<span class="string">&quot;age&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> user;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">User(id=2, realName=张三, age=30)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>使用德鲁伊连接池</p>
</blockquote>
<p>之前数据源是用我们自己写的。也可以使用别人写好的。例如德鲁伊连接池。</p>
<p>a. 引入德鲁伊连接池的依赖。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>b. 将德鲁伊中的数据源配置到 spring 配置文件中。和配置我们自己写的一样。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;druidDataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/spring_db&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;druidDataSource&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">User(id=2, realName=张三, age=30)</span><br></pre></td></tr></table></figure>

<h1 id="Spring整合Mybatis"><a href="#Spring整合Mybatis" class="headerlink" title="Spring整合Mybatis"></a>Spring整合Mybatis</h1><h2 id="1-Spring整合Mybatis思路分析"><a href="#1-Spring整合Mybatis思路分析" class="headerlink" title="1. Spring整合Mybatis思路分析"></a>1. Spring整合Mybatis思路分析</h2><blockquote>
<p>环境准备</p>
</blockquote>
<p>在准备环境的过程中，先回顾下Mybatis开发的相关内容:</p>
<p>a. 准备数据库表</p>
<p>Mybatis是来操作数据库表，所以先创建一个数据库及表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> database spring_db <span class="type">character</span> <span class="keyword">set</span> utf8;</span><br><span class="line">use spring_db;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tbl_account(</span><br><span class="line">    id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">35</span>),</span><br><span class="line">    money <span class="keyword">double</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>b. 引入相关依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.27<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.24<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.31<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>c. 根据表创建模型类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Account</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Double money;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>d. 创建 Dao 接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AccountDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into tbl_account(name,money)values(#&#123;name&#125;,#&#123;money&#125;)&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(Account account)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Delete(&quot;delete from tbl_account where id = #&#123;id&#125; &quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update(&quot;update tbl_account set name = #&#123;name&#125; , money = #&#123;money&#125; where id = #&#123;id&#125; &quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Account account)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from tbl_account&quot;)</span></span><br><span class="line">    List&lt;Account&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from tbl_account where id = #&#123;id&#125; &quot;)</span></span><br><span class="line">    Account <span class="title function_">findById</span><span class="params">(Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>e. 创建 Service 接口和实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AccountService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(Account account)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Account account)</span>;</span><br><span class="line"></span><br><span class="line">    List&lt;Account&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    Account <span class="title function_">findById</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">AccountService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(Account account)</span> &#123;</span><br><span class="line">        accountDao.save(account);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Account account)</span> &#123;</span><br><span class="line">        accountDao.update(account);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        accountDao.delete(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Account <span class="title function_">findById</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> accountDao.findById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Account&gt; <span class="title function_">findAll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> accountDao.findAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>f. 添加 <code>jdbc.properties</code> 文件</p>
<p>resources 目录下添加，用于配置数据库连接四要素</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/spring_db?useSSL=false</span></span><br><span class="line"><span class="attr">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure>

<p>useSSL：关闭 MySQL 的 SSL 连接</p>
<p>g. 添加 Mybatis 核心配置文件（SqlMapConfig.xml）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--读取外部properties配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--别名扫描的包路径--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.muyoukule.Entity&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--数据源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--映射文件扫描包路径--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.muyoukule.Dao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>h. 编写应用程序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 1. 创建SqlSessionFactoryBuilder对象</span></span><br><span class="line">        <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">sqlSessionFactoryBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line">        <span class="comment">// 2. 加载SqlMapConfig.xml配置文件</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;SqlMapConfig.xml&quot;</span>);</span><br><span class="line">        <span class="comment">// 3. 创建SqlSessionFactory对象</span></span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> sqlSessionFactoryBuilder.build(inputStream);</span><br><span class="line">        <span class="comment">// 4. 获取SqlSession</span></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">        <span class="comment">// 5. 执行SqlSession对象执行查询，获取结果User</span></span><br><span class="line">        <span class="type">AccountDao</span> <span class="variable">accountDao</span> <span class="operator">=</span> sqlSession.getMapper(AccountDao.class);</span><br><span class="line"></span><br><span class="line">        <span class="type">Account</span> <span class="variable">ac</span> <span class="operator">=</span> accountDao.findById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(ac);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6. 释放资源</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>i. 运行程序</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">null</span><br></pre></td></tr></table></figure>

<p>结果为 null 是因为数据库还未插入数据。</p>
<blockquote>
<p>整合思路分析</p>
</blockquote>
<p>Mybatis 的基础环境我们已经准备好了，接下来就得分析下在上述的内容中，哪些对象可以交给 Spring 来管理?</p>
<ul>
<li><p>Mybatis程序核心对象分析</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/accidence-spring/Mybatis%E7%A8%8B%E5%BA%8F%E6%A0%B8%E5%BF%83%E5%AF%B9%E8%B1%A1%E5%88%86%E6%9E%90.png" style="zoom:80%;">

<p>从图中可以获取到，真正需要交给Spring管理的是 <code>SqlSessionFactory</code></p>
</li>
<li><p>整合 Mybatis，就是将 Mybatis 用到的内容交给 Spring 管理，分析下配置文件</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/accidence-spring/%E5%88%86%E6%9E%90Mybatis%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.png" style="zoom:80%;">

<p><strong>说明:</strong></p>
<ul>
<li>第一行读取外部 <code>properties</code> 配置文件，Spring有提供具体的解决方案 <code>@PropertySource</code>，需要交给Spring</li>
<li>第二行起别名包扫描，为 <code>SqlSessionFactory</code> 服务的，需要交给 Spring</li>
<li>第三行主要用于做连接池，Spring 之前我们已经整合了 Druid 连接池，这块也需要交给 Spring</li>
<li>前面三行一起都是为了创建 <code>SqlSession</code> 对象用的，那么用 Spring 管理 <code>SqlSession</code> 对象吗？回忆下 <code>SqlSession</code> 是由<code>SqlSessionFactory</code> 创建出来的，所以只需要将 <code>SqlSessionFactory</code> 交给 Spring 管理即可。</li>
<li>第四行是 <code>Mapper</code> 接口和映射文件（如果使用注解就没有该映射文件），这个是在获取到 <code>SqlSession</code> 以后执行具体操作的时候用，所以它和 <code>SqlSessionFactory</code> 创建的时机都不在同一个时间，可能需要单独管理。</li>
</ul>
</li>
</ul>
<h2 id="2-Spring整合Mybatis"><a href="#2-Spring整合Mybatis" class="headerlink" title="2. Spring整合Mybatis"></a>2. Spring整合Mybatis</h2><p>前面我们已经分析了 Spring 与 Mybatis 的整合，大体需要做两件事：</p>
<ol>
<li><p>Spring 要管理 MyBatis 中的 <code>SqlSessionFactory</code></p>
</li>
<li><p>Spring 要管理 Mapper 接口的扫描</p>
</li>
</ol>
<blockquote>
<p>实现步骤</p>
</blockquote>
<p>a. 项目中导入整合需要的 jar 包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--Spring操作数据库需要该jar包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.27<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    Spring与Mybatis整合的jar包</span></span><br><span class="line"><span class="comment">    这个jar包mybatis在前面，是Mybatis提供的</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>b. 创建 Spring 的主配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//配置类注解</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//包扫描，主要扫描的是项目中的AccountServiceImpl类</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.muyoukule&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>c. 创建数据源的配置类</p>
<p>在配置类中完成数据源的创建</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        ds.setDriverClassName(driver);</span><br><span class="line">        ds.setUrl(url);</span><br><span class="line">        ds.setUsername(userName);</span><br><span class="line">        ds.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>d. 主配置类中读 <code>properties</code> 并引入数据源配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.muyoukule&quot;)</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:jdbc.properties&quot;)</span></span><br><span class="line"><span class="meta">@Import(JdbcConfig.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>e. 创建 Mybatis 配置类并配置 <code>SqlSessionFactory</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisConfig</span> &#123;</span><br><span class="line">    <span class="comment">//定义bean，SqlSessionFactoryBean，用于产生SqlSessionFactory对象</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SqlSessionFactoryBean <span class="title function_">sqlSessionFactory</span><span class="params">(DataSource dataSource)</span> &#123;</span><br><span class="line">        <span class="type">SqlSessionFactoryBean</span> <span class="variable">ssfb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBean</span>();</span><br><span class="line">        <span class="comment">//设置模型类的别名扫描</span></span><br><span class="line">        ssfb.setTypeAliasesPackage(<span class="string">&quot;com.muyoukule.Entity&quot;</span>);</span><br><span class="line">        <span class="comment">//设置数据源</span></span><br><span class="line">        ssfb.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> ssfb;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义bean，返回MapperScannerConfigurer对象</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MapperScannerConfigurer <span class="title function_">mapperScannerConfigurer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">MapperScannerConfigurer</span> <span class="variable">msc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MapperScannerConfigurer</span>();</span><br><span class="line">        msc.setBasePackage(<span class="string">&quot;com.muyoukule.Dao&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> msc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>说明:</strong></p>
<ul>
<li><p>使用 <code>SqlSessionFactoryBean</code> 封装 <code>SqlSessionFactory</code> 需要的环境信息</p>
<ul>
<li><code>SqlSessionFactoryBean</code> 是前面我们讲解 <code>FactoryBean</code> 的一个子类，在该类中将 <code>SqlSessionFactory</code> 的创建进行了封装，简化对象的创建，我们只需要将其需要的内容设置即可。</li>
<li>方法中有一个参数为 <code>dataSource</code>，当前Spring容器中已经创建了Druid数据源，类型刚好是 <code>DataSource</code> 类型，此时在初始化 <code>SqlSessionFactoryBean</code> 这个对象的时候，发现需要使用 <code>DataSource</code> 对象，而容器中刚好有这么一个对象，就自动加载了 <code>DruidDataSource</code> 对象。</li>
</ul>
</li>
<li><p>使用 <code>MapperScannerConfigurer</code> 加载 Dao 接口，创建代理对象保存到 IOC 容器中</p>
<ul>
<li>这个 <code>MapperScannerConfigurer</code> 对象也是 MyBatis 提供的专用于整合的 jar 包中的类，用来处理原始配置文件中的 mappers 相关配置，加载数据层的 Mapper 接口类</li>
<li><code>MapperScannerConfigurer</code> 有一个核心属性 <code>basePackage</code>，就是用来设置所扫描的包路径</li>
</ul>
</li>
</ul>
<p>f. 主配置类中引入 Mybatis 配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.muyoukule&quot;)</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:jdbc.properties&quot;)</span></span><br><span class="line"><span class="meta">@Import(&#123;JdbcConfig.class, MybatisConfig.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>g. 编写运行类</p>
<p>在运行类中，从 IOC 容器中获取 Service 对象，调用方法获取结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br><span class="line">        <span class="type">AccountService</span> <span class="variable">accountService</span> <span class="operator">=</span> ctx.getBean(AccountService.class);</span><br><span class="line"></span><br><span class="line">        <span class="type">Account</span> <span class="variable">tom</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Account</span>(<span class="number">1</span>, <span class="string">&quot;Tom&quot;</span>, <span class="number">1000.00</span>);</span><br><span class="line">        accountService.save(tom);</span><br><span class="line">        </span><br><span class="line">        <span class="type">Account</span> <span class="variable">ac</span> <span class="operator">=</span> accountService.findById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(ac);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>h. 运行程序</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Account(id=1, name=Tom, money=1000.0)</span><br></pre></td></tr></table></figure>

<h1 id="Spring整合Junit"><a href="#Spring整合Junit" class="headerlink" title="Spring整合Junit"></a>Spring整合Junit</h1><p>整合 Junit 与整合 Druid 和 MyBatis 差异比较大，为什么呢？Junit是一个搞单元测试用的工具，它不是我们程序的主体，也不会参加最终程序的运行，从作用上来说就和之前的东西不一样，它不是做功能的，看做是一个辅助工具就可以了。</p>
<blockquote>
<p>环境准备</p>
</blockquote>
<p>这块环境，大家可以直接使用 Spring 与 Mybatis 整合的环境即可。当然也可以重新创建一个。</p>
<blockquote>
<p>整合Junit</p>
</blockquote>
<p>a. 引入依赖</p>
<p>pom.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.27<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>b. 编写测试类</p>
<p>在 test\java下创建</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//设置类运行器</span></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="comment">//设置Spring环境对应的配置类</span></span><br><span class="line"><span class="meta">@ContextConfiguration(classes = &#123;SpringConfig.class&#125;)</span> <span class="comment">//加载配置类</span></span><br><span class="line"><span class="comment">//@ContextConfiguration(locations=&#123;&quot;classpath:applicationContext.xml&quot;&#125;)//加载配置文件</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountServiceTest</span> &#123;</span><br><span class="line">    <span class="comment">//支持自动装配注入bean</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountService accountService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFindById</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(accountService.findById(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFindAll</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(accountService.findAll());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Account(id=1, name=Tom, money=1000.0)]</span><br><span class="line">Account(id=1, name=Tom, money=1000.0)</span><br></pre></td></tr></table></figure>

<p><strong>注意:</strong></p>
<ul>
<li>单元测试，如果测试的是注解配置类，则使用<code>@ContextConfiguration(classes = 配置类.class)</code></li>
<li>单元测试，如果测试的是配置文件，则使用<code>@ContextConfiguration(locations=&#123;配置文件名,...&#125;)</code></li>
<li>Junit运行后是基于 Spring 环境运行的，所以 Spring 提供了一个专用的类运行器，这个务必要设置，这个类运行器就在 Spring 的测试专用包中提供的，导入的坐标就是这个东西<code>SpringJUnit4ClassRunner</code></li>
<li>上面两个配置都是固定格式，当需要测试哪个 bean 时，使用自动装配加载对应的对象，下面的工作就和以前做 Junit 单元测试完全一样了。</li>
</ul>
]]></content>
      <categories>
        <category>SSM</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>【步骤一】本地数据集上传到数据仓库Hive</title>
    <url>/posts/BigData-Case-Volume-One/</url>
    <content><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>简介：本文章基于厦门大学提供的<a href="https://dblab.xmu.edu.cn/post/7499/">大数据课程实验案例：网站用户行为分析</a>，通过使用 CentOS 操作编写而来。具体介绍请打开链接进行阅读。</p>
<p><font color="red">这里介绍几点值得特别注意的事项：</font></p>
<p>1、对于案例所涉及的系统及软件此文档使用的是以下版本，其他软件版本随意：</p>
<ul>
<li>Linux系统（CentOS7）</li>
<li>MySQL（5.7）</li>
<li>Hadoop（3.1.3）</li>
<li>HBase（2.2.2，HBase版本需要和Hadoop版本兼容）</li>
<li>Hive（3.1.2，Hive需要和Hadoop版本兼容）</li>
<li>Sqoop（1.4.7）</li>
<li>R（3.6.0）</li>
<li>IDEA（ 2023.3.6 社区版）</li>
</ul>
<p><font color="red"><strong>PS：Hadoop 与 HBase、Hive 版本一定要兼容！！！版本一定要兼容！！！这很重要！！！</strong></font>😃😃😃其他软件随意。</p>
<p>2、本文章所有<strong>下载</strong>的所有软件均在 <code>/</code> 目录下。所有<strong>安装</strong>的所有软件均在 <code>/usr/local/</code> 目录下以 <code>软件名-版本号</code> 方式命名。在进行每个软件的安装操作之前请先<strong>整体阅读</strong>整个软件安装流程的文章有个整体思路，<strong>了解到安装此软件需要做哪些设置再进行操作</strong>，这样可以避免很多不必要的麻烦。</p>
<p>3、<font color="red"><strong>此案例分为五个步骤，请按照步骤顺序进行阅读！！</strong>🙂🙂</font></p>
<h1 id="1-实验数据集的下载"><a href="#1-实验数据集的下载" class="headerlink" title="1. 实验数据集的下载"></a>1. 实验数据集的下载</h1><p>本案例采用的数据集为 <code>user.zip</code>，包含了一个大规模数据集 <code>raw_user.csv</code> (包含2000万条记录)，和一个小数据集 <code>small_user.csv</code>(只包含30万条记录)。小数据集 <code>small_user.csv</code> 是从大规模数据集 <code>raw_user.csv</code> 中抽取的一小部分数据。之所以抽取出一少部分记录单独构成一个小数据集，是因为，在第一遍跑通整个实验流程时，会遇到各种错误，各种问题，先用小数据集测试，可以大量节约程序运行时间。等到第一次完整实验流程都顺利跑通以后，就可以最后用大规模数据集进行最后的测试。</p>
<p>下面，请在本机先下载 <a href="http://pan.baidu.com/s/1nuOSo7B">user.zip数据集</a> ，然后上传到自己的 Linux 系统。或者直接在虚拟机的浏览器打开下载。</p>
<p>我这里将它上传到 Linux 的 <code>/</code> 目录：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入 / 目录</span></span><br><span class="line"><span class="built_in">cd</span> /</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传</span></span><br><span class="line">sudo rz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">ll</span><br></pre></td></tr></table></figure>

<p>通过上面命令，就进入到了 user.zip 文件所在的目录，并且可以看到有个 user.zip 文件。注意，如果你把 user.zip 下载到了其他目录，这里请进入到你自己的存放 user.zip 的目录。</p>
<p>下面需要把 user.zip 进行解压缩，我们需要首先建立一个用于运行本案例的目录 bigdatacase，请执行以下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local</span><br><span class="line"></span><br><span class="line">sudo mkdir bigdatacase</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下面给 muyoukule 用户赋予针对 bigdatacase 目录的各种操作权限</span></span><br><span class="line">sudo chown -R muyoukule:muyoukule ./bigdatacase</span><br><span class="line"></span><br><span class="line">cd bigdatacase</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下面创建一个dataset目录，用于保存数据集</span></span><br><span class="line">mkdir dataset</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下面就可以解压缩user.zip文件</span></span><br><span class="line">sudo unzip /user.zip -d /usr/local/bigdatacase/dataset</span><br><span class="line"></span><br><span class="line">cd /usr/local/bigdatacase/dataset</span><br><span class="line"></span><br><span class="line">ls</span><br></pre></td></tr></table></figure>

<p>现在你就可以看到在dataset目录下有两个文件：<code>raw_user.csv</code> 和 <code>small_user.csv</code></p>
<p>我们执行下面命令取出前面 5 条记录看一下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">head -5 raw_user.csv</span><br></pre></td></tr></table></figure>

<p>可以看到，前 5 行记录如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">user_id,item_id,behavior_type,user_geohash,item_category,time</span><br><span class="line">10001082,285259775,1,97lk14c,4076,2014-12-08 18</span><br><span class="line">10001082,4368907,1,,5503,2014-12-12 12</span><br><span class="line">10001082,4368907,1,,5503,2014-12-12 12</span><br><span class="line">10001082,53616768,1,,9762,2014-12-02 15</span><br></pre></td></tr></table></figure>

<p>可以看出，每行记录都包含 5 个字段，数据集中的字段及其含义如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">user_id(用户id)</span><br><span class="line">item_id(商品id)</span><br><span class="line">behaviour_type(包括浏览、收藏、加购物车、购买，对应取值分别是1、2、3、4)</span><br><span class="line">user_geohash(用户地理位置哈希值，有些记录中没有这个字段值，所以后面我们会用脚本做数据预处理时把这个字段全部删除)</span><br><span class="line">item_category(商品分类)</span><br><span class="line">time(该记录产生时间)</span><br></pre></td></tr></table></figure>

<h1 id="2-数据集的预处理"><a href="#2-数据集的预处理" class="headerlink" title="2. 数据集的预处理"></a>2. 数据集的预处理</h1><h2 id="2-1-删除文件第一行记录，即字段名称"><a href="#2-1-删除文件第一行记录，即字段名称" class="headerlink" title="2.1 删除文件第一行记录，即字段名称"></a>2.1 删除文件第一行记录，即字段名称</h2><p><code>raw_user</code> 和 <code>small_user</code> 中的第一行都是字段名称，我们在文件中的数据导入到数据仓库 Hive 中时，不需要第一行字段名称。因此，这里在做数据预处理时，删除第一行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/bigdatacase/dataset</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下面删除raw_user中的第1行</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1d表示删除第1行，同理，3d表示删除第3行，nd表示删除第n行</span></span><br><span class="line">sed -i &#x27;1d&#x27; raw_user.csv </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下面删除small_user中的第1行</span></span><br><span class="line">sed -i &#x27;1d&#x27; small_user.csv </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下面再用<span class="built_in">head</span>命令去查看文件的前5行记录，就看不到字段名称这一行了</span></span><br><span class="line">head -5 raw_user.csv</span><br><span class="line">head -5 small_user.csv</span><br></pre></td></tr></table></figure>

<p>接下来的操作中，我们都是用 <code>small_user.csv</code> 这个小数据集进行操作，这样可以节省时间。等所有流程都跑通以后，你就可以使用大数据集 <code>raw_user.csv</code> 去测试一遍了。</p>
<h2 id="2-2-对字段进行预处理"><a href="#2-2-对字段进行预处理" class="headerlink" title="2.2 对字段进行预处理"></a>2.2 对字段进行预处理</h2><p>下面对数据集进行一些预处理，包括为每行记录增加一个 <code>id</code> 字段(让记录具有唯一性)、增加一个省份字段(用来后续进行可视化分析)，并且丢弃 <code>user_geohash</code> 字段(后面分析不需要这个字段)。</p>
<p>下面我们要建一个脚本文件 <code>pre_deal.sh</code>，请把这个脚本文件放在 <code>dataset</code> 目录下，和数据集 <code>small_user.csv</code> 放在同一个目录下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/bigdatacase/dataset</span><br><span class="line">vim pre_deal.sh</span><br></pre></td></tr></table></figure>

<p>上面使用 vim 编辑器新建了一个 <code>pre_deal.sh</code> 脚本文件，请在这个脚本文件中加入下面代码：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">下面设置输入文件，把用户执行pre_deal.sh命令时提供的第一个参数作为输入文件名称</span></span><br><span class="line">infile=$1</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">下面设置输出文件，把用户执行pre_deal.sh命令时提供的第二个参数作为输出文件名称</span></span><br><span class="line">outfile=$2</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">注意！！最后的<span class="variable">$infile</span> &gt; <span class="variable">$outfile</span>必须跟在&#125;’这两个字符的后面</span></span><br><span class="line">awk -F &quot;,&quot; &#x27;BEGIN&#123;</span><br><span class="line">        srand();</span><br><span class="line">        id=0;</span><br><span class="line">        Province[0]=&quot;山东&quot;;Province[1]=&quot;山西&quot;;Province[2]=&quot;河南&quot;;Province[3]=&quot;河北&quot;;Province[4]=&quot;陕西&quot;;Province[5]=&quot;内蒙古&quot;;Province[6]=&quot;上海市&quot;;</span><br><span class="line">        Province[7]=&quot;北京市&quot;;Province[8]=&quot;重庆市&quot;;Province[9]=&quot;天津市&quot;;Province[10]=&quot;福建&quot;;Province[11]=&quot;广东&quot;;Province[12]=&quot;广西&quot;;Province[13]=&quot;云南&quot;; </span><br><span class="line">        Province[14]=&quot;浙江&quot;;Province[15]=&quot;贵州&quot;;Province[16]=&quot;新疆&quot;;Province[17]=&quot;西藏&quot;;Province[18]=&quot;江西&quot;;Province[19]=&quot;湖南&quot;;Province[20]=&quot;湖北&quot;;</span><br><span class="line">        Province[21]=&quot;黑龙江&quot;;Province[22]=&quot;吉林&quot;;Province[23]=&quot;辽宁&quot;; Province[24]=&quot;江苏&quot;;Province[25]=&quot;甘肃&quot;;Province[26]=&quot;青海&quot;;Province[27]=&quot;四川&quot;;</span><br><span class="line">        Province[28]=&quot;安徽&quot;; Province[29]=&quot;宁夏&quot;;Province[30]=&quot;海南&quot;;Province[31]=&quot;香港&quot;;Province[32]=&quot;澳门&quot;;Province[33]=&quot;台湾&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    &#123;</span><br><span class="line">        id=id+1;</span><br><span class="line">        value=int(rand()*34);       </span><br><span class="line">        print id&quot;\t&quot;$1&quot;\t&quot;$2&quot;\t&quot;$3&quot;\t&quot;$5&quot;\t&quot;substr($6,1,10)&quot;\t&quot;Province[value]</span><br><span class="line">    &#125;&#x27; $infile &gt; $outfile</span><br></pre></td></tr></table></figure>

<p>上面的代码的基本形式是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">awk -F &quot;,&quot; &#x27;处理逻辑&#x27; $infile &gt; $outfile</span><br></pre></td></tr></table></figure>

<p>使用 <code>awk</code> 可以逐行读取输入文件，并对逐行进行相应操作。其中，<code>-F</code> 参数用于指出每行记录的不同字段之间用什么字符进行分割，这里是用逗号进行分割。处理逻辑代码需要用两个英文单引号引起来。  <code>$infile</code> 是输入文件的名称，我们这里会输入 <code>raw_user.csv</code>，<code>$outfile</code>  表示处理结束后输出的文件名称，我们后面会使用 <code>user_table.txt</code> 作为输出文件名称。</p>
<p>在上面的 <code>pre_deal.sh</code> 代码的处理逻辑部分，<code>srand()</code> 用于生成随机数的种子，<code>id</code> 是我们为数据集新增的一个字段，它是一个自增类型，每条记录增加 1，这样可以保证每条记录具有唯一性。我们会为数据集新增一个省份字段，用来进行后面的数据可视化分析，为了给每条记录增加一个省份字段的值，这里，我们首先用 <code>Province[]</code> 数组用来保存全国各个省份信息，然后，在遍历数据集 <code>raw_user.csv</code> 的时候，每当遍历到其中一条记录，使用 <code>value=int(rand()*34</code>) 语句随机生成一个 0-33 的整数，作为 Province 省份值，然后从 <code>Province[]</code> 数组当中获取省份名称，增加到该条记录中。</p>
<p><code>substr ($6,1,10)</code> 这个语句是为了截取时间字段 <code>time</code> 的年月日，方便后续存储为 <code>date</code> 格式。<code>awk</code> 每次遍历到一条记录时，每条记录包含了6个字段，其中，第6个字段是时间字段，<code>substr($6,1,10)</code> 语句就表示获取第 6 个字段的值，截取前 10 个字符，第 6 个字段是类似 <code>2014-12-08 18</code> 这样的字符串(也就是表示 2014年12月8日18时)，<code>substr($6,1,10)</code>截取后，就丢弃了小时，只保留了年月日。</p>
<p>另外，在 <code>print id&quot;\t&quot;$1&quot;\t&quot;$2&quot;\t&quot;$3&quot;\t&quot;$5&quot;\t&quot;substr($6,1,10)&quot;\t&quot;Province[value]</code> 这行语句中，我们丢弃了每行记录的第4个字段，所以，没有出现 <code>$4</code>。我们生成后的文件是 <code>\t</code> 进行分割，这样，后续我们去查看数据的时候，效果让人看上去更舒服，每个字段在排版的时候会对齐显示，如果用逗号分隔，显示效果就比较乱。</p>
<p>最后，保存 <code>pre_deal.sh</code> 代码文件，退出 vim 编辑器。</p>
<p>下面就可以执行 <code>pre_deal.sh</code> 脚本文件，来对 <code>small_user.csv</code> 进行数据预处理，命令如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/bigdatacase/dataset</span><br><span class="line">bash ./pre_deal.sh small_user.csv user_table.txt  </span><br></pre></td></tr></table></figure>

<p>可以使用 head 命令查看生成的 <code>user_table.txt</code>，不要直接打开，文件过大，会出错，下面查看前 10 行数据：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">head -10 user_table.txt</span><br></pre></td></tr></table></figure>

<p>可以得到如下结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1       10001082        285259775       1       4076    2014-12-08      吉林</span><br><span class="line">2       10001082        4368907 1       5503    2014-12-12      贵州</span><br><span class="line">3       10001082        4368907 1       5503    2014-12-12      西藏</span><br><span class="line">4       10001082        53616768        1       9762    2014-12-02      江苏</span><br><span class="line">5       10001082        151466952       1       5232    2014-12-12      青海</span><br><span class="line">6       10001082        53616768        4       9762    2014-12-02      广西</span><br><span class="line">7       10001082        290088061       1       5503    2014-12-12      台湾</span><br><span class="line">8       10001082        298397524       1       10894   2014-12-12      辽宁</span><br><span class="line">9       10001082        32104252        1       6513    2014-12-12      内蒙古</span><br><span class="line">10      10001082        323339743       1       10894   2014-12-12      四川</span><br></pre></td></tr></table></figure>

<h2 id="2-3-导入数据库"><a href="#2-3-导入数据库" class="headerlink" title="2.3 导入数据库"></a>2.3 导入数据库</h2><p>下面要把 <code>user_table.txt</code> 中的数据最终导入到数据仓库 Hive 中。为了完成这个操作，我们会首先把 <code>user_table.txt</code> 上传到分布式文件系统 HDFS 中，然后，在 Hive 中创建一个外部表，完成数据的导入。</p>
<p>1、启动HDFS</p>
<p>请执行下面命令启动 Hadoop(如果你已经启动了 Hadoop 就不用再次启动了)：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动 Hadoop</span></span><br><span class="line">start-all.sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看当前运行的进程</span></span><br><span class="line">jps</span><br></pre></td></tr></table></figure>

<p>如果出现下面这些进程，说明 Hadoop 启动成功了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">NameNode</span><br><span class="line">DataNode</span><br><span class="line">NodeManager</span><br><span class="line">SecondaryNameNode</span><br><span class="line">ResourceManager</span><br><span class="line">Jps</span><br></pre></td></tr></table></figure>

<p>2、把 user_table.txt 上传到 HDFS 中<br>现在，我们要把 Linux 本地文件系统中的 <code>user_table.txt</code> 上传到分布式文件系统 HDFS 中，存放在 HDFS 中的 <code>/bigdatacase/dataset</code> 目录下。</p>
<p>首先，请执行下面命令，在 HDFS 的根目录下面创建一个新的目录 bigdatacase，并在这个目录下创建一个子目录 dataset，如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/hadoop-3.1.3</span><br><span class="line"></span><br><span class="line">hdfs dfs -mkdir -p /bigdatacase/dataset</span><br></pre></td></tr></table></figure>

<p>然后，把 Linux 本地文件系统中的 <code>user_table.txt</code> 上传到分布式文件系统 HDFS 的 <code>/bigdatacase/dataset</code> 目录下，命令如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hdfs dfs -put /usr/local/bigdatacase/dataset/user_table.txt /bigdatacase/dataset</span><br></pre></td></tr></table></figure>

<p>下面可以查看一下 HDFS 中的 <code>user_table.txt</code> 的前 10 条记录，命令如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hdfs dfs -cat /bigdatacase/dataset/user_table.txt | head -10</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1       10001082        285259775       1       4076    2014-12-08      吉林</span><br><span class="line">2       10001082        4368907 1       5503    2014-12-12      贵州</span><br><span class="line">3       10001082        4368907 1       5503    2014-12-12      西藏</span><br><span class="line">4       10001082        53616768        1       9762    2014-12-02      江苏</span><br><span class="line">5       10001082        151466952       1       5232    2014-12-12      青海</span><br><span class="line">6       10001082        53616768        4       9762    2014-12-02      广西</span><br><span class="line">7       10001082        290088061       1       5503    2014-12-12      台湾</span><br><span class="line">8       10001082        298397524       1       10894   2014-12-12      辽宁</span><br><span class="line">9       10001082        32104252        1       6513    2014-12-12      内蒙古</span><br><span class="line">10      10001082        323339743       1       10894   2014-12-12      四川</span><br></pre></td></tr></table></figure>

<p>3、在 Hive 上创建数据库</p>
<p>启动 MySQL 数据库：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看 MySQL 状态</span></span><br><span class="line">systemctl status mysqld</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动 MySQL</span></span><br><span class="line">sudo systemctl start mysqld</span><br></pre></td></tr></table></figure>

<p>由于 Hive 是基于 Hadoop 的数据仓库，使用 HiveQL 语言撰写的查询语句，最终都会被 Hive 自动解析成 MapReduce 任务由 Hadoop去具体执行，因此，需要启动 Hadoop，然后再启动 Hive。由于前面我们已经启动了 Hadoop，所以，这里不需要再次启动 Hadoop。下面，在这个新的终端中执行下面命令进入 Hive：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动Hive</span></span><br><span class="line">hive</span><br></pre></td></tr></table></figure>

<p>启动成功以后，就进入了 <code>hive&gt;</code> 命令提示符状态，可以输入类似 SQL 语句的 HiveQL 语句。</p>
<p>下面，我们要在 Hive 中创建一个数据库 dblab，命令如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create database dblab;</span><br><span class="line"></span><br><span class="line">use dblab;</span><br></pre></td></tr></table></figure>

<p>4、创建外部表</p>
<p>在数据库 dblab 中创建一个外部表 <code>bigdata_user</code>，它包含字段 <code>id, uid, item_id, behavior_type, item_category, date, province</code> ，请在 hive 命令提示符下输入如下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE EXTERNAL TABLE dblab.bigdata_user(id INT,uid STRING,item_id STRING,behavior_type INT,item_category STRING,visit_date DATE,province STRING) COMMENT &#x27;Welcome to xmu dblab!&#x27; ROW FORMAT DELIMITED FIELDS TERMINATED BY &#x27;\t&#x27; STORED AS TEXTFILE LOCATION &#x27;/bigdatacase/dataset&#x27;;</span><br></pre></td></tr></table></figure>

<p>5、查询数据</p>
<p>上面已经成功把 HDFS 中的 <code>/bigdatacase/dataset</code> 目录下的数据加载到了数据仓库 Hive 中，我们现在可以使用下面命令查询一下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from bigdata_user limit 10;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">OK</span><br><span class="line">1       10001082        285259775       1       4076    2014-12-08      吉林</span><br><span class="line">2       10001082        4368907 1       5503    2014-12-12      贵州</span><br><span class="line">3       10001082        4368907 1       5503    2014-12-12      西藏</span><br><span class="line">4       10001082        53616768        1       9762    2014-12-02      江苏</span><br><span class="line">5       10001082        151466952       1       5232    2014-12-12      青海</span><br><span class="line">6       10001082        53616768        4       9762    2014-12-02      广西</span><br><span class="line">7       10001082        290088061       1       5503    2014-12-12      台湾</span><br><span class="line">8       10001082        298397524       1       10894   2014-12-12      辽宁</span><br><span class="line">9       10001082        32104252        1       6513    2014-12-12      内蒙古</span><br><span class="line">10      10001082        323339743       1       10894   2014-12-12      四川</span><br><span class="line">Time taken: 0.959 seconds, Fetched: 10 row(s)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select behavior_type from bigdata_user limit 10;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">OK</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">4</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">Time taken: 0.113 seconds, Fetched: 10 row(s)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>BigData</category>
      </categories>
      <tags>
        <tag>Hadoop</tag>
        <tag>Hive</tag>
      </tags>
  </entry>
  <entry>
    <title>【步骤四】利用R进行数据可视化分析</title>
    <url>/posts/BigData-Case-Volume-Four/</url>
    <content><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>简介：本文章基于厦门大学提供的<a href="https://dblab.xmu.edu.cn/post/7499/">大数据课程实验案例：网站用户行为分析</a>，通过使用 CentOS 操作编写而来。具体介绍请打开链接进行阅读。</p>
<p><font color="red">这里介绍几点值得特别注意的事项：</font></p>
<p>1、对于案例所涉及的系统及软件此文档使用的是以下版本，其他软件版本随意：</p>
<ul>
<li>Linux系统（CentOS7）</li>
<li>MySQL（5.7）</li>
<li>Hadoop（3.1.3）</li>
<li>HBase（2.2.2，HBase版本需要和Hadoop版本兼容）</li>
<li>Hive（3.1.2，Hive需要和Hadoop版本兼容）</li>
<li>Sqoop（1.4.7）</li>
<li>R（3.6.0）</li>
<li>IDEA（ 2023.3.6 社区版）</li>
</ul>
<p><font color="red"><strong>PS：Hadoop 与 HBase、Hive 版本一定要兼容！！！版本一定要兼容！！！这很重要！！！</strong></font>😃😃😃其他软件随意。</p>
<p>2、本文章所有<strong>下载</strong>的所有软件均在 <code>/</code> 目录下。所有<strong>安装</strong>的所有软件均在 <code>/usr/local/</code> 目录下以 <code>软件名-版本号</code> 方式命名。在进行每个软件的安装操作之前请先<strong>整体阅读</strong>整个软件安装流程的文章有个整体思路，<strong>了解到安装此软件需要做哪些设置再进行操作</strong>，这样可以避免很多不必要的麻烦。</p>
<p>3、<font color="red"><strong>此案例分为五个步骤，请按照步骤顺序进行阅读！！</strong>🙂🙂</font></p>
<h1 id="1-环境"><a href="#1-环境" class="headerlink" title="1. 环境"></a>1. 环境</h1><p>1、由于官方仓库中没有 R 的软件包所以需要先安装 epel-release 软件包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 先安装epel-release软件包</span></span><br><span class="line">sudo yum install -y epel-release</span><br></pre></td></tr></table></figure>

<p>EPEL (Extra Packages for Enterprise Linux) 是一个基于Fedora的项目，为 RHEL(Red Hat Enterprise Linux)及其衍生发行版如 CentOS、Scientific Linux 等提供额外的软件包。安装 epel-release 软件包可以扩展这些系统上的软件包选择，特别是那些官方仓库中没有的软件包或更新版本的软件包。</p>
<p>2、安装 R 语言</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum -y install R</span><br></pre></td></tr></table></figure>

<p>安装结束后，可以执行下面命令启动 R：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">R</span><br></pre></td></tr></table></figure>

<p>启动后，会显示如下信息，并进入 <code>&gt;</code> 命令提示符状态：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/R%E5%AE%89%E8%A3%85%E6%88%90%E5%8A%9F.png"></p>
<p><code>&gt;</code> 就是 R 的命令提示符，你可以在后面输入 R 语言命令。可以执行下面命令退出R：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">q<span class="punctuation">(</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure>

<h1 id="2-可视化分析MySQL中的数据"><a href="#2-可视化分析MySQL中的数据" class="headerlink" title="2. 可视化分析MySQL中的数据"></a>2. 可视化分析MySQL中的数据</h1><h2 id="2-1-安装依赖库"><a href="#2-1-安装依赖库" class="headerlink" title="2.1 安装依赖库"></a>2.1 安装依赖库</h2><p>为了完成可视化功能，我们需要为 R 安装一些依赖库，包括：<code>RMySQL</code>、<code>ggplot2</code>、<code>devtools</code> 和 <code>recharts</code>。</p>
<ul>
<li><code>RMySQL</code> 是一个提供了访问 MySQL 数据库的R语言接口程序的R语言依赖库。</li>
<li><code>ggplot2</code> 和 <code>recharts</code> 则是R语言中提供绘图可视化功能的依赖库。</li>
</ul>
<p>启动 R 进入 R 命令提示符状态，执行如下命令安装 RMySQL：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">install.packages<span class="punctuation">(</span><span class="string">&#x27;RMySQL&#x27;</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure>

<p>上面命令执行后， 屏幕会提示 <code>Would you like to user a personal library instead?(y/n)</code> 等问题，只要遇到提问，都在键盘输入y后回车即可。然后，屏幕会显示 <code>---在此连线阶段时请选用CRAN的镜子---</code> ，并会弹出一个白色背景的竖条形窗口，窗口标题是 <code>HTTPS CRAN mirros</code>，标题下面列出了很多国家的镜像列表，我们可以选择位于 China 的镜像，比如，选择 <code>China (Beijing 2) [https]</code> ，然后点击 <code>Enter</code> 按钮，就开始安装了。安装过程需要几分钟(当然，也和当前网络速度有关系)。</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/%E8%AF%B7%E9%80%89%E7%94%A8CRAN%E7%9A%84%E9%95%9C%E5%AD%90.png" style="zoom: 67%;">

<p>由于不同用户的开发环境(虚拟机)不一样，安装有很大可能因为缺少组件导致失败，如果出现如下错误信息：</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/%E7%BC%BA%E5%B0%91%E7%BB%84%E4%BB%B6%E5%AF%BC%E8%87%B4%E5%A4%B1%E8%B4%A5.png" style="zoom:67%;">

<p>只要根据错误给出的错误信息，进行操作即可。<code>q()</code> 退出 R 命令提示符状态，回到 Shell 状态，根据上面的英文错误信息，就需要在Shell 命令提示符状态下执行下面命令安装 <code>libmariadb-client-lgpl-dev</code> ：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum -y install mariadb-devel</span><br></pre></td></tr></table></figure>

<p>然后，再次输入下面命令进入 R 命令提示符状态：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">R</span><br></pre></td></tr></table></figure>

<p>成功会出现以下信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">下载的程序包在</span><br><span class="line">        ‘/tmp/RtmpyKeMBU/downloaded_packages’里</span><br></pre></td></tr></table></figure>

<p>和上面一样继续安装以下包，如果还出现缺少组件的错误，请按照上面的解决方案解决！：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">install.packages<span class="punctuation">(</span><span class="string">&#x27;ggplot2&#x27;</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure>

<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">install.packages<span class="punctuation">(</span><span class="string">&#x27;devtools&#x27;</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure>

<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">install.packages<span class="punctuation">(</span><span class="string">&#x27;DBI&#x27;</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure>

<p>如果在上面安装包的过程中，又出现了错误，处理方法很简单，还是按照上面介绍的方法，根据屏幕上给出的英文错误信息，缺少什么软件，就用 <code>sudo yum -y install</code> 命令安装该软件就可以了。我在 CentOS上执行安装时，用到了以下几个软件，安装命令如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo yum -y install harfbuzz-devel fribidi-devel fontconfig-devel libfreetype6-dev libjpeg-turbo-devel</span><br></pre></td></tr></table></figure>

<p>你在安装过程中，可能会出现不同的错误，按照同样的处理方法可以顺利解决。</p>
<p><font color="red">PS：在 CentOS 系统和 Ubuntu 系统软件名可能会有差异，在安装时会提示找不到可用的包，你可以在英文错误信息中找到软件包关键字使用以下命令进行包的查找。</font>😀</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查找特定的包</span></span><br><span class="line">yum list | grep &lt;package_name&gt;</span><br></pre></td></tr></table></figure>

<p>上面的包安装好后，下面在 R 命令提示符下再执行如下命令安装 <code>taiyun/recharts</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">devtools::install_github(&#x27;taiyun/recharts&#x27;)</span><br></pre></td></tr></table></figure>

<h2 id="2-2-分析"><a href="#2-2-分析" class="headerlink" title="2.2 分析"></a>2.2 分析</h2><p>以下分析使用的函数方法，都可以使用如下命令查询函数的相关文档。例如：查询 <code>sort()</code> 函数如何使用</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="operator">?</span>sort</span><br></pre></td></tr></table></figure>

<p>这时，就会进入冒号 <code>:</code> 提示符状态(也就是帮助文档状态)，在冒号后面输入q即可退出帮助文档状态，返回到 R 提示符状态！</p>
<p>连接 MySQL 获取数据，请在 Linux 系统中新建另外一个终端，然后执行下面命令启动 MySQL 数据库：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动 MySQL</span></span><br><span class="line">sudo systemctl start mysqld</span><br></pre></td></tr></table></figure>

<p>然后进入 MySQL 命令提示符状态：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure>

<p>会提示你输入密码，输入密码，就进入了 <code>mysql&gt;</code> 提示符状态，下面就可以输入一些 SQL 语句查询数据：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use dblab;</span><br><span class="line">select * from user_action limit 10;</span><br></pre></td></tr></table></figure>

<p>这样，就可以查看到数据库 dblab 中的 <code>user_action</code> 表的前10行记录，如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+--------+-----------+-----------+---------------+---------------+------------+-----------+</span><br><span class="line">| id     | uid       | item_id   | behavior_type | item_category | visit_date | province  |</span><br><span class="line">+--------+-----------+-----------+---------------+---------------+------------+-----------+</span><br><span class="line">| 225651 | 102865660 | 237147749 | 1             | 5689          | 2014-12-04 | 黑龙江    |</span><br><span class="line">| 225652 | 102865660 | 395294600 | 1             | 3099          | 2014-12-11 | 山西      |</span><br><span class="line">| 225653 | 102865660 | 164310319 | 1             | 5027          | 2014-12-08 | 江苏      |</span><br><span class="line">| 225654 | 102865660 | 72511722  | 1             | 1121          | 2014-12-13 | 西藏      |</span><br><span class="line">| 225655 | 102865660 | 334372932 | 1             | 5027          | 2014-11-30 | 甘肃      |</span><br><span class="line">| 225656 | 102865660 | 323237439 | 1             | 5027          | 2014-12-02 | 广东      |</span><br><span class="line">| 225657 | 102865660 | 323237439 | 1             | 5027          | 2014-12-07 | 重庆市    |</span><br><span class="line">| 225658 | 102865660 | 34102362  | 1             | 1863          | 2014-12-13 | 宁夏      |</span><br><span class="line">| 225659 | 102865660 | 373499226 | 1             | 12388         | 2014-11-26 | 黑龙江    |</span><br><span class="line">| 225660 | 102865660 | 271583890 | 1             | 5027          | 2014-12-06 | 福建      |</span><br><span class="line">+--------+-----------+-----------+---------------+---------------+------------+-----------+</span><br><span class="line">10 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>然后切换到刚才已经打开的R命令提示符终端窗口：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">library<span class="punctuation">(</span>DBI<span class="punctuation">)</span></span><br><span class="line">library<span class="punctuation">(</span>RMySQL<span class="punctuation">)</span></span><br><span class="line">conn <span class="operator">&lt;-</span> dbConnect<span class="punctuation">(</span>MySQL<span class="punctuation">(</span><span class="punctuation">)</span><span class="punctuation">,</span>dbname<span class="operator">=</span><span class="string">&#x27;dblab&#x27;</span><span class="punctuation">,</span>username<span class="operator">=</span><span class="string">&#x27;root&#x27;</span><span class="punctuation">,</span>password<span class="operator">=</span><span class="string">&#x27;root&#x27;</span><span class="punctuation">,</span>host<span class="operator">=</span><span class="string">&quot;127.0.0.1&quot;</span><span class="punctuation">,</span>port<span class="operator">=</span><span class="number">3306</span><span class="punctuation">)</span></span><br><span class="line">user_action <span class="operator">&lt;-</span> dbGetQuery<span class="punctuation">(</span>conn<span class="punctuation">,</span><span class="string">&#x27;select * from user_action&#x27;</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure>

<p>1、分析消费者对商品的行为</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">summary<span class="punctuation">(</span>user_action<span class="operator">$</span>behavior_type<span class="punctuation">)</span></span><br></pre></td></tr></table></figure>

<p><code>summary()</code> 函数可以得到样本数据类型和长度,如果样本是数值型,我们还能得到样本数据的最小值、最大值、四分位数以及均值信息。<br>得到结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Length     Class      Mode </span><br><span class="line">300000 character character </span><br></pre></td></tr></table></figure>

<p>可以看出原来的 MySQL 数据中，消费者行为变量的类型是字符型。这样不好做比较，需要把消费者行为变量转换为数值型变量</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">summary<span class="punctuation">(</span><span class="built_in">as.numeric</span><span class="punctuation">(</span>user_action<span class="operator">$</span>behavior_type<span class="punctuation">)</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure>

<p>得到结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> Min. 1st Qu.  Median    Mean 3rd Qu.    Max. </span><br><span class="line">1.000   1.000   1.000   1.105   1.000   4.000 </span><br></pre></td></tr></table></figure>

<p>接下来用柱状图表示：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">library<span class="punctuation">(</span>ggplot2<span class="punctuation">)</span></span><br><span class="line">ggplot<span class="punctuation">(</span>user_action<span class="punctuation">,</span>aes<span class="punctuation">(</span><span class="built_in">as.numeric</span><span class="punctuation">(</span>behavior_type<span class="punctuation">)</span><span class="punctuation">)</span><span class="punctuation">)</span><span class="operator">+</span>geom_histogram<span class="punctuation">(</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure>

<p>在使用 <code>ggplot2</code> 库的时候，需要使用library导入库。ggplot()绘制时，创建绘图对象，即第一个图层，包含两个参数(数据与变量名称映射)。变量名称需要被包含aes函数里面。<code>ggplot2</code> 的图层与图层之间用 <code>+</code> 进行连接。<code>ggplot2</code> 包中的 <code>geom_histogram()</code> 可以很方便的实现直方图的绘制。</p>
<p>分析结果如下图:</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/%E6%9F%B1%E7%8A%B6%E5%9B%BE.png" style="zoom:50%;">

<p>从上图可以得到：大部分消费者行为仅仅只是浏览。只有很少部分的消费者会购买商品。</p>
<p>2、分析哪一类商品被购买总量前十的商品和被购买总量</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取子数据集</span></span><br><span class="line">temp <span class="operator">&lt;-</span> subset<span class="punctuation">(</span>user_action<span class="punctuation">,</span><span class="built_in">as.numeric</span><span class="punctuation">(</span>behavior_type<span class="punctuation">)</span><span class="operator">==</span><span class="number">4</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#排序</span></span><br><span class="line">count <span class="operator">&lt;-</span> sort<span class="punctuation">(</span>table<span class="punctuation">(</span>temp<span class="operator">$</span>item_category<span class="punctuation">)</span><span class="punctuation">,</span>decreasing <span class="operator">=</span> <span class="built_in">T</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取第1到10个排序结果</span></span><br><span class="line">print<span class="punctuation">(</span>count<span class="punctuation">[</span><span class="number">1</span><span class="operator">:</span><span class="number">10</span><span class="punctuation">]</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure>

<p><code>subset()</code> 函数，从某一个数据框中选择出符合某条件的数据或是相关的列.table()对应的就是统计学中的列联表，是一种记录频数的方法。<code>sort()</code> 进行排序，返回排序后的数值向量。</p>
<p>得到结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">6344  1863  5232 12189  7957  4370 13230 11537  1838  5894 </span><br><span class="line">  79    46    45    42    40    34    33    32    31    30 </span><br></pre></td></tr></table></figure>

<p>结果第一行表示商品分类,该类下被消费的数次。</p>
<p>接下来用散点图表示：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将count矩阵结果转换成数据框</span></span><br><span class="line">result <span class="operator">&lt;-</span> as.data.frame<span class="punctuation">(</span>count<span class="punctuation">[</span><span class="number">1</span><span class="operator">:</span><span class="number">10</span><span class="punctuation">]</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line">ggplot<span class="punctuation">(</span>result<span class="punctuation">,</span>aes<span class="punctuation">(</span>Var1<span class="punctuation">,</span>Freq<span class="punctuation">,</span>col<span class="operator">=</span>factor<span class="punctuation">(</span>Var1<span class="punctuation">)</span><span class="punctuation">)</span><span class="punctuation">)</span><span class="operator">+</span>geom_point<span class="punctuation">(</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure>

<p>通过 <code>as.data.frame()</code> 把矩阵等转换成为数据框。</p>
<p>分析结果如下图：</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/%E6%95%A3%E7%82%B9%E5%9B%BE.png" style="zoom: 50%;">



<p>3、分析每年的哪个月份购买商品的量最多</p>
<p>从 MySQL 直接获取的数据中 <code>visit_date</code> 变量都是 2014 年份,并没有划分出具体的月份，那么可以在数据集增加一列月份数据。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># visit_date变量中截取月份</span></span><br><span class="line">month <span class="operator">&lt;-</span> substr<span class="punctuation">(</span>user_action<span class="operator">$</span>visit_date<span class="punctuation">,</span><span class="number">6</span><span class="punctuation">,</span><span class="number">7</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># user_action增加一列月份数据</span></span><br><span class="line">user_action <span class="operator">&lt;-</span> cbind<span class="punctuation">(</span>user_action<span class="punctuation">,</span>month<span class="punctuation">)</span></span><br></pre></td></tr></table></figure>

<p>接下来用柱状图分别表示消费者购买量</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">ggplot<span class="punctuation">(</span>user_action<span class="punctuation">,</span>aes<span class="punctuation">(</span><span class="built_in">as.numeric</span><span class="punctuation">(</span>behavior_type<span class="punctuation">)</span><span class="punctuation">,</span>col<span class="operator">=</span>factor<span class="punctuation">(</span>month<span class="punctuation">)</span><span class="punctuation">)</span><span class="punctuation">)</span><span class="operator">+</span>geom_histogram<span class="punctuation">(</span><span class="punctuation">)</span><span class="operator">+</span>facet_grid<span class="punctuation">(</span>.<span class="operator">~</span>month<span class="punctuation">)</span></span><br></pre></td></tr></table></figure>

<p><code>aes()</code> 函数中的 col 属性可以用来设置颜色。<code>factor()</code> 函数则是把数值变量转换成分类变量，作用是以不同的颜色表示。如果不使用<code>factor()</code> 函数，颜色将以同一种颜色渐变的颜色表现。 <code>facet_grid(.~month)</code> 表示柱状图按照不同月份进行分区。</p>
<p>由于 MySQL 获取的数据中只有11月份和12月份的数据，所以上图只有显示两个表格。</p>
<p>分析结果如下图：</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/%E6%B6%88%E8%B4%B9%E8%80%85%E8%B4%AD%E4%B9%B0%E9%87%8F%E6%9F%B1%E7%8A%B6%E5%9B%BE.png" style="zoom:50%;">

<p>4、分析国内哪个省份的消费者最有购买欲望</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">library<span class="punctuation">(</span>recharts<span class="punctuation">)</span></span><br><span class="line">rel <span class="operator">&lt;-</span> as.data.frame<span class="punctuation">(</span>table<span class="punctuation">(</span>temp<span class="operator">$</span>province<span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line">provinces <span class="operator">&lt;-</span> rel<span class="operator">$</span>Var1</span><br><span class="line">x <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="punctuation">)</span></span><br><span class="line"><span class="keyword">for</span><span class="punctuation">(</span>n <span class="keyword">in</span> provinces<span class="punctuation">)</span><span class="punctuation">&#123;</span></span><br><span class="line">x<span class="punctuation">[</span><span class="built_in">length</span><span class="punctuation">(</span>x<span class="punctuation">)</span><span class="operator">+</span><span class="number">1</span><span class="punctuation">]</span> <span class="operator">=</span> nrow<span class="punctuation">(</span>subset<span class="punctuation">(</span>temp<span class="punctuation">,</span><span class="punctuation">(</span>province<span class="operator">==</span>n<span class="punctuation">)</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置地图信息</span></span><br><span class="line">mapData <span class="operator">&lt;-</span> data.frame<span class="punctuation">(</span>province<span class="operator">=</span>rel<span class="operator">$</span>Var1<span class="punctuation">,</span>count<span class="operator">=</span>x<span class="punctuation">,</span> stringsAsFactors<span class="operator">=</span><span class="built_in">F</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#画出中国地图</span></span><br><span class="line">eMap<span class="punctuation">(</span>mapData<span class="punctuation">,</span> namevar<span class="operator">=</span><span class="operator">~</span>province<span class="punctuation">,</span> datavar <span class="operator">=</span> <span class="operator">~</span>count<span class="punctuation">)</span></span><br></pre></td></tr></table></figure>

<p><code>nrow()</code> 用来计算数据集的行数。</p>
<p>分析结果如下图：</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/%E5%85%A8%E5%9B%BD%E6%95%B0%E6%8D%AE%E5%9B%BE.png" style="zoom:50%;">

<p><strong>大数据案例网站用户购物行为分析所有实验步骤到此结束！！！！！</strong></p>
<p><strong>大数据案例网站用户购物行为分析所有实验步骤到此结束！！！！！</strong></p>
<p>😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀</p>
]]></content>
      <categories>
        <category>BigData</category>
      </categories>
      <tags>
        <tag>R</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring入门（上）</title>
    <url>/posts/Accidence-Spring-Volume-One/</url>
    <content><![CDATA[<p>Spring官网：<a href="https://spring.io/">https://spring.io/</a></p>
<p>参考视频：</p>
<ul>
<li><a href="https://www.bilibili.com/video/BV1Ft4y1g7Fb/">Spring视频零基础入门到高级，Spring全套视频教程详解</a></li>
<li><a href="https://www.bilibili.com/video/BV1Fi4y1S7ix/">黑马程序员SSM框架教程Spring部分</a></li>
</ul>
<p>源码仓库：<a href="https://github.com/muyoukule/accidence-spring">muyoukule&#x2F;accidence-spring (github.com)</a></p>
<h1 id="0-Spring简介"><a href="#0-Spring简介" class="headerlink" title="0. Spring简介"></a>0. Spring简介</h1><p>Spring是一个开源的Java EE应用程序框架，由Rod Johnson在2002年创建，旨在解决企业级编程开发中的复杂性，实现敏捷开发。Spring框架是一个轻量级的容器，用于管理业务相关的对象。它通过控制反转（IoC）和面向切面编程（AOP）等特性，降低了组件之间的耦合度，提高了代码的可重用性和可维护性。</p>
<p><strong>核心特性</strong>：</p>
<ul>
<li><strong>依赖注入（Dependency Injection）</strong>：这是Spring框架管理对象间依赖关系的主要手段。通过依赖注入，我们可以将对象的依赖关系从代码中解耦出来，交由Spring容器来管理。这样，当依赖关系发生变化时，我们只需要修改配置文件，而无需修改代码。</li>
<li><strong>面向切面编程（Aspect-Oriented Programming，AOP）</strong>：Spring AOP通过定义横切关注点（如日志、安全、事务管理等），将这些关注点从业务逻辑中分离出来，以模块化的方式进行处理。这有助于减少代码的重复，提高代码的可读性和可维护性。</li>
<li><strong>事务管理</strong>：Spring框架提供了强大的事务管理功能，可以轻松地处理事务操作，确保数据的完整性和一致性。</li>
<li><strong>数据访问</strong>：Spring框架对多种数据访问技术提供了良好的支持，如JDBC、ORM框架（如Hibernate、MyBatis）等，简化了数据访问层的开发。</li>
</ul>
<p><strong>应用场景</strong>：</p>
<p>Spring框架广泛应用于各种Java企业级应用程序开发中，包括Web应用、RESTful服务、批处理应用等。无论是构建大型的分布式系统，还是开发小型的应用程序，Spring都能提供强大的支持和灵活的解决方案。</p>
<p><strong>模块组成</strong>：</p>
<p>Spring框架由多个模块组成，每个模块都有其特定的功能和用途。核心容器（Core Container）是其他模块建立的基础，主要由Beans模块、Core模块、Context模块、Context-support模块和SpEL（Spring Expression Language）模块组成。此外，还有数据访问&#x2F;集成（Data Access&#x2F;Integration）层，包括JDBC、ORM、OXM、JMS和Transactions模块等。</p>
<p><strong>使用方式</strong>：</p>
<p>在使用 Spring 框架时，一般通过 Maven 或 Gradle 等构建工具导入所需的依赖。然后，我们可以开始编写 Spring 应用程序，利用Spring 的 IoC 和 AOP 等特性来管理对象间的依赖关系和横切关注点。同时，我们还可以利用 Spring 提供的数据访问和事务管理等功能来简化应用程序的开发。</p>
<h1 id="1-入门程序"><a href="#1-入门程序" class="headerlink" title="1. 入门程序"></a>1. 入门程序</h1><h2 id="1-1-IOC入门案例"><a href="#1-1-IOC入门案例" class="headerlink" title="1.1 IOC入门案例"></a>1.1 IOC入门案例</h2><h3 id="1-1-1-准备工作"><a href="#1-1-1-准备工作" class="headerlink" title="1.1.1 准备工作"></a>1.1.1 准备工作</h3><p>a. 打开IDEA创建Empty Project：spring</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/accidence-spring/%E8%BE%93%E5%85%A5%E9%A1%B9%E7%9B%AE%E5%90%8D%E7%A7%B0.png" style="zoom: 67%;">

<p>b. 设置JDK版本17，编译器版本17</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/accidence-spring/%E8%AE%BE%E7%BD%AEJDK%E7%89%88%E6%9C%AC.png" style="zoom:67%;">

<p>c. 设置IDEA的Maven：关联自己的Maven</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/accidence-spring/%E5%85%B3%E8%81%94Maven.png" style="zoom:67%;">

<p>d. 在空的工程中创建第一个模块：spring-001</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/accidence-spring/%E5%88%9B%E5%BB%BA%E6%A8%A1%E5%9D%97.png" style="zoom: 80%;">

<p>e. 创建好的项目结构如下：</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/accidence-spring/%E7%AC%AC%E4%B8%80%E4%B8%AASpring%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84.png" style="zoom: 67%;">

<h3 id="1-1-2-创建项目"><a href="#1-1-2-创建项目" class="headerlink" title="1.1.2 创建项目"></a>1.1.2 创建项目</h3><p>a. 在 <code>pom.xml</code> 添加 Spring 的依赖jar包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--spring context依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.27<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--junit--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>当加入 <code>spring context</code> 的依赖之后，会关联引入其他依赖：</p>
<ul>
<li><p><code>spring aop</code> ：面向切面编程</p>
</li>
<li><p><code>spring beans</code> ：IoC核心</p>
</li>
<li><p><code>spring core</code> ：spring的核心工具包</p>
</li>
<li><p><code>spring jcl</code> ：spring的日志包</p>
</li>
<li><p><code>spring expression</code> ：spring表达式</p>
</li>
</ul>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/accidence-spring/spring%20context%E4%BE%9D%E8%B5%96.png"></p>
<p>b. 添加案例中需要的类,创建 <code>User</code> 类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello userBean....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>c. 添加spring配置文件 <code>applicationContext.xml</code></p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/accidence-spring/%E6%B7%BB%E5%8A%A0spring%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.png">

<p>d. 在 <code>applicationContext.xml</code> 配置文件中完成 <code>bean</code> 的配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--bean标签标示配置bean,id属性标示给bean起名字,class属性表示给bean定义类型--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.muyoukule.Bean.User&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>e. 获取IOC容器</p>
<p>使用Spring提供的接口完成IOC容器的创建，创建App类，编写main方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//获取IOC容器</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>f. 从容器中获取对象进行方法调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//获取IOC容器</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//获取出的对象为Object类型，需要进行强转</span></span><br><span class="line">        <span class="comment">//User userBean = (User) ctx.getBean(&quot;userBean&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//或者在参数后指定返回值的类型</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">userBean</span> <span class="operator">=</span> ctx.getBean(<span class="string">&quot;userBean&quot;</span>, User.class);</span><br><span class="line">        userBean.hello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>g. 运行 <code>main()</code> 方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hello userBean....</span><br></pre></td></tr></table></figure>

<p>至此，Spring的IOC入门案例已经完成。</p>
<h2 id="1-2-IOC入门案例详解"><a href="#1-2-IOC入门案例详解" class="headerlink" title="1.2 IOC入门案例详解"></a>1.2 IOC入门案例详解</h2><blockquote>
<p> Bean 标签的 id 属性可以重复吗？</p>
</blockquote>
<p>新建一个 <code>Vip</code> 类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Vip</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 <code>applicationContext.xml</code> 配置文件中配置为 <code>bean</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--bean标签标示配置bean,id属性标示给bean起名字,class属性表示给bean定义类型--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.muyoukule.Bean.User&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.muyoukule.Bean.Vip&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>运行 <code>main()</code> 方法测试，程序报错提示：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/accidence-spring/id%E5%B1%9E%E6%80%A7%E9%87%8D%E5%A4%8D.png"></p>
<p>通过测试得出：在 spring 的配置文件中 id 是不能重名。</p>
<blockquote>
<p>底层是怎么创建对象的，是通过反射机制调用无参数构造方法吗？</p>
</blockquote>
<p>在 <code>User</code> 类中添加无参构造方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;User的无参数构造方法执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello userBean....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行测试程序</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">User的无参数构造方法执行</span><br><span class="line">hello userBean....</span><br></pre></td></tr></table></figure>

<p>通过测试得知：创建对象时确实调用了无参数构造方法。</p>
<blockquote>
<p>如果提供一个有参数构造方法，不提供无参数构造方法会怎样呢？</p>
</blockquote>
<p>注释掉 User 类中的无参构造方法，在 User 类中添加有参构造方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"><span class="comment">/*    public User() &#123;</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;User的无参数构造方法执行&quot;);</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;User的有参数构造方法执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello userBean....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行测试程序</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/accidence-spring/%E6%97%A0%E5%8F%82%E6%95%B0%E6%9E%84%E9%80%A0%E4%B8%8D%E5%AD%98%E5%9C%A8.png"></p>
<p>通过测试得知：spring 是通过调用类的无参数构造方法来创建对象的，所以要想让 spring 给你创建对象，必须保证无参数构造方法是存在的。</p>
<blockquote>
<p>Spring是如何创建对象的呢？原理是什么？</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// dom4j解析beans.xml文件，从中获取class的全限定类名</span></span><br><span class="line"><span class="comment">// 通过反射机制调用无参数构造方法创建对象</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.muyoukule.Bean.User&quot;</span>);</span><br><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> clazz.newInstance();</span><br></pre></td></tr></table></figure>

<blockquote>
<p>把创建好的对象存储到一个什么样的数据结构当中了呢？</p>
</blockquote>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/accidence-spring/%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8%E5%88%B0%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.png" style="zoom: 80%;">

<blockquote>
<p>spring配置文件的名字可以随意命名，且可以创建多个，并且在读取的时候也可以一并读取</p>
</blockquote>
<p>在 <code>applicationContext2.xml</code> 配置文件中配置 <code>vipBean</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;vipBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.muyoukule.Bean.Vip&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//获取IOC容器</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>, <span class="string">&quot;applicationContext2.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//或者在参数后指定返回值的类型</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">userBean</span> <span class="operator">=</span> ctx.getBean(<span class="string">&quot;userBean&quot;</span>, User.class);</span><br><span class="line">        System.out.println(userBean);</span><br><span class="line">        <span class="type">Vip</span> <span class="variable">vipBean</span> <span class="operator">=</span> ctx.getBean(<span class="string">&quot;vipBean&quot;</span>, Vip.class);</span><br><span class="line">        System.out.println(vipBean);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行测试程序</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">User的无参数构造方法执行</span><br><span class="line">com.muyoukule.Bean.User@345965f2</span><br><span class="line">com.muyoukule.Bean.Vip@429bd883</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在配置文件中配置的类必须是自定义的吗，可以使用JDK中的类吗，例如：java.util.Date？</p>
</blockquote>
<p>在 <code>applicationContext.xml</code> 配置文件中添加如下 <code>bean</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dateBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;java.util.Date&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//获取IOC容器</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//或者在参数后指定返回值的类型</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">userBean</span> <span class="operator">=</span> ctx.getBean(<span class="string">&quot;userBean&quot;</span>, User.class);</span><br><span class="line">        System.out.println(userBean);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">dateBean</span> <span class="operator">=</span> ctx.getBean(<span class="string">&quot;dateBean&quot;</span>);</span><br><span class="line">        System.out.println(dateBean);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">User的无参数构造方法执行</span><br><span class="line">com.muyoukule.Bean.User@4d339552</span><br><span class="line">Mon May 08 23:36:09 CST 2023</span><br></pre></td></tr></table></figure>

<p>通过测试得知，在 spring 配置文件中配置的bean可以任意类，只要这个类不是抽象的，并且提供了无参数构造方法。</p>
<blockquote>
<p><code>getBean()</code> 方法返回的类型是 <code>Object</code> ，如果访问子类的特有属性和方法时，还需要向下转型，有其它办法可以解决这个问题吗？</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;userBean&quot;</span>, User.class);</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>ClassPathXmlApplicationContext</code> 是从类路径中加载配置文件，如果没有在类路径当中，又应该如何加载配置文件呢？</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileSystemXmlApplicationContext</span>(<span class="string">&quot;d:/applicationContext.xml&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>没有在类路径中的话，需要使用 <code>FileSystemXmlApplicationContext</code> 类进行加载配置文件。这种方式较少用。一般都是将配置文件放到类路径当中，这样可移植性更强。</p>
<blockquote>
<p><code>ApplicationContext</code> 的超级父接口 <code>BeanFactory</code></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">BeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line"><span class="type">Object</span> <span class="variable">vipBean</span> <span class="operator">=</span> beanFactory.getBean(<span class="string">&quot;vipBean&quot;</span>);</span><br><span class="line">System.out.println(vipBean);</span><br></pre></td></tr></table></figure>

<p><code>BeanFactory</code> 是 Spring 容器的超级接口。<code>ApplicationContext</code> 是 <code>BeanFactory</code> 的子接口。</p>
<h2 id="1-3-Spring启用Log4j2日志框架"><a href="#1-3-Spring启用Log4j2日志框架" class="headerlink" title="1.3 Spring启用Log4j2日志框架"></a>1.3 Spring启用Log4j2日志框架</h2><p>从Spring5之后，Spring框架支持集成的日志框架是 <code>Log4j2</code> 。如何启用日志框架：</p>
<p>a. 引入 <code>Log4j2</code> 的依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--log4j2的依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.19.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-slf4j2-impl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.19.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>b. 在类的根路径下提供 <code>log4j2.xml</code> 配置文件（文件名固定为：<code>log4j2.xml</code> ，文件必须放到类根路径下。）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">loggers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            level指定日志级别，从低到高的优先级：</span></span><br><span class="line"><span class="comment">                ALL &lt; TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL &lt; OFF</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;springlog&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">loggers</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">appenders</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--输出日志信息到控制台--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">console</span> <span class="attr">name</span>=<span class="string">&quot;springlog&quot;</span> <span class="attr">target</span>=<span class="string">&quot;SYSTEM_OUT&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--控制日志输出的格式--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;%d&#123;yyyy-MM-dd HH:mm:ss SSS&#125; [%t] %-3level %logger&#123;1024&#125; - %msg%n&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">console</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appenders</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="2-Spring对IoC的实现"><a href="#2-Spring对IoC的实现" class="headerlink" title="2. Spring对IoC的实现"></a>2. Spring对IoC的实现</h1><h2 id="2-1-IoC-控制反转"><a href="#2-1-IoC-控制反转" class="headerlink" title="2.1 IoC 控制反转"></a>2.1 IoC 控制反转</h2><ul>
<li><p>控制反转是一种思想。</p>
</li>
<li><p>控制反转是为了降低程序耦合度，提高程序扩展力，达到OCP原则，达到DIP原则。</p>
</li>
<li><p>控制反转，反转的是什么？</p>
<ul>
<li>将对象的创建权利交出去，交给第三方容器负责。</li>
<li>将对象和对象之间关系的维护权交出去，交给第三方容器负责。</li>
</ul>
</li>
<li><p>控制反转这种思想如何实现呢？</p>
<ul>
<li>DI（Dependency Injection）：依赖注入</li>
</ul>
</li>
</ul>
<h2 id="2-2-依赖注入"><a href="#2-2-依赖注入" class="headerlink" title="2.2 依赖注入"></a>2.2 依赖注入</h2><p>依赖注入实现了控制反转的思想。Spring通过依赖注入的方式来完成Bean管理的。</p>
<p>Bean管理说的是：<code>Bean</code> 对象的创建，以及Bean对象中属性的赋值（或者叫做 <code>Bean</code> 对象之间关系的维护）。</p>
<p>依赖注入：</p>
<ul>
<li>依赖指的是对象和对象之间的关联关系。</li>
<li>注入指的是一种数据传递行为，通过注入行为来让对象和对象产生关系。</li>
</ul>
<p>依赖注入常见的实现方式包括两种：</p>
<ul>
<li>第一种：set注入</li>
<li>第二种：构造注入</li>
</ul>
<p>新建模块：spring-002</p>
<h3 id="2-2-1-set注入"><a href="#2-2-1-set注入" class="headerlink" title="2.2.1 set注入"></a>2.2.1 set注入</h3><p>set 注入，基于 set 方法实现的，底层会通过反射机制调用属性对应的 set 方法然后给属性赋值。这种方式要求属性必须对外提供 set 方法。</p>
<blockquote>
<p>对外提供 set 方法</p>
</blockquote>
<p>a. 创建 <code>UserDao</code> 类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在保存用户数据...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>b. 创建 <code>UserService</code> 类，并为 <code>UserDao</code> 提供 <code>setter</code> 方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用set方式注入，必须提供set方法。</span></span><br><span class="line">    <span class="comment">// 反射机制要调用这个方法给属性赋值的。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserDao</span><span class="params">(UserDao userDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;UserService...&quot;</span>);</span><br><span class="line">        userDao.insert();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>c. 在配置文件中完成 <code>bean</code> 的配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDaoBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.muyoukule.Dao.UserDao&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--property标签表示配置当前bean的属性,name属性表示配置哪一个具体的属性,ref属性表示参照哪一个bean--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userServiceBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.muyoukule.Service.UserService&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDaoBean&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>d. 编写测试程序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSetDI</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring.xml&quot;</span>);</span><br><span class="line">    <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;userServiceBean&quot;</span>, UserService.class);</span><br><span class="line">    userService.save();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>e. 运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UserService...</span><br><span class="line">正在保存用户数据...</span><br></pre></td></tr></table></figure>

<p>实现原理：</p>
<ul>
<li><p>通过 <code>property</code> 标签获取到属性名：<code>userDao</code> 。</p>
</li>
<li><p>通过属性名推断出set方法名：<code>setUserDao</code> 。</p>
</li>
<li><p>通过反射机制调用 <code>setUserDao()</code> 方法给属性赋值。</p>
</li>
<li><p><code>property</code> 标签的 <code>name</code> 是属性名。</p>
</li>
<li><p><code>property</code> 标签的 <code>ref</code> 是要注入的 <code>bean</code> 对象的 id。（通过 <code>ref</code> 属性来完成 <code>bean</code> 的装配，这是 <code>bean</code>最简单的一种装配方式。装配指的是：创建系统组件之间关联的动作）</p>
</li>
</ul>
<blockquote>
<p>把set方法注释掉</p>
</blockquote>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/accidence-spring/set%E6%96%B9%E6%B3%95%E8%A2%AB%E6%B3%A8%E9%87%8A.png"></p>
<p>通过测试得知，底层实际上调用了 <code>setUserDao()</code> 方法。所以需要确保这个方法的存在。</p>
<blockquote>
<p>把属性名修改一下，但方法名还是 <code>setUserDao()</code> </p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> UserDao aaa;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用set方式注入，必须提供set方法。</span></span><br><span class="line">    <span class="comment">// 反射机制要调用这个方法给属性赋值的。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserDao</span><span class="params">(UserDao userDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.aaa = userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;UserService...&quot;</span>);</span><br><span class="line">        aaa.insert();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UserService...</span><br><span class="line">正在保存用户数据...</span><br></pre></td></tr></table></figure>

<p>通过测试看到程序仍然可以正常执行，说明 <code>property</code> 标签的 <code>name</code> 是：<code>setUserDao()</code> 方法名演变得到的。演变的规律是：</p>
<ul>
<li>setUsername() 演变为 username</li>
<li>setUserDao() 演变为 userDao</li>
</ul>
<p>另外，对于 <code>property</code> 标签来说，<code>ref</code> 属性也可以采用标签的方式，但使用 <code>ref</code> 属性是多数的。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userServiceBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.muyoukule.Service.UserService&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;userDaoBean&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>总结：<code>set</code> 注入的核心实现原理：通过反射机制调用 <code>set</code> 方法来给属性赋值，让两个对象之间产生关系。</p>
<h3 id="2-2-2-构造注入"><a href="#2-2-2-构造注入" class="headerlink" title="2.2.2 构造注入"></a>2.2.2 构造注入</h3><p>核心原理：通过调用构造方法来给属性赋值。</p>
<blockquote>
<p>提供构造方法</p>
</blockquote>
<p>a. 创建如下两个类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteById</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在删除订单...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> OrderDao orderDao;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 通过反射机制调用构造方法给属性赋值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OrderService</span><span class="params">(OrderDao orderDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.orderDao = orderDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;OrderService...&quot;</span>);</span><br><span class="line">        orderDao.deleteById();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>b. 在 <code>spring.xml</code> 下配置如下 <code>bean</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;orderDaoBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.muyoukule.Dao.OrderDao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;orderServiceBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.muyoukule.Service.OrderService&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--index=&quot;0&quot;表示构造方法的第一个参数，将orderDaoBean对象传递给构造方法的第一个参数。--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;orderDaoBean&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>c. 编写测试程序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testConstructorDI</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring.xml&quot;</span>);</span><br><span class="line">    <span class="type">OrderService</span> <span class="variable">orderServiceBean</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;orderServiceBean&quot;</span>, OrderService.class);</span><br><span class="line">    orderServiceBean.delete();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>d. 运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">OrderService...</span><br><span class="line">正在删除订单...</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果构造方法有两个参数</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> OrderDao orderDao;</span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过反射机制调用构造方法给属性赋值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OrderService</span><span class="params">(OrderDao orderDao, UserDao userDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.orderDao = orderDao;</span><br><span class="line">        <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;OrderService...&quot;</span>);</span><br><span class="line">        orderDao.deleteById();</span><br><span class="line">        userDao.insert();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;orderDaoBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.muyoukule.Dao.OrderDao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDaoBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.muyoukule.Dao.UserDao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;orderServiceBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.muyoukule.Service.OrderService&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--第一个参数下标是0--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;orderDaoBean&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--第二个参数下标是1--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDaoBean&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>执行测试程序</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">OrderService...</span><br><span class="line">正在删除订单...</span><br><span class="line">正在保存用户数据...</span><br></pre></td></tr></table></figure>

<blockquote>
<p>不使用参数下标，使用参数的名字</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;orderDaoBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.muyoukule.Dao.OrderDao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDaoBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.muyoukule.Dao.UserDao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;orderServiceBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.muyoukule.Service.OrderService&quot;</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--这里使用了构造方法上参数的名字--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;orderDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;orderDaoBean&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDaoBean&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>不指定参数下标，不指定参数名字</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;orderDaoBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.muyoukule.Dao.OrderDao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDaoBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.muyoukule.Dao.UserDao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;orderServiceBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.muyoukule.Service.OrderService&quot;</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--没有指定下标，也没有指定参数名字--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">&quot;orderDaoBean&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">&quot;userDaoBean&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>配置文件中构造方法参数的类型顺序和构造方法参数的类型顺序不一致</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;orderDaoBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.muyoukule.Dao.OrderDao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDaoBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.muyoukule.Dao.UserDao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;orderServiceBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.muyoukule.Service.OrderService&quot;</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--顺序已经和构造方法的参数顺序不同了--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">&quot;userDaoBean&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">&quot;orderDaoBean&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>以上几种情况测试结果均为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">OrderService...</span><br><span class="line">正在删除订单...</span><br><span class="line">正在保存用户数据...</span><br></pre></td></tr></table></figure>

<p>通过测试得知，通过构造方法注入的时候：</p>
<ul>
<li>可以通过下标</li>
<li>可以通过参数名</li>
<li>也可以不指定下标和参数名，可以类型自动推断。</li>
</ul>
<h2 id="2-3-set注入专题"><a href="#2-3-set注入专题" class="headerlink" title="2.3 set注入专题"></a>2.3 set注入专题</h2><h3 id="2-3-1-注入外部-Bean"><a href="#2-3-1-注入外部-Bean" class="headerlink" title="2.3.1 注入外部 Bean"></a>2.3.1 注入外部 Bean</h3><p>之前的一个案例中使用的案例就是注入外部 <code>Bean</code> 的方式。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDaoBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.muyoukule.Dao.UserDao&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--property标签表示配置当前bean的属性,name属性表示配置哪一个具体的属性,ref属性表示参照哪一个bean--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userServiceBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.muyoukule.Service.UserService&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDaoBean&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>外部Bean的特点：<code>bean</code> 定义到外面，在 <code>property</code> 标签中使用 <code>ref</code> 属性进行注入。通常这种方式是常用。</p>
<h3 id="2-3-2-注入内部-Bean"><a href="#2-3-2-注入内部-Bean" class="headerlink" title="2.3.2 注入内部 Bean"></a>2.3.2 注入内部 Bean</h3><p>内部 Bean 的方式：在 <code>bean</code> 标签中嵌套 <code>bean</code> 标签。</p>
<p>a. 新建 <code>spring-inner-bean.xml</code> 文件，配置以下 <code>bean</code> </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userServiceBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.muyoukule.Service.UserService&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.muyoukule.Dao.UserDao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>b. 编写测试代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInnerBean</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring-inner-bean.xml&quot;</span>);</span><br><span class="line">    <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;userServiceBean&quot;</span>, UserService.class);</span><br><span class="line">    userService.save();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>c. 执行测试程序</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UserService...</span><br><span class="line">正在保存用户数据...</span><br></pre></td></tr></table></figure>

<h3 id="2-3-3-注入简单类型"><a href="#2-3-3-注入简单类型" class="headerlink" title="2.3.3 注入简单类型"></a>2.3.3 注入简单类型</h3><p>我们之前在进行注入的时候，对象的属性是另一个对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//对象的属性是另一个对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserDao</span><span class="params">(UserDao userDao)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对象的属性是 <code>int</code> 类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//对象的属性是int类型</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>也是通过 <code>set</code> 注入的方式给该属性赋值，因为只要能够调用 <code>set</code> 方法就可以给属性赋值。</p>
<blockquote>
<p>编写程序给一个 User 对象的 age 属性赋值20</p>
</blockquote>
<p>a. 定义User类，提供 age 属性，提供 age 属性的 <code>setter</code> 方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>b. 编写 spring 配置文件：<code>spring-simple-type.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.muyoukule.Bean.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--如果像这种int类型的属性，我们称为简单类型，这种简单类型在注入的时候要使用value属性，不能使用ref--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;property name=&quot;age&quot; value=&quot;20&quot;/&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>20<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>c. 编写测试程序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSimpleType</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring-simple-type.xml&quot;</span>);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;userBean&quot;</span>, User.class);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>d. 运行测试程序</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">User&#123;age=20&#125;</span><br></pre></td></tr></table></figure>

<p>需要特别注意：如果给简单类型赋值，使用 <code>value</code> 属性或 <code>value</code> 标签。而不是 <code>ref</code> 。</p>
<blockquote>
<p>简单类型包括哪些呢？</p>
</blockquote>
<p>可以通过 Spring 的源码来分析一下：<code>BeanUtils</code> 类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeanUtils</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Check if the given type represents a &quot;simple&quot; property: a simple value</span></span><br><span class="line"><span class="comment">	 * type or an array of simple value types.</span></span><br><span class="line"><span class="comment">	 * &lt;p&gt;See &#123;<span class="doctag">@link</span> #isSimpleValueType(Class)&#125; for the definition of &lt;em&gt;simple</span></span><br><span class="line"><span class="comment">	 * value type&lt;/em&gt;.</span></span><br><span class="line"><span class="comment">	 * &lt;p&gt;Used to determine properties to check for a &quot;simple&quot; dependency-check.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> type the type to check</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> whether the given type represents a &quot;simple&quot; property</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@see</span> org.springframework.beans.factory.support.RootBeanDefinition#DEPENDENCY_CHECK_SIMPLE</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@see</span> org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#checkDependencies</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@see</span> #isSimpleValueType(Class)</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isSimpleProperty</span><span class="params">(Class&lt;?&gt; type)</span> &#123;</span><br><span class="line">		Assert.notNull(type, <span class="string">&quot;&#x27;type&#x27; must not be null&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> isSimpleValueType(type) || (type.isArray() &amp;&amp; isSimpleValueType(type.getComponentType()));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Check if the given type represents a &quot;simple&quot; value type: a primitive or</span></span><br><span class="line"><span class="comment">	 * primitive wrapper, an enum, a String or other CharSequence, a Number, a</span></span><br><span class="line"><span class="comment">	 * Date, a Temporal, a URI, a URL, a Locale, or a Class.</span></span><br><span class="line"><span class="comment">	 * &lt;p&gt;&#123;<span class="doctag">@code</span> Void&#125; and &#123;<span class="doctag">@code</span> void&#125; are not considered simple value types.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> type the type to check</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> whether the given type represents a &quot;simple&quot; value type</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@see</span> #isSimpleProperty(Class)</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isSimpleValueType</span><span class="params">(Class&lt;?&gt; type)</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> (Void.class != type &amp;&amp; <span class="keyword">void</span>.class != type &amp;&amp;</span><br><span class="line">				(ClassUtils.isPrimitiveOrWrapper(type) ||</span><br><span class="line">				Enum.class.isAssignableFrom(type) ||</span><br><span class="line">				CharSequence.class.isAssignableFrom(type) ||</span><br><span class="line">				Number.class.isAssignableFrom(type) ||</span><br><span class="line">				Date.class.isAssignableFrom(type) ||</span><br><span class="line">				Temporal.class.isAssignableFrom(type) ||</span><br><span class="line">				URI.class == type ||</span><br><span class="line">				URL.class == type ||</span><br><span class="line">				Locale.class == type ||</span><br><span class="line">				Class.class == type));</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>通过源码分析得知，简单类型包括:</strong></p>
<p>基本数据类型、基本数据类型对应的包装类、<code>String</code> 或其他的 <code>CharSequence</code> 子类、<code>Number</code> 子类、<code>Date</code> 子类、<code>Enum</code> 子类、<code>URI</code> 、<code>URL</code> 、<code>Temporal</code> 子类、<code>Locale</code> 、<code>Class</code> 、另外还包括以上简单值类型对应的数组类型。</p>
<blockquote>
<p>测试Data类型</p>
</blockquote>
<p>a. 编写类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleValueType</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>b. 编写配置文件：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;svt&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.muyoukule.Bean.SimpleValueType&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--报错了，说1970-10-11这个字符串无法转换成java.util.Date类型。--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;property name=&quot;birth&quot; value=&quot;1970-10-11&quot;/&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--如果你硬要把Date当做简单类型的话，使用value赋值的话，这个日期字符串格式有要求--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--在实际开发中，我们一般不会把Date当做简单类型，虽然它是简单类型。一般会采用ref给Date类型的属性赋值。--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;birth&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Wed Oct 19 16:28:13 CST 2022&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>c. 编写测试类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSimpleTypeSet</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;date.xml&quot;</span>);</span><br><span class="line">    <span class="type">SimpleValueType</span> <span class="variable">svt</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;svt&quot;</span>, SimpleValueType.class);</span><br><span class="line">    System.out.println(svt);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>d. 运行测试程序：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SimpleValueType(birth=Thu Oct 20 06:28:13 CST 2022)</span><br></pre></td></tr></table></figure>

<p><strong>需要注意的是：</strong></p>
<ul>
<li>如果把 <code>Date</code> 当做简单类型的话，日期字符串格式不能随便写。格式必须符合 <code>Date</code> 的 <code>toString()</code> 方法格式。显然这就比较鸡肋了。如果我们提供一个这样的日期字符串：2010-10-11，在这里是无法赋值给 <code>Date</code> 类型的属性的。</li>
<li>spring6之后，当注入的是 URL，那么这个 url 字符串是会进行有效性检测的。如果是一个存在的 url ，那就没问题。如果不存在则报错。</li>
<li>对于引用数据类型使用的是 <code>&lt;property name=&quot;&quot; ref=&quot;&quot;/&gt;</code></li>
<li>对于简单数据类型使用的是 <code>&lt;property name=&quot;&quot; value=&quot;&quot;/&gt;</code></li>
</ul>
<h3 id="2-3-4-级联属性赋值（了解）"><a href="#2-3-4-级联属性赋值（了解）" class="headerlink" title="2.3.4 级联属性赋值（了解）"></a>2.3.4 级联属性赋值（了解）</h3><p>a. 创建如下类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Clazz</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Clazz clazz;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>b. 编写配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;clazzBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.muyoukule.Bean.Clazz&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.muyoukule.Bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--要点1：以下两行配置的顺序不能颠倒--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazz&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;clazzBean&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--要点2：clazz属性必须有getter方法--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazz.name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;高三一班&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>c. 编写测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCascade</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring-cascade.xml&quot;</span>);</span><br><span class="line">    <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;student&quot;</span>, Student.class);</span><br><span class="line">    System.out.println(student);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>d. 运行测试程序</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Student(name=张三, clazz=Clazz(name=高三一班))</span><br></pre></td></tr></table></figure>

<p><strong>要点：</strong></p>
<ul>
<li>在 spring 配置文件中，注意顺序，配置的顺序不能颠倒。</li>
<li>在 spring 配置文件中，<code>clazz</code> 属性必须提供 <code>getter</code> 方法。</li>
</ul>
<h3 id="2-3-5-注入数组"><a href="#2-3-5-注入数组" class="headerlink" title="2.3.5 注入数组"></a>2.3.5 注入数组</h3><blockquote>
<p>数组中的元素是简单类型</p>
</blockquote>
<p>a. 编写Person类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String[] favoriteFoods;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>b. <code>spring-array-simple.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;person&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zxq.bean.Person&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;favoriteFoods&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>鸡排<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>汉堡<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>鹅肝<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>c. 编写测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testArraySimple</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring-array-simple.xml&quot;</span>);</span><br><span class="line">    <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;person&quot;</span>, Person.class);</span><br><span class="line">    System.out.println(person);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>d. 运行测试程序</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Person(favoriteFoods=[鸡排, 汉堡, 鹅肝])</span><br></pre></td></tr></table></figure>

<blockquote>
<p>数组中的元素是非简单类型</p>
</blockquote>
<p>a. 创建如下类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Goods</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Order</span> &#123;</span><br><span class="line">    <span class="comment">// 一个订单中有多个商品</span></span><br><span class="line">    <span class="keyword">private</span> Goods[] goods;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>b. <code>spring-array.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;goods1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.muyoukule.Bean.Goods&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;西瓜&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;goods2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.muyoukule.Bean.Goods&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;苹果&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;order&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.muyoukule.Bean.Order&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;goods&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--这里使用ref标签即可--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;goods1&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;goods2&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>c. 编写测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testArray</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring-array.xml&quot;</span>);</span><br><span class="line">    <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;order&quot;</span>, Order.class);</span><br><span class="line">    System.out.println(order);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>d. 运行测试程序</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Order(goods=[Goods(name=西瓜), Goods(name=苹果)])</span><br></pre></td></tr></table></figure>

<p><strong>要点：</strong></p>
<ul>
<li>如果数组中是简单类型，使用 <code>value</code> 标签。</li>
<li>如果数组中是非简单类型，使用 <code>ref</code> 标签。</li>
</ul>
<h3 id="2-3-6-注入-List-集合、Set-集合、Map-集合、Properties"><a href="#2-3-6-注入-List-集合、Set-集合、Map-集合、Properties" class="headerlink" title="2.3.6 注入 List 集合、Set 集合、Map 集合、Properties"></a>2.3.6 注入 List 集合、Set 集合、Map 集合、Properties</h3><p> List 集合：有序可重复； Set 集合：无序不可重复。</p>
<p> <code>java.util.Properties</code> 继承 <code>java.util.Hashtable</code> ，所以 <code>Properties</code> 也是一个 Map 集合。</p>
<p>a. 创建如下类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">People</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; names;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; phones;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;Integer, String&gt; addrs;</span><br><span class="line">    <span class="keyword">private</span> Properties properties;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>b. <code>spring-collection.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;peopleBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.muyoukule.Bean.People&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;names&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>铁锤<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>狼<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;phones&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--非简单类型可以使用ref，简单类型使用value--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>110<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>110<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>120<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>120<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>119<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>119<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;addrs&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--如果key不是简单类型，使用 key-ref 属性--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--如果value不是简单类型，使用 value-ref 属性--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;北京大兴区&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;2&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上海浦东区&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;3&quot;</span> <span class="attr">value</span>=<span class="string">&quot;深圳宝安区&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;properties&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;driver&quot;</span>&gt;</span>com.mysql.cj.jdbc.Driver<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;url&quot;</span>&gt;</span>jdbc:mysql://localhost:3306/spring<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;username&quot;</span>&gt;</span>root<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;password&quot;</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>c. 编写测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCollection</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring-collection.xml&quot;</span>);</span><br><span class="line">    <span class="type">People</span> <span class="variable">peopleBean</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;peopleBean&quot;</span>, People.class);</span><br><span class="line">    System.out.println(peopleBean);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>d. 运行测试程序</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">People(names=[铁锤, 张三, 张三, 张三, 狼], phones=[110, 120, 119], addrs=&#123;1=北京大兴区, 2=上海浦东区, 3=深圳宝安区&#125;, properties=&#123;password=123456, driver=com.mysql.cj.jdbc.Driver, url=jdbc:mysql://localhost:3306/spring, username=root&#125;)</span><br></pre></td></tr></table></figure>

<p>注入 List  、Set 集合：</p>
<ul>
<li>使用 <list> 、<set> 标签</set></list></li>
<li>集合中元素是简单类型的使用 <code>value</code> 标签，反之使用 <code>ref</code> 标签。</li>
</ul>
<p>注入 Map 集合：</p>
<ul>
<li>使用 <map> 标签</map></li>
<li>如果 key 是简单类型，使用 key 属性，反之使用 <code>key-ref</code> 属性。</li>
<li>如果 value 是简单类型，使用 value 属性，反之使用 <code>value-ref</code> 属性。</li>
</ul>
<p>注入 Properties：</p>
<ul>
<li>使用 <code>props</code> 标签嵌套 <code>prop</code> 标签完成。</li>
</ul>
<h3 id="2-3-7-注入null和空字符串"><a href="#2-3-7-注入null和空字符串" class="headerlink" title="2.3.7 注入null和空字符串"></a>2.3.7 注入null和空字符串</h3><blockquote>
<p>注入空字符串使用：<value> 或者 value&#x3D;””</value></p>
</blockquote>
<p>a. 创建如下类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Vip</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>b. <code>spring-null.xml</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;bean id=<span class="string">&quot;vipBean&quot;</span> class=<span class="string">&quot;com.muyoukule.Bean.Vip&quot;</span>&gt;</span><br><span class="line">    &lt;!--空串的第一种方式--&gt;</span><br><span class="line">&lt;!--    &lt;property name=<span class="string">&quot;email&quot;</span> value=<span class="string">&quot;&quot;</span>/&gt;--&gt;</span><br><span class="line">    &lt;!--空串的第二种方式--&gt;</span><br><span class="line">    &lt;property name=<span class="string">&quot;email&quot;</span>&gt;</span><br><span class="line">        &lt;value/&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>

<p>c. 编写测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testNull</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring-null.xml&quot;</span>);</span><br><span class="line">    <span class="type">Vip</span> <span class="variable">vipBean</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;vipBean&quot;</span>, Vip.class);</span><br><span class="line">    System.out.println(vipBean);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>d. 运行测试程序</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Vip(email=)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注入null使用：<null> 或者 不为该属性赋值</null></p>
</blockquote>
<p>a. 修改 <code>spring-null.xml</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!--第一种方式：不给属性赋值--&gt;</span><br><span class="line">&lt;!--&lt;bean id=<span class="string">&quot;vipBean&quot;</span> class=<span class="string">&quot;com.zxq.Bean.Vip&quot;</span>/&gt;--&gt;</span><br><span class="line">&lt;!--第二种方式：使用&lt;<span class="literal">null</span>/&gt;--&gt;</span><br><span class="line">&lt;bean id=<span class="string">&quot;vipBean&quot;</span> class=<span class="string">&quot;com.muyoukule.Bean.Vip&quot;</span>&gt;</span><br><span class="line">    &lt;property name=<span class="string">&quot;email&quot;</span>&gt;</span><br><span class="line">        &lt;<span class="literal">null</span>/&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>

<p>b. 运行测试类</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Vip(email=null)</span><br></pre></td></tr></table></figure>

<h3 id="2-3-8-注入的值中含有特殊符号"><a href="#2-3-8-注入的值中含有特殊符号" class="headerlink" title="2.3.8 注入的值中含有特殊符号"></a>2.3.8 注入的值中含有特殊符号</h3><p>XML中有5个特殊字符，分别是：&lt; 、&gt; 、’ 、” 、&amp;</p>
<p>以上5个特殊符号在 XML 中会被特殊对待，会被当做 XML 语法的一部分进行解析，如果这些特殊符号直接出现在注入的字符串当中，会报错。</p>
<p>解决方案包括两种：</p>
<ul>
<li>第一种：特殊符号使用转义字符代替。</li>
<li>第二种：将含有特殊符号的字符串放到：&lt;![CDATA[]]&gt; 当中。因为放在CDATA区中的数据不会被XML文件解析器解析。</li>
</ul>
<p>5个特殊字符对应的转义字符分别是：</p>
<table>
<thead>
<tr>
<th align="center"><strong>特殊字符</strong></th>
<th align="center"><strong>转义字符</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center">&gt;</td>
<td align="center">&amp;gt;</td>
</tr>
<tr>
<td align="center">&lt;</td>
<td align="center">&amp;lt;</td>
</tr>
<tr>
<td align="center">‘</td>
<td align="center">&amp;apos;</td>
</tr>
<tr>
<td align="center">“</td>
<td align="center">&amp;quot;</td>
</tr>
<tr>
<td align="center">&amp;</td>
<td align="center">&amp;amp;</td>
</tr>
</tbody></table>
<p>a. 创建如下类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Math</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>b. <code>spring-special.xml</code></p>
<blockquote>
<p>使用转义字符代替方式</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;mathBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.muyoukule.Bean.Math&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;result&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2 <span class="symbol">&amp;lt;</span> 3&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>使用CDATA方式</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;mathBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.muyoukule.Bean.Math&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;result&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--只能使用value标签--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>&lt;![CDATA[2 &lt; 3]]&gt;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>c. 编写测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSpecial</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//这里注意导入 Math 包的时候不要导成 java.lang.Math 了</span></span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring-special.xml&quot;</span>);</span><br><span class="line">    <span class="type">Math</span> <span class="variable">mathBean</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;mathBean&quot;</span>, Math.class);</span><br><span class="line">    System.out.println(mathBean);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>d. 运行测试类</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Math(result=2 &lt; 3)</span><br></pre></td></tr></table></figure>

<p>使用 CDATA 时，不能使用 <code>value</code> 属性，只能使用 <code>value</code> 标签。</p>
<h2 id="2-4-p命名空间注入"><a href="#2-4-p命名空间注入" class="headerlink" title="2.4 p命名空间注入"></a>2.4 p命名空间注入</h2><p>目的：简化配置。</p>
<p>p命名空间实际上是对 <code>set</code> 注入的简化。</p>
<p>使用p命名空间注入的前提条件包括两个：</p>
<ul>
<li>在XML头部信息中添加p命名空间的配置信息：xmlns:p&#x3D;”<a href="http://www.springframework.org/schema/p">http://www.springframework.org/schema/p</a>“</li>
<li>p命名空间注入是基于 setter 方法的，所以需要对应的属性提供setter方法。</li>
</ul>
<p>新建spting_003模块</p>
<p>a. 创建如下类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Customer</span> &#123;</span><br><span class="line">    <span class="comment">//p命名空间注入是基于setter方法的，所以需要对应的属性提供setter方法</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>b. <code>spring-p.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;customerBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.muyoukule.Bean.Customer&quot;</span> <span class="attr">p:name</span>=<span class="string">&quot;zhangsan&quot;</span> <span class="attr">p:age</span>=<span class="string">&quot;20&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>c. 编写测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testP</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring-p.xml&quot;</span>);</span><br><span class="line">    <span class="type">Customer</span> <span class="variable">customerBean</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;customerBean&quot;</span>, Customer.class);</span><br><span class="line">    System.out.println(customerBean);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>d. 运行测试类</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Customer(name=zhangsan, age=20)</span><br></pre></td></tr></table></figure>

<p>把 <code>setter</code> 方法去掉（注释掉 <code>@Setter</code> ）：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/accidence-spring/%E6%8A%8Asetter%E6%96%B9%E6%B3%95%E5%8E%BB%E6%8E%89.png"></p>
<h2 id="2-5-c命名空间注入"><a href="#2-5-c命名空间注入" class="headerlink" title="2.5 c命名空间注入"></a>2.5 c命名空间注入</h2><p>目的：简化配置。</p>
<p>c命名空间是简化构造方法注入的。</p>
<p>使用c命名空间的两个前提条件：</p>
<ul>
<li><p>需要在xml配置文件头部添加信息：xmlns:c&#x3D;”<a href="http://www.springframework.org/schema/c">http://www.springframework.org/schema/c</a>“</p>
</li>
<li><p>需要提供构造方法。</p>
</li>
</ul>
<p>a. 创建如下类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTime</span> &#123;</span><br><span class="line">    <span class="comment">//需要提供构造方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> year;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> month;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> day;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>b. <code>spring-c.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:c</span>=<span class="string">&quot;http://www.springframework.org/schema/c&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--&lt;bean id=&quot;myTimeBean&quot; class=&quot;com.muyoukule.Bean.MyTime&quot; c:year=&quot;1970&quot; c:month=&quot;1&quot; c:day=&quot;5&quot;/&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myTimeBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.muyoukule.Bean.MyTime&quot;</span> <span class="attr">c:_0</span>=<span class="string">&quot;2008&quot;</span> <span class="attr">c:_1</span>=<span class="string">&quot;8&quot;</span> <span class="attr">c:_2</span>=<span class="string">&quot;8&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>c. 编写测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testC</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring-c.xml&quot;</span>);</span><br><span class="line">    <span class="type">MyTime</span> <span class="variable">myTimeBean</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;myTimeBean&quot;</span>, MyTime.class);</span><br><span class="line">    System.out.println(myTimeBean);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>d. 运行测试类</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MyTime(year=2008, month=8, day=8)</span><br></pre></td></tr></table></figure>

<p>把构造方法注释掉（注释掉 <code>@AllArgsConstructor</code> ）：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/accidence-spring/%E6%B3%A8%E9%87%8A%E6%8E%89@AllArgsConstructor%20.png"></p>
<p><strong>注意：不管是p命名空间还是c命名空间，注入的时候都可以注入简单类型以及非简单类型。</strong></p>
<h2 id="2-6-util命名空间"><a href="#2-6-util命名空间" class="headerlink" title="2.6 util命名空间"></a>2.6 util命名空间</h2><p>使用 util 命名空间可以让配置复用。</p>
<p>使用 util 命名空间的前提是：在spring配置文件头部添加配置信息。如下：</p>
<ul>
<li><p>xmlns:util&#x3D;”<a href="http://www.springframework.org/schema/util">http://www.springframework.org/schema/util</a>“</p>
</li>
<li><p><a href="http://www.springframework.org/schema/util">http://www.springframework.org/schema/util</a> <a href="http://www.springframework.org/schema/util/spring-util.xsd">http://www.springframework.org/schema/util/spring-util.xsd</a></p>
</li>
</ul>
<p>a. 创建如下类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyDataSource1</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Properties properties;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyDataSource2</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Properties properties;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>b. <code>spring-util.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:util</span>=<span class="string">&quot;http://www.springframework.org/schema/util&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">util:properties</span> <span class="attr">id</span>=<span class="string">&quot;prop&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;driver&quot;</span>&gt;</span>com.mysql.cj.jdbc.Driver<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;url&quot;</span>&gt;</span>jdbc:mysql://localhost:3306/spring<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;username&quot;</span>&gt;</span>root<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;password&quot;</span>&gt;</span>root<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">util:properties</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.muyoukule.Bean.MyDataSource1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;properties&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;prop&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.muyoukule.Bean.MyDataSource2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;properties&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;prop&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>c. 编写测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUtil</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring-util.xml&quot;</span>);</span><br><span class="line">    <span class="type">MyDataSource1</span> <span class="variable">dataSource1</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;dataSource1&quot;</span>, MyDataSource1.class);</span><br><span class="line">    System.out.println(dataSource1);</span><br><span class="line">    <span class="type">MyDataSource2</span> <span class="variable">dataSource2</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;dataSource2&quot;</span>, MyDataSource2.class);</span><br><span class="line">    System.out.println(dataSource2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>d. 运行测试类</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MyDataSource1(properties=&#123;password=root, driver=com.mysql.cj.jdbc.Driver, url=jdbc:mysql://localhost:3306/spring, username=root&#125;)</span><br><span class="line">MyDataSource2(properties=&#123;password=root, driver=com.mysql.cj.jdbc.Driver, url=jdbc:mysql://localhost:3306/spring, username=root&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="2-7-基于XML的自动装配"><a href="#2-7-基于XML的自动装配" class="headerlink" title="2.7 基于XML的自动装配"></a>2.7 基于XML的自动装配</h2><p>Spring还可以完成自动化的注入，自动化注入又被称为自动装配。它可以根据名字进行自动装配，也可以根据类型进行自动装配。</p>
<h3 id="2-7-1-根据名称自动装配"><a href="#2-7-1-根据名称自动装配" class="headerlink" title="2.7.1 根据名称自动装配"></a>2.7.1 根据名称自动装配</h3><p>a. 创建如下类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在保存用户数据...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> UserDao aaa;</span><br><span class="line">    <span class="comment">// 这个set方法非常关键</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAaa</span><span class="params">(UserDao aaa)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.aaa = aaa;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;UserService...&quot;</span>);</span><br><span class="line">        aaa.insert();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>b. <code>spring-autowire.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--byName表示根据名字自动装配--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.muyoukule.Service.UserService&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;aaa&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.muyoukule.Dao.UserDao&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>这个配置起到关键作用：</p>
<ul>
<li>UserService Bean中需要添加 <code>autowire=&quot;byName&quot;</code>，表示通过名称进行装配。</li>
<li>UserService 类中有一个 UserDao 属性，而UserDao属性的名字是aaa，对应的 set 方法是 <code>setAaa()</code> ，正好和 UserDao Bean 的 id 是一样的。这就是根据名称自动装配。</li>
</ul>
<p>c. 编写测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAutowireByName</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring-autowire.xml&quot;</span>);</span><br><span class="line">    <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;userService&quot;</span>, UserService.class);</span><br><span class="line">    userService.save();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>d. 运行测试类</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UserService...</span><br><span class="line">正在保存用户数据...</span><br></pre></td></tr></table></figure>

<p>测试一下，<code>byName</code> 装配是和属性名有关还是和set方法名有关系：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> UserDao aaa;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// set方法名变化了</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDao</span><span class="params">(UserDao aaa)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.aaa = aaa;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再执行测试程序</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/accidence-spring/aaa%E5%B1%9E%E6%80%A7%E8%B5%8B%E5%80%BC%E5%A4%B1%E8%B4%A5.png"></p>
<p>通过测试得知，aaa 属性并没有赋值成功。也就是并没有装配成功。</p>
<p>将 spring 配置文件修改以下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--这个id修改了--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.muyoukule.Dao.UserDao&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>执行测试程序</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UserService...</span><br><span class="line">正在保存用户数据...</span><br></pre></td></tr></table></figure>

<p>这说明，如果根据名称装配(<code>byName</code>)，底层会调用 set 方法进行注入。</p>
<p>例如：<code>setAge()</code> 对应的名字是 age，<code>setPassword()</code> 对应的名字是 password，<code>setEmail()</code> 对应的名字是 email。</p>
<h3 id="2-7-2-根据类型自动装配"><a href="#2-7-2-根据类型自动装配" class="headerlink" title="2.7.2 根据类型自动装配"></a>2.7.2 根据类型自动装配</h3><p>a. 创建如下类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在保存账户信息...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAccountDao</span><span class="params">(AccountDao accountDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.accountDao = accountDao;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;AccountService...&quot;</span>);</span><br><span class="line">        accountDao.insert();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>b. <code>spring-autowire.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--byType表示根据类型自动装配--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.muyoukule.Service.AccountService&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.muyoukule.Dao.AccountDao&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>c. 编写测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAutowireByType</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring-autowire.xml&quot;</span>);</span><br><span class="line">    <span class="type">AccountService</span> <span class="variable">accountService</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;accountService&quot;</span>, AccountService.class);</span><br><span class="line">    accountService.save();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>d. 运行测试类</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AccountService...</span><br><span class="line">正在保存账户信息...</span><br></pre></td></tr></table></figure>

<p>把 <code>AccountService</code> 中的 <code>set</code> 方法注释掉，再执行：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/accidence-spring/%E6%8A%8AAccountService%E4%B8%AD%E7%9A%84set%E6%96%B9%E6%B3%95%E6%B3%A8%E9%87%8A%E6%8E%89.png"></p>
<p>可以看到无论是 <code>byName</code> 还是 <code>byType</code> ，在装配的时候都是基于 <code>set</code> 方法的。所以 <code>set</code> 方法是必须要提供的。提供构造方法是不行的。</p>
<blockquote>
<p>如果 <code>byType</code>，根据类型装配时，如果配置文件中有两个类型一样的 <code>bean</code> 会出现什么问题呢？</p>
</blockquote>
<p>修改<code>spring-autowire.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--byType表示根据类型自动装配--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.muyoukule.Service.AccountService&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;x&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.muyoukule.Dao.AccountDao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;y&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.muyoukule.Dao.AccountDao&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>显然当我们再配置文件中有两个类型一样的 <code>bean</code> 是idea也会进行提示：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/accidence-spring/%E6%8F%90%E7%A4%BA%E6%9C%89%E4%B8%A4%E4%B8%AA%E7%B1%BB%E5%9E%8B%E4%B8%80%E6%A0%B7%E7%9A%84%20bean.png"></p>
<p>执行测试程序</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/accidence-spring/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%B8%AD%E6%9F%90%E7%A7%8D%E7%B1%BB%E5%9E%8B%E7%9A%84Bean%E4%B8%8D%E5%94%AF%E4%B8%80.png"></p>
<p>测试结果说明了，当 <code>byType</code> 进行自动装配的时候，配置文件中某种类型的 Bean 必须是唯一的，不能出现多个。</p>
<h2 id="2-8-Spring引入外部属性配置文件"><a href="#2-8-Spring引入外部属性配置文件" class="headerlink" title="2.8 Spring引入外部属性配置文件"></a>2.8 Spring引入外部属性配置文件</h2><p>我们都知道编写数据源的时候是需要连接数据库的信息的，例如：driver、url、username、password等信息。这些信息可以单独写到一个属性配置文件中。</p>
<p>新建spting_004模块</p>
<p>a. 创建如下类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyDataSource</span> <span class="keyword">implements</span> <span class="title class_">DataSource</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>b. 在类路径下新建 <code>jdbc.properties</code> 文件，并配置信息</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/spring</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure>

<p>c. 在 spring 配置文件中引入 <code>context</code> 命名空间，使用 <code>jdbc.properties</code> 文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.muyoukule.Bean.MyDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>d. 测试程序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testProperties</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring-properties.xml&quot;</span>);</span><br><span class="line">    <span class="type">MyDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;dataSource&quot;</span>, MyDataSource.class);</span><br><span class="line">    System.out.println(dataSource);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>d. 运行测试类</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MyDataSource(driver=com.mysql.cj.jdbc.Driver, url=jdbc:mysql://localhost:3306/spring, username=权, password=root)</span><br></pre></td></tr></table></figure>

<p>至此，读取 <code>properties</code> 配置文件中的内容就已经完成，但是在使用的时候，有些注意事项：</p>
<blockquote>
<p>键值对的key为 <code>username</code> 引发的问题</p>
</blockquote>
<p>在properties中配置键值对的时候，如果key设置为<code>username</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username=root</span><br></pre></td></tr></table></figure>

<p>在 <code>spring-properties.xml</code> 注入该属性</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.muyoukule.Bean.MyDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>运行后，在控制台打印的却不是<code>root</code>，而是自己电脑的用户名。</p>
<p>出现问题的原因是 <code>&lt;context:property-placeholder/&gt;</code> 标签会加载系统的环境变量，而且环境变量的值会被优先加载，可以通过以下代码查看系统的环境变量：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    Map&lt;String, String&gt; env = System.getenv();</span><br><span class="line">    System.out.println(env);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>大家可以自行运行，在打印出来的结果中会有一个USERNAME&#x3D;XXX[自己电脑的用户名称]</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/accidence-spring/%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F.png"></p>
<p>两个解决方案：</p>
<ul>
<li>为 xml 文件的 <code>&lt;context:property-placeholder/&gt;</code> 标签添加 <code>system-properties-mode:</code> 属性并且设置为 NEVER ，表示不加载系统属性。</li>
<li>避免使用 <code>username</code> 作为属性的 <code>key</code> 。</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;jdbc.properties&quot;</span> <span class="attr">system-properties-mode</span>=<span class="string">&quot;NEVER&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>再次运行测试类</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MyDataSource(driver=com.mysql.cj.jdbc.Driver, url=jdbc:mysql://localhost:3306/spring, username=root, password=root)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>当有多个properties配置文件需要被加载，该如何配置?</p>
</blockquote>
<p>a. 调整下配置文件的内容，在resources下添加 <code>jdbc.properties</code> ，<code>jdbc2.properties</code> ，内容如下:</p>
<p><code>jdbc.properties</code></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/spring</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure>

<p><code>jdbc2.properties</code></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">username</span>=<span class="string">root666</span></span><br></pre></td></tr></table></figure>

<p>b. 修改 <code>spring-properties.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--方式一 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;jdbc.properties,jdbc2.properties&quot;</span> <span class="attr">system-properties-mode</span>=<span class="string">&quot;NEVER&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--方式二--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;*.properties&quot;</span> <span class="attr">system-properties-mode</span>=<span class="string">&quot;NEVER&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--方式三 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:*.properties&quot;</span> <span class="attr">system-properties-mode</span>=<span class="string">&quot;NEVER&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--方式四--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath*:*.properties&quot;</span> <span class="attr">system-properties-mode</span>=<span class="string">&quot;NEVER&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>说明:</strong></p>
<ul>
<li>方式一：可以实现，如果配置文件多的话，每个都需要配置</li>
<li>方式二：<code>*.properties</code> 代表所有以 properties 结尾的文件都会被加载，可以解决方式一的问题，但是不标准</li>
<li>方式三：标准的写法，<code>classpath: </code>代表的是从根路径下开始查找，但是只能查询当前项目的根路径</li>
<li>方式四：不仅可以加载当前项目还可以加载当前项目所依赖的所有项目的根路径下的 properties 配置文件</li>
</ul>
<h1 id="3-Bean的作用域"><a href="#3-Bean的作用域" class="headerlink" title="3. Bean的作用域"></a>3. Bean的作用域</h1><h2 id="3-1-singleton"><a href="#3-1-singleton" class="headerlink" title="3.1 singleton"></a>3.1 singleton</h2><blockquote>
<p>默认情况下，Spring 的 IoC 容器创建的 Bean 对象是单例的。</p>
</blockquote>
<p>a. 创建如下类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringBean</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>b. <code>spring-scope.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sb&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.muyoukule.Bean.SpringBean&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>c. 测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testScope</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring-scope.xml&quot;</span>);</span><br><span class="line">    <span class="type">SpringBean</span> <span class="variable">sb1</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;sb&quot;</span>, SpringBean.class);</span><br><span class="line">    System.out.println(sb1);</span><br><span class="line">    <span class="type">SpringBean</span> <span class="variable">sb2</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;sb&quot;</span>, SpringBean.class);</span><br><span class="line">    System.out.println(sb2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>d. 运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">com.muyoukule.Bean.SpringBean@5d066c7d</span><br><span class="line">com.muyoukule.Bean.SpringBean@5d066c7d</span><br></pre></td></tr></table></figure>

<p>通过测试得知：Spring的IoC容器中，默认情况下，Bean对象是单例的。</p>
<blockquote>
<p>这个对象在什么时候创建的呢？</p>
</blockquote>
<p>a. 为 <code>SpringBean</code> 提供一个无参数构造方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringBean</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SpringBean</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;SpringBean的无参数构造方法执行...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>b. 将测试程序中 <code>getBean()</code> 所在行代码注释掉，测试程序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testScope</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring-scope.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*        SpringBean sb1 = applicationContext.getBean(&quot;sb&quot;, SpringBean.class);</span></span><br><span class="line"><span class="comment">    System.out.println(sb1);</span></span><br><span class="line"><span class="comment">    SpringBean sb2 = applicationContext.getBean(&quot;sb&quot;, SpringBean.class);</span></span><br><span class="line"><span class="comment">    System.out.println(sb2);*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>c. 结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SpringBean的无参数构造方法执行...</span><br></pre></td></tr></table></figure>

<p>通过测试得知，默认情况下，Bean对象的创建是在初始化Spring上下文的时候就完成的。</p>
<h2 id="3-2-prototype"><a href="#3-2-prototype" class="headerlink" title="3.2 prototype"></a>3.2 prototype</h2><p>如果想让Spring的Bean对象以多例的形式存在，可以在 <code>bean</code> 标签中指定 <code>scope</code> 属性的值为：<strong>prototype</strong>，这样 Spring 会在每一次执行 <code>getBean()</code> 方法的时候创建Bean对象，调用几次则创建几次。</p>
<p>a. 修改 <code>spring-scope.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sb&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.muyoukule.Bean.SpringBean&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>b. 测试程序</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void testScope()&#123;</span><br><span class="line">    ApplicationContext applicationContext = new ClassPathXmlApplicationContext(&quot;spring-scope.xml&quot;);</span><br><span class="line"></span><br><span class="line">    SpringBean sb1 = applicationContext.getBean(&quot;sb&quot;, SpringBean.class);</span><br><span class="line">    System.out.println(sb1);</span><br><span class="line">    SpringBean sb2 = applicationContext.getBean(&quot;sb&quot;, SpringBean.class);</span><br><span class="line">    System.out.println(sb2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>c. 结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SpringBean的无参数构造方法执行...</span><br><span class="line">com.muyoukule.Bean.SpringBean@3adcc812</span><br><span class="line">SpringBean的无参数构造方法执行...</span><br><span class="line">com.muyoukule.Bean.SpringBean@35432107</span><br></pre></td></tr></table></figure>

<p>把测试代码中的 <code>getBean()</code> 方法所在行代码注释掉，执行测试，结果控制台无任何信息。</p>
<p><strong>默认情况下，Spring创建的 bean 对象都是单例的</strong></p>
<p>介绍完 <code>scope</code> 属性以后，我们来思考几个问题:</p>
<ul>
<li>为什么 bean 默认为单例?<ul>
<li>bean 为单例的意思是在 Spring 的 IOC 容器中只会有该类的一个对象</li>
<li>bean 对象只有一个就避免了对象的频繁创建与销毁，达到了 bean 对象的复用，性能高</li>
</ul>
</li>
<li>bean 在容器中是单例的，会不会产生线程安全问题?<ul>
<li>如果对象是有状态对象，即该对象有成员变量可以用来存储数据的，</li>
<li>因为所有请求线程共用一个 bean 对象，所以会存在线程安全问题。</li>
<li>如果对象是无状态对象，即该对象没有成员变量没有进行数据存储的，</li>
<li>因方法中的局部变量在方法调用完成后会被销毁，所以不会存在线程安全问题。</li>
</ul>
</li>
<li>哪些 bean 对象适合交给容器进行管理?<ul>
<li>表现层对象</li>
<li>业务层对象</li>
<li>数据层对象</li>
<li>工具对象</li>
</ul>
</li>
<li>哪些 bean 对象不适合交给容器进行管理?<ul>
<li>封装实例的域对象，因为会引发线程安全问题，所以不适合。</li>
</ul>
</li>
</ul>
<h2 id="3-3-其它scope"><a href="#3-3-其它scope" class="headerlink" title="3.3 其它scope"></a>3.3 其它scope</h2><p><strong>scope属性的值不止两个，它一共包括8个选项：</strong></p>
<ul>
<li>singleton：默认的，单例。</li>
<li>prototype：原型。每调用一次 <code>getBean()</code> 方法则获取一个新的Bean对象。或每次注入的时候都是新对象。</li>
<li>request：一个请求对应一个 Bean 。<strong>仅限于在WEB应用中使用</strong>。</li>
<li>session：一个会话对应一个 Bean 。<strong>仅限于在WEB应用中使用</strong>。</li>
<li>global session：<strong>portlet应用中专用的</strong>。如果在 Servlet 的 WEB 应用中使用 <code>global session</code> 的话，和 <code>session </code>一个效果。（portlet和servlet都是规范。servlet运行在servlet容器中，例如Tomcat。portlet运行在portlet容器中。）</li>
<li>application：一个应用对应一个 Bean 。<strong>仅限于在WEB应用中使用。</strong></li>
<li>websocket：一个 websocket 生命周期对应一个 Bean 。<strong>仅限于在WEB应用中使用。</strong></li>
<li>自定义scope：很少使用。</li>
</ul>
<h1 id="4-GoF之工厂模式"><a href="#4-GoF之工厂模式" class="headerlink" title="4. GoF之工厂模式"></a>4. GoF之工厂模式</h1><ul>
<li><p>设计模式：一种可以被重复利用的解决方案。</p>
</li>
<li><p>GoF（Gang of Four），中文名——四人组。</p>
</li>
<li><p>《Design Patterns: Elements of Reusable Object-Oriented Software》（即《设计模式》一书），1995年由 Erich Gamma、Richard Helm、Ralph Johnson 和 John Vlissides 合著。这几位作者常被称为”四人组（Gang of Four）”。</p>
</li>
<li><p>该书中描述了23种设计模式。我们平常所说的设计模式就是指这23种设计模式。</p>
</li>
<li><p>不过除了GoF23种设计模式之外，还有其它的设计模式，比如：JavaEE的设计模式（DAO模式、MVC模式等）。</p>
</li>
<li><p>GoF23种设计模式可分为三大类：</p>
<ul>
<li><strong>创建型</strong>（5个）：解决对象创建问题。<ul>
<li>单例模式</li>
<li>工厂方法模式</li>
<li>抽象工厂模式</li>
<li>建造者模式</li>
<li>原型模式</li>
</ul>
</li>
<li><strong>结构型</strong>（7个）：一些类或对象组合在一起的经典结构。<ul>
<li>代理模式</li>
<li>装饰模式</li>
<li>适配器模式</li>
<li>组合模式</li>
<li>享元模式</li>
<li>外观模式</li>
<li>桥接模式</li>
</ul>
</li>
<li><strong>行为型</strong>（11个）：解决类或对象之间的交互问题。<ul>
<li>策略模式</li>
<li>模板方法模式</li>
<li>责任链模式</li>
<li>观察者模式</li>
<li>迭代子模式</li>
<li>命令模式</li>
<li>备忘录模式</li>
<li>状态模式</li>
<li>访问者模式</li>
<li>中介者模式</li>
<li>解释器模式</li>
</ul>
</li>
</ul>
</li>
<li><p>工厂模式是解决对象创建问题的，所以工厂模式属于创建型设计模式。这里为什么学习工厂模式呢？这是因为 Spring 框架底层使用了大量的工厂模式。</p>
</li>
</ul>
<h2 id="4-1-工厂模式的三种形态"><a href="#4-1-工厂模式的三种形态" class="headerlink" title="4.1 工厂模式的三种形态"></a>4.1 工厂模式的三种形态</h2><p>工厂模式通常有三种形态：</p>
<ul>
<li>第一种：<strong>简单工厂模式（Simple Factory）：不属于23种设计模式之一。简单工厂模式又叫做：静态 工厂方法模式。简单工厂模式是工厂方法模式的一种特殊实现。</strong></li>
<li>第二种：工厂方法模式（Factory Method）：是23种设计模式之一。</li>
<li>第三种：抽象工厂模式（Abstract Factory）：是23种设计模式之一。</li>
</ul>
<h2 id="4-2-简单工厂模式"><a href="#4-2-简单工厂模式" class="headerlink" title="4.2 简单工厂模式"></a>4.2 简单工厂模式</h2><p>简单工厂模式的角色包括三个：</p>
<ul>
<li>抽象产品 角色</li>
<li>具体产品 角色</li>
<li>工厂类 角色</li>
</ul>
<p>简单工厂模式的代码如下：</p>
<p>抽象产品角色：Weapon</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Weapon</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 所有的武器都有攻击行为</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">attack</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>具体产品角色：</p>
<p>Tank</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Tank</span> <span class="keyword">extends</span> <span class="title class_">Weapon</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attack</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;坦克开炮！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Fighter</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Fighter</span> <span class="keyword">extends</span> <span class="title class_">Weapon</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attack</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;战斗机投下原子弹！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Dagger</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dagger</span> <span class="keyword">extends</span> <span class="title class_">Weapon</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attack</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;砍他丫的！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>工厂类角色：</p>
<p>WeaponFactory</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WeaponFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Weapon <span class="title function_">get</span><span class="params">(String weaponType)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (weaponType == <span class="literal">null</span> || weaponType.trim().length() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Weapon</span> <span class="variable">weapon</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;TANK&quot;</span>.equals(weaponType)) &#123;</span><br><span class="line">            weapon = <span class="keyword">new</span> <span class="title class_">Tank</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;FIGHTER&quot;</span>.equals(weaponType)) &#123;</span><br><span class="line">            weapon = <span class="keyword">new</span> <span class="title class_">Fighter</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;DAGGER&quot;</span>.equals(weaponType)) &#123;</span><br><span class="line">            weapon = <span class="keyword">new</span> <span class="title class_">Dagger</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;不支持该武器！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> weapon;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试程序（客户端程序）：</p>
<p>Client</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Weapon</span> <span class="variable">weapon1</span> <span class="operator">=</span> WeaponFactory.get(<span class="string">&quot;TANK&quot;</span>);</span><br><span class="line">        weapon1.attack();</span><br><span class="line"></span><br><span class="line">        <span class="type">Weapon</span> <span class="variable">weapon2</span> <span class="operator">=</span> WeaponFactory.get(<span class="string">&quot;FIGHTER&quot;</span>);</span><br><span class="line">        weapon2.attack();</span><br><span class="line"></span><br><span class="line">        <span class="type">Weapon</span> <span class="variable">weapon3</span> <span class="operator">=</span> WeaponFactory.get(<span class="string">&quot;DAGGER&quot;</span>);</span><br><span class="line">        weapon3.attack();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">坦克开炮！</span><br><span class="line">战斗机投下原子弹！</span><br><span class="line">砍他丫的！</span><br></pre></td></tr></table></figure>

<p>简单工厂模式的优点：</p>
<ul>
<li>客户端程序不需要关心对象的创建细节，需要哪个对象时，只需要向工厂索要即可，初步实现了责任的分离。客户端只负责“消费”，工厂负责“生产”。生产和消费分离。</li>
</ul>
<p>简单工厂模式的缺点：</p>
<ul>
<li>缺点1：工厂类集中了所有产品的创造逻辑，形成一个无所不知的全能类，有人把它叫做上帝类。显然工厂类非常关键，不能出问题，一旦出问题，整个系统瘫痪。</li>
<li>缺点2：不符合OCP开闭原则，在进行系统扩展时，需要修改工厂类。</li>
</ul>
<p><strong>Spring中的BeanFactory就使用了简单工厂模式。</strong></p>
<h2 id="4-3-工厂方法模式"><a href="#4-3-工厂方法模式" class="headerlink" title="4.3 工厂方法模式"></a>4.3 工厂方法模式</h2><p>工厂方法模式既保留了简单工厂模式的优点，同时又解决了简单工厂模式的缺点。</p>
<p>工厂方法模式的角色包括：</p>
<ul>
<li><strong>抽象工厂角色</strong></li>
<li><strong>具体工厂角色</strong></li>
<li>抽象产品角色</li>
<li>具体产品角色</li>
</ul>
<p>代码如下：</p>
<p>抽象产品角色</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Weapon</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 所有武器都有攻击行为</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">attack</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>具体产品角色</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Gun</span> <span class="keyword">extends</span> <span class="title class_">Weapon</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attack</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;开枪射击！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Fighter extends Weapon &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void attack() &#123;</span><br><span class="line">        System.out.println(&quot;战斗机发射核弹！&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>抽象工厂角色</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">WeaponFactory</span> &#123;</span><br><span class="line">    Weapon <span class="title function_">get</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>具体工厂角色</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GunFactory</span> <span class="keyword">implements</span> <span class="title class_">WeaponFactory</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Weapon <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Gun</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FighterFactory</span> <span class="keyword">implements</span> <span class="title class_">WeaponFactory</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Weapon <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Fighter</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>客户端程序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">WeaponFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GunFactory</span>();</span><br><span class="line">        <span class="type">Weapon</span> <span class="variable">weapon</span> <span class="operator">=</span> factory.get();</span><br><span class="line">        weapon.attack();</span><br><span class="line"></span><br><span class="line">        <span class="type">WeaponFactory</span> <span class="variable">factory1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FighterFactory</span>();</span><br><span class="line">        <span class="type">Weapon</span> <span class="variable">weapon1</span> <span class="operator">=</span> factory1.get();</span><br><span class="line">        weapon1.attack();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行客户端程序</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">开枪射击！</span><br><span class="line">战斗机发射核弹</span><br></pre></td></tr></table></figure>

<p>如果想扩展一个新的产品，只要新增一个产品类，再新增一个该产品对应的工厂即可，例如新增：匕首。</p>
<p>增加：具体产品角色</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dagger</span> <span class="keyword">extends</span> <span class="title class_">Weapon</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attack</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;砍丫的！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>增加：具体工厂角色</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DaggerFactory</span> <span class="keyword">implements</span> <span class="title class_">WeaponFactory</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Weapon <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Dagger</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>客户端程序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">WeaponFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GunFactory</span>();</span><br><span class="line">        <span class="type">Weapon</span> <span class="variable">weapon</span> <span class="operator">=</span> factory.get();</span><br><span class="line">        weapon.attack();</span><br><span class="line"></span><br><span class="line">        <span class="type">WeaponFactory</span> <span class="variable">factory1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FighterFactory</span>();</span><br><span class="line">        <span class="type">Weapon</span> <span class="variable">weapon1</span> <span class="operator">=</span> factory1.get();</span><br><span class="line">        weapon1.attack();</span><br><span class="line"></span><br><span class="line">        <span class="type">WeaponFactory</span> <span class="variable">factory2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DaggerFactory</span>();</span><br><span class="line">        <span class="type">Weapon</span> <span class="variable">weapon2</span> <span class="operator">=</span> factory2.get();</span><br><span class="line">        weapon2.attack();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行结果如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">开枪射击！</span><br><span class="line">战斗机发射核弹！</span><br><span class="line">砍丫的！</span><br></pre></td></tr></table></figure>

<p>我们可以看到在进行功能扩展的时候，不需要修改之前的源代码，显然工厂方法模式符合OCP原则。</p>
<p>工厂方法模式的优点：</p>
<ul>
<li>一个调用者想创建一个对象，只要知道其名称就可以了。 </li>
<li>扩展性高，如果想增加一个产品，只要扩展一个工厂类就可以。</li>
<li>屏蔽产品的具体实现，调用者只关心产品的接口。</li>
</ul>
<p>工厂方法模式的缺点：</p>
<ul>
<li>每次增加一个产品时，都需要增加一个具体类和对象实现工厂，使得系统中类的个数成倍增加，在一定程度上增加了系统的复杂度，同时也增加了系统具体类的依赖。这并不是什么好事。</li>
</ul>
<h1 id="5-Bean的实例化方式"><a href="#5-Bean的实例化方式" class="headerlink" title="5. Bean的实例化方式"></a>5. Bean的实例化方式</h1><p>Spring为Bean提供了多种实例化方式，通常包括4种方式。（也就是说在 Spring 中为 Bean 对象的创建准备了多种方案，目的是：更加灵活）</p>
<ul>
<li>第一种：通过构造方法实例化</li>
<li>第二种：通过简单工厂模式实例化</li>
<li>第三种：通过 <code>factory-bean</code> 实例化</li>
<li>第四种：通过 <code>FactoryBean</code> 接口实例化</li>
</ul>
<h2 id="5-1-通过构造方法实例化"><a href="#5-1-通过构造方法实例化" class="headerlink" title="5.1 通过构造方法实例化"></a>5.1 通过构造方法实例化</h2><p>我们之前一直使用的就是这种方式。默认情况下，会调用 Bean 的无参数构造方法。</p>
<p>a. 创建如下类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;User类的无参数构造方法执行...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>b. <code>spring.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.muyoukule.Bean.User&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>c. 测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testConstructor</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring.xml&quot;</span>);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;userBean&quot;</span>, User.class);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>d. 结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">User类的无参数构造方法执行...</span><br><span class="line">com.muyoukule.Bean.User@5d066c7d</span><br></pre></td></tr></table></figure>

<h2 id="5-2-通过简单工厂模式实例化"><a href="#5-2-通过简单工厂模式实例化" class="headerlink" title="5.2 通过简单工厂模式实例化"></a>5.2 通过简单工厂模式实例化</h2><p>a. 创建如下类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Vip</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>b. 编写简单工厂模式当中的工厂类</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class VipFactory &#123;</span><br><span class="line">    public static Vip get() &#123;</span><br><span class="line">        return new Vip();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>c. 在 Spring 配置文件中指定创建该 Bean 的方法（使用 <code>factory-method</code> 属性指定）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;vipBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.muyoukule.Bean.VipFactory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;get&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>d. 编写测试程序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSimpleFactory</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring.xml&quot;</span>);</span><br><span class="line">    <span class="type">Vip</span> <span class="variable">vip</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;vipBean&quot;</span>, Vip.class);</span><br><span class="line">    System.out.println(vip);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>e. 执行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">com.muyoukule.Bean.Vip@54e7df6a</span><br></pre></td></tr></table></figure>

<h2 id="5-3-通过factory-bean实例化"><a href="#5-3-通过factory-bean实例化" class="headerlink" title="5.3 通过factory-bean实例化"></a>5.3 通过factory-bean实例化</h2><p>这种方式本质上是：通过工厂方法模式进行实例化。</p>
<p>a. 创建如下类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Order</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>b. 定义具体工厂类，工厂类中定义实例方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Order <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Order</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>c. 在 Spring 配置文件中指定 <code>factory-bean</code> 以及 <code>factory-method</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;orderFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.muyoukule.Bean.OrderFactory&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;orderBean&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;orderFactory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;get&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>d. 编写测试程序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelfFactoryBean</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring.xml&quot;</span>);</span><br><span class="line">    <span class="type">Order</span> <span class="variable">orderBean</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;orderBean&quot;</span>, Order.class);</span><br><span class="line">    System.out.println(orderBean);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>e. 执行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">com.muyoukule.Bean.Order@32c4e8b2</span><br></pre></td></tr></table></figure>

<h2 id="5-4-通过FactoryBean接口实例化"><a href="#5-4-通过FactoryBean接口实例化" class="headerlink" title="5.4 通过FactoryBean接口实例化"></a>5.4 通过FactoryBean接口实例化</h2><p>以上的第三种方式中，<code>factory-bean</code> 是我们自定义的，<code>factory-method</code> 也是我们自己定义的。</p>
<p>在Spring中，当你编写的类直接实现 <code>FactoryBean</code> 接口之后，<code>factory-bean</code> 不需要指定了，f<code>actory-method</code> 也不需要指定了。</p>
<p><code>factory-bean</code> 会自动指向实现 <code>FactoryBean</code> 接口的类，<code>factory-method</code> 会自动指向 <code>getObject()</code> 方法。</p>
<p>a. 创建如下类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>b. 编写一个类实现 <code>FactoryBean</code> 接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PersonFactoryBean</span> <span class="keyword">implements</span> <span class="title class_">FactoryBean</span>&lt;Person&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Person <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSingleton</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// true表示单例</span></span><br><span class="line">        <span class="comment">// false表示原型</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>c. 在 Spring 配置文件中配置 <code>FactoryBean</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;personBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.muyoukule.Bean.PersonFactoryBean&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>d. 测试程序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFactoryBean</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring.xml&quot;</span>);</span><br><span class="line">    <span class="type">Person</span> <span class="variable">personBean</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;personBean&quot;</span>, Person.class);</span><br><span class="line">    System.out.println(personBean);</span><br><span class="line">    <span class="type">Person</span> <span class="variable">personBean2</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;personBean&quot;</span>, Person.class);</span><br><span class="line">    System.out.println(personBean2);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>e. 执行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">com.muyoukule.Bean.Person@4f0100a7</span><br><span class="line">com.muyoukule.Bean.Person@4f0100a7</span><br></pre></td></tr></table></figure>

<h2 id="5-5-BeanFactory和FactoryBean的区别"><a href="#5-5-BeanFactory和FactoryBean的区别" class="headerlink" title="5.5 BeanFactory和FactoryBean的区别"></a>5.5 BeanFactory和FactoryBean的区别</h2><blockquote>
<p>BeanFactory</p>
</blockquote>
<p>Spring IoC 容器的顶级对象，<code>BeanFactory</code> 被翻译为 “Bean工厂” ，在 Spring 的 IoC 容器中，“Bean工厂” 负责创建 Bean 对象。</p>
<p>BeanFactory 是工厂。</p>
<blockquote>
<p>FactoryBean</p>
</blockquote>
<p>FactoryBean：它是一个 Bean，是一个能够<strong>辅助Spring</strong>实例化其它 Bean 对象的一个 Bean 。</p>
<p>在Spring中，Bean可以分为两类：</p>
<ul>
<li>第一类：普通Bean</li>
<li>第二类：工厂 Bean（记住：工厂 Bean 也是一种 Bean，只不过这种 Bean 比较特殊，它可以辅助 Spring 实例化其它 Bean 对象。）</li>
</ul>
<h2 id="5-6-注入自定义Date"><a href="#5-6-注入自定义Date" class="headerlink" title="5.6 注入自定义Date"></a>5.6 注入自定义Date</h2><p>我们前面说过，<code>java.util.Date</code> 在 Spring 中被当做简单类型，简单类型在注入的时候可以直接使用 value 属性或 value 标签来完成。但我们之前已经测试过了，对于Date类型来说，采用 value 属性或 value 标签赋值的时候，对日期字符串的格式要求非常严格，必须是这种格式的：Mon Oct 10 14:30:26 CST 2022。其他格式是不会被识别的。</p>
<p>a. 创建如下类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>b. <code>spring-data.xml</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;bean id=<span class="string">&quot;studentBean&quot;</span> class=<span class="string">&quot;com.muyoukule.Bean.Student&quot;</span>&gt;</span><br><span class="line">    &lt;property name=<span class="string">&quot;birth&quot;</span> value=<span class="string">&quot;Mon Oct 10 14:30:26 CST 2002&quot;</span>/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>

<p>c. 测试程序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDate</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring-data.xml&quot;</span>);</span><br><span class="line">    <span class="type">Student</span> <span class="variable">studentBean</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;studentBean&quot;</span>, Student.class);</span><br><span class="line">    System.out.println(studentBean);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>d. 执行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Student(birth=Fri Oct 11 04:30:26 CST 2002)</span><br></pre></td></tr></table></figure>

<p>如果把日期格式修改一下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;bean id=<span class="string">&quot;studentBean&quot;</span> class=<span class="string">&quot;com.muyoukule.Bean.Student&quot;</span>&gt;</span><br><span class="line">    &lt;property name=<span class="string">&quot;birth&quot;</span> value=<span class="string">&quot;2002-10-10&quot;</span>/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>

<p>执行结果</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/accidence-spring/%E6%97%A5%E6%9C%9F%E6%A0%BC%E5%BC%8F%E9%94%99%E8%AF%AF.png"></p>
<p>这种情况下，我们就可以使用 <code>FactoryBean</code> 来完成这个操作。</p>
<p>a. 编写 <code>DateFactoryBean</code> 实现 <code>FactoryBean</code> 接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DateFactoryBean</span> <span class="keyword">implements</span> <span class="title class_">FactoryBean</span>&lt;Date&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义属性接收日期字符串</span></span><br><span class="line">    <span class="keyword">private</span> String date;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过构造方法给日期字符串属性赋值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DateFactoryBean</span><span class="params">(String date)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.date = date;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Date <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> sdf.parse(<span class="built_in">this</span>.date);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>b. 编写spring配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dateBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.muyoukule.Bean.DateFactoryBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;date&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1999-10-11&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.muyoukule.Bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;birth&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dateBean&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>c. 执行测试程序</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Student(birth=Mon Oct 11 00:00:00 CST 1999)</span><br></pre></td></tr></table></figure>

<h1 id="6-Bean的生命周期"><a href="#6-Bean的生命周期" class="headerlink" title="6. Bean的生命周期"></a>6. Bean的生命周期</h1><h2 id="6-1-什么是Bean的生命周期"><a href="#6-1-什么是Bean的生命周期" class="headerlink" title="6.1 什么是Bean的生命周期"></a>6.1 什么是Bean的生命周期</h2><p>Spring其实就是一个管理Bean对象的工厂。它负责对象的创建，对象的销毁等。</p>
<p>所谓的生命周期就是：对象从创建开始到最终销毁的整个过程。</p>
<p>什么时候创建Bean对象？</p>
<p>创建Bean对象的前后会调用什么方法？</p>
<p>Bean对象什么时候销毁？</p>
<p>Bean对象的销毁前后调用什么方法？</p>
<h2 id="6-2-为什么要知道Bean的生命周期"><a href="#6-2-为什么要知道Bean的生命周期" class="headerlink" title="6.2 为什么要知道Bean的生命周期"></a>6.2 为什么要知道Bean的生命周期</h2><p>其实生命周期的本质是：在哪个时间节点上调用了哪个类的哪个方法。</p>
<p>我们需要充分的了解在这个生命线上，都有哪些特殊的时间节点。</p>
<p>只有我们知道了特殊的时间节点都在哪，到时我们才可以确定代码写到哪。</p>
<p>我们可能需要在某个特殊的时间点上执行一段特定的代码，这段代码就可以放到这个节点上。当生命线走到这里的时候，自然会被调用。</p>
<h2 id="6-3-Bean的生命周期之5步"><a href="#6-3-Bean的生命周期之5步" class="headerlink" title="6.3 Bean的生命周期之5步"></a>6.3 Bean的生命周期之5步</h2><p>Bean 生命周期的管理，可以参考Spring的源码：<code>AbstractAutowireCapableBeanFactory</code> 类的 <code>doCreateBean()</code> 方法</p>
<p>Bean 生命周期可以粗略的划分为五大步：</p>
<ul>
<li>第一步：实例化Bean</li>
<li>第二步：Bean属性赋值</li>
<li>第三步：初始化Bean</li>
<li>第四步：使用Bean</li>
<li>第五步：销毁Bean</li>
</ul>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/accidence-spring/Bean%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E4%B9%8B5%E6%AD%A5.png"></p>
<p>编写测试程序：</p>
<p>a. 创建如下类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;1.实例化Bean&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        System.out.println(<span class="string">&quot;2.Bean属性赋值&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initBean</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;3.初始化Bean&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroyBean</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;5.销毁Bean&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>b. <code>spring.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--init-method属性指定初始化方法。destroy-method属性指定销毁方法。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.muyoukule.Bean.User&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;initBean&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;destroyBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zhangsan&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>c. 测试程序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testLifecycle</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring.xml&quot;</span>);</span><br><span class="line">    <span class="type">User</span> <span class="variable">userBean</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;userBean&quot;</span>, User.class);</span><br><span class="line">    System.out.println(<span class="string">&quot;4.使用Bean&quot;</span>);</span><br><span class="line">    <span class="comment">// 只有正常关闭spring容器才会执行销毁方法</span></span><br><span class="line">    <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> (ClassPathXmlApplicationContext) applicationContext;</span><br><span class="line">    context.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>d. 执行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.实例化Bean</span><br><span class="line">2.Bean属性赋值</span><br><span class="line">3.初始化Bean</span><br><span class="line">4.使用Bean</span><br><span class="line">5.销毁Bean</span><br></pre></td></tr></table></figure>

<p>需要注意的：</p>
<ul>
<li>第一：只有正常关闭 spring 容器，bean 的销毁方法才会被调用。</li>
<li>第二：<code>ClassPathXmlApplicationContext</code> 类才有 close() 方法。</li>
<li>第三：配置文件中的 <code>init-method</code> 指定初始化方法。 <code>destroy-method</code> 指定销毁方法。</li>
</ul>
<h2 id="6-4-Bean生命周期之7步"><a href="#6-4-Bean生命周期之7步" class="headerlink" title="6.4 Bean生命周期之7步"></a>6.4 Bean生命周期之7步</h2><p>在以上的5步中，第3步是初始化 Bean ，如果你还想在初始化前和初始化后添加代码，可以加入“ Bean 后处理器”。</p>
<p>a. 编写一个类实现 <code>BeanPostProcessor</code> 类，并且重写 <code>before</code> 和 <code>after</code> 方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogBeanPostProcessor</span> <span class="keyword">implements</span> <span class="title class_">BeanPostProcessor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Bean后处理器的before方法执行，即将开始初始化&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Bean后处理器的after方法执行，已完成初始化&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>b. 在 <code>spring.xml</code> 文件中配置“ Bean 后处理器”：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--init-method属性指定初始化方法。destroy-method属性指定销毁方法。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.muyoukule.Bean.User&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;initBean&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;destroyBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zhangsan&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置Bean后处理器。这个后处理器将作用于当前配置文件中所有的bean。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.muyoukule.Bean.LogBeanPostProcessor&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>一定要注意：在 <code>spring.xml</code> 文件中配置的 Bean 后处理器将作用于当前配置文件中所有的 Bean 。</p>
<p>c. 执行测试程序</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.实例化Bean</span><br><span class="line">2.Bean属性赋值</span><br><span class="line">Bean后处理器的before方法执行，即将开始初始化</span><br><span class="line">3.初始化Bean</span><br><span class="line">Bean后处理器的after方法执行，已完成初始化</span><br><span class="line">4.使用Bean</span><br><span class="line">5.销毁Bean</span><br></pre></td></tr></table></figure>

<h2 id="6-5-Bean生命周期之10步"><a href="#6-5-Bean生命周期之10步" class="headerlink" title="6.5 Bean生命周期之10步"></a>6.5 Bean生命周期之10步</h2><p>如果根据源码跟踪，可以划分更细粒度的步骤，10步：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/accidence-spring/Bean%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E4%B9%8B10%E6%AD%A5.png"></p>
<p>上图中检查 Bean 是否实现了 <code>Aware</code> 的相关接口是什么意思？</p>
<p>Aware 相关的接口包括：<code>BeanNameAware</code> 、<code>BeanClassLoaderAware</code> 、<code>BeanFactoryAware</code></p>
<ul>
<li>当Bean实现了 <code>BeanNameAware</code> ，Spring 会将 Bean 的名字传递给 Bean。</li>
<li>当Bean实现了 <code>BeanClassLoaderAware</code> ，Spring 会将加载该 Bean 的类加载器传递给 Bean。</li>
<li>当Bean实现了 <code>BeanFactoryAware</code> ，Spring会将 Bean 工厂对象传递给 Bean。</li>
</ul>
<p>测试以上10步，可以让 User类实现5个接口，并实现所有方法：</p>
<ul>
<li>BeanNameAware</li>
<li>BeanClassLoaderAware</li>
<li>BeanFactoryAware</li>
<li>InitializingBean</li>
<li>DisposableBean</li>
</ul>
<p>a. 代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">BeanNameAware</span>, BeanClassLoaderAware, BeanFactoryAware, InitializingBean, DisposableBean &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;1.实例化Bean&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        System.out.println(<span class="string">&quot;2.Bean属性赋值&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initBean</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;6.初始化Bean&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroyBean</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;10.销毁Bean&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBeanClassLoader</span><span class="params">(ClassLoader classLoader)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;3.类加载器：&quot;</span> + classLoader);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBeanFactory</span><span class="params">(BeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;3.Bean工厂：&quot;</span> + beanFactory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBeanName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;3.bean名字：&quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;9.DisposableBean destroy&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;5.afterPropertiesSet执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>b. <code>LogBeanPostProcessor</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogBeanPostProcessor</span> <span class="keyword">implements</span> <span class="title class_">BeanPostProcessor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;4.Bean后处理器的before方法执行，即将开始初始化&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;7.Bean后处理器的after方法执行，已完成初始化&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>c. 测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testLifecycle</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring.xml&quot;</span>);</span><br><span class="line">    <span class="type">User</span> <span class="variable">userBean</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;userBean&quot;</span>, User.class);</span><br><span class="line">    System.out.println(<span class="string">&quot;8.使用Bean&quot;</span>);</span><br><span class="line">    <span class="comment">// 只有正常关闭spring容器才会执行销毁方法</span></span><br><span class="line">    <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> (ClassPathXmlApplicationContext) applicationContext;</span><br><span class="line">    context.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>d. 执行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.实例化Bean</span><br><span class="line">2.Bean属性赋值</span><br><span class="line">3.bean名字：userBean</span><br><span class="line">3.类加载器：jdk.internal.loader.ClassLoaders$AppClassLoader@63947c6b</span><br><span class="line">3.Bean工厂：org.springframework.beans.factory.support.DefaultListableBeanFactory@1bae316d: defining beans [userBean,com.muyoukule.Bean.LogBeanPostProcessor#0]; root of factory hierarchy</span><br><span class="line">4.Bean后处理器的before方法执行，即将开始初始化</span><br><span class="line">5.afterPropertiesSet执行</span><br><span class="line">6.初始化Bean</span><br><span class="line">7.Bean后处理器的after方法执行，已完成初始化</span><br><span class="line">8.使用Bean</span><br><span class="line">9.DisposableBean destroy</span><br><span class="line">10.销毁Bean</span><br></pre></td></tr></table></figure>

<p>通过测试可以看出来：</p>
<ul>
<li><code>InitializingBean</code> 的方法早于 <code>init-method</code> 的执行。</li>
<li><code>DisposableBean</code> 的方法早于 <code>destroy-method</code> 的执行。</li>
</ul>
<h2 id="6-6-Bean的作用域不同，管理方式不同"><a href="#6-6-Bean的作用域不同，管理方式不同" class="headerlink" title="6.6 Bean的作用域不同，管理方式不同"></a>6.6 Bean的作用域不同，管理方式不同</h2><p>Spring 根据 Bean 的作用域来选择管理方式。</p>
<ul>
<li>对于 <code>singleton</code> 作用域的 Bean，Spring 能够精确地知道该 Bean 何时被创建，何时初始化完成，以及何时被销毁；</li>
<li>而对于 <code>prototype</code> 作用域的 Bean，Spring 只负责创建，当容器创建了 Bean 的实例后，Bean 的实例就交给客户端代码管理，Spring 容器将不再跟踪其生命周期。</li>
</ul>
<p>a. 把之前User类的spring.xml文件中的配置 scope 设置为 <code>prototype</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--init-method属性指定初始化方法。destroy-method属性指定销毁方法。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.muyoukule.Bean.User&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;initBean&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;destroyBean&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zhangsan&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>b. 执行测试程序</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.实例化Bean</span><br><span class="line">2.Bean属性赋值</span><br><span class="line">3.bean名字：userBean</span><br><span class="line">3.类加载器：jdk.internal.loader.ClassLoaders$AppClassLoader@63947c6b</span><br><span class="line">3.Bean工厂：org.springframework.beans.factory.support.DefaultListableBeanFactory@1bae316d: defining beans [userBean,com.muyoukule.Bean.LogBeanPostProcessor#0]; root of factory hierarchy</span><br><span class="line">4.Bean后处理器的before方法执行，即将开始初始化</span><br><span class="line">5.afterPropertiesSet执行</span><br><span class="line">6.初始化Bean</span><br><span class="line">7.Bean后处理器的after方法执行，已完成初始化</span><br><span class="line">8.使用Bean</span><br></pre></td></tr></table></figure>

<p>通过测试一目了然。只执行了前8步，第9和10都没有执行。</p>
<h2 id="6-7-自己new的对象如何让Spring管理"><a href="#6-7-自己new的对象如何让Spring管理" class="headerlink" title="6.7 自己new的对象如何让Spring管理"></a>6.7 自己new的对象如何让Spring管理</h2><p>有些时候可能会遇到这样的需求，某个java对象是我们自己new的，然后我们希望这个对象被Spring容器管理，怎么实现？</p>
<p>a. 创建如下类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>b. 测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testBeanRegister</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 自己new的对象</span></span><br><span class="line">    <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">    System.out.println(student);</span><br><span class="line">    <span class="comment">// 创建 默认可列表BeanFactory 对象</span></span><br><span class="line">    <span class="type">DefaultListableBeanFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultListableBeanFactory</span>();</span><br><span class="line">    <span class="comment">// 注册Bean</span></span><br><span class="line">    factory.registerSingleton(<span class="string">&quot;studentBean&quot;</span>, student);</span><br><span class="line">    <span class="comment">// 从spring容器中获取bean</span></span><br><span class="line">    <span class="type">Student</span> <span class="variable">studentBean</span> <span class="operator">=</span> factory.getBean(<span class="string">&quot;studentBean&quot;</span>, Student.class);</span><br><span class="line">    System.out.println(studentBean);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>c. 结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">com.muyoukule.Bean.Student@6bdf28bb</span><br><span class="line">com.muyoukule.Bean.Student@6bdf28bb</span><br></pre></td></tr></table></figure>

<h1 id="7-Bean的循环依赖问题"><a href="#7-Bean的循环依赖问题" class="headerlink" title="7. Bean的循环依赖问题"></a>7. Bean的循环依赖问题</h1><h2 id="7-1-什么是Bean的循环依赖"><a href="#7-1-什么是Bean的循环依赖" class="headerlink" title="7.1 什么是Bean的循环依赖"></a>7.1 什么是Bean的循环依赖</h2><p>A对象中有B属性。B对象中有A属性。这就是循环依赖。我依赖你，你也依赖我。</p>
<p>比如：丈夫类Husband，妻子类Wife。Husband中有Wife的引用。Wife中有Husband的引用。</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/accidence-spring/Bean%E7%9A%84%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96.png"></p>
<p>Husband</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Husband</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Wife wife;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Wife</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Wife</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Husband husband;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="7-2-singleton下的set注入产生的循环依赖"><a href="#7-2-singleton下的set注入产生的循环依赖" class="headerlink" title="7.2 singleton下的set注入产生的循环依赖"></a>7.2 singleton下的set注入产生的循环依赖</h2><p>我们来编写程序，测试一下在 singleton+setter 的模式下产生的循环依赖，Spring是否能够解决？</p>
<p>a. 给上面的类添加方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Husband</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Wife wife;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// toString()方法重写时需要注意：不能直接输出wife，输出wife.getName()。要不然会出现递归导致的栈内存溢出错误。</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Husband&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, wife=&quot;</span> + wife.getName() +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Wife</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Husband husband;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// toString()方法重写时需要注意：不能直接输出husband，输出husband.getName()。要不然会出现递归导致的栈内存溢出错误。</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Wife&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, husband=&quot;</span> + husband.getName() +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>b. <code>spring.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;husbandBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.muyoukule.Bean.Husband&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;singleton&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;wife&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;wifeBean&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;wifeBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.muyoukule.Bean.Wife&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;singleton&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;小花&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;husband&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;husbandBean&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>c. 测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSingletonAndSet</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring.xml&quot;</span>);</span><br><span class="line">    <span class="type">Husband</span> <span class="variable">husbandBean</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;husbandBean&quot;</span>, Husband.class);</span><br><span class="line">    <span class="type">Wife</span> <span class="variable">wifeBean</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;wifeBean&quot;</span>, Wife.class);</span><br><span class="line">    System.out.println(husbandBean);</span><br><span class="line">    System.out.println(wifeBean);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>d. 结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Husband&#123;name=&#x27;张三&#x27;, wife=小花&#125;</span><br><span class="line">Wife&#123;name=&#x27;小花&#x27;, husband=张三&#125;</span><br></pre></td></tr></table></figure>

<p>通过测试得知：在 <code>singleton</code>  +  <code>set</code> 注入的情况下，循环依赖是没有问题的。Spring 可以解决这个问题。</p>
<h2 id="7-3-prototype下的set注入产生的循环依赖"><a href="#7-3-prototype下的set注入产生的循环依赖" class="headerlink" title="7.3 prototype下的set注入产生的循环依赖"></a>7.3 prototype下的set注入产生的循环依赖</h2><p>我们再来测试一下：<code>prototype</code> + <code>set</code> 注入的方式下，循环依赖会不会出现问题？</p>
<p>a. 修改<code>spring.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;husbandBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.muyoukule.Bean.Husband&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;wife&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;wifeBean&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;wifeBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.muyoukule.Bean.Wife&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;小花&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;husband&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;husbandBean&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>b. 测试</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/accidence-spring/%E5%88%9B%E5%BB%BA%E5%90%8D%E4%B8%BAhusbandBean%E7%9A%84bean%E6%97%B6%E5%87%BA%E9%94%99.png"></p>
<p>翻译为：创建名为“ <code>husbandBean</code> ”的 bean 时出错：请求的 bean 当前正在创建中：是否存在无法解析的循环引用？</p>
<p>通过测试得知，当循环依赖的所有 Bean 的 <code>scope=&quot;prototype&quot;</code> 的时候，产生的循环依赖，Spring 是无法解决的，会出现 <code>BeanCurrentlyInCreationException</code> 异常。</p>
<p>大家可以测试一下，以上两个 Bean，如果其中一个是 <code>singleton</code> ，另一个是 <code>prototype</code> ，是没有问题的。</p>
<p>为什么两个Bean都是 <code>prototype</code> 时会出错呢？</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/accidence-spring/%E4%B8%A4%E4%B8%AABean%E9%83%BD%E6%98%AFprototype%E6%97%B6%E5%87%BA%E9%94%99%E7%9A%84%E5%8E%9F%E5%9B%A0.png"></p>
<h2 id="7-4-singleton下的构造注入产生的循环依赖"><a href="#7-4-singleton下的构造注入产生的循环依赖" class="headerlink" title="7.4 singleton下的构造注入产生的循环依赖"></a>7.4 singleton下的构造注入产生的循环依赖</h2><p>我们再来测试一下singleton + 构造注入的方式下，spring是否能够解决这种循环依赖。</p>
<p>a. 创建如下类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Husband</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Wife wife;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Wife</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Husband husband;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>b.  修改 <code>spring.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;hBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.muyoukule.Bean.Husband&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;singleton&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;wife&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;wBean&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;wBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.muyoukule.Bean.Wife&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;singleton&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;小花&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;husband&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;hBean&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>c. 测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSingletonAndConstructor</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring.xml&quot;</span>);</span><br><span class="line">    <span class="type">Husband</span> <span class="variable">hBean</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;hBean&quot;</span>, Husband.class);</span><br><span class="line">    <span class="type">Wife</span> <span class="variable">wBean</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;wBean&quot;</span>, Wife.class);</span><br><span class="line">    System.out.println(hBean);</span><br><span class="line">    System.out.println(wBean);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>d. 结果</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/accidence-spring/%E6%8F%90%E7%A4%BA%E4%BA%A7%E7%94%9F%E4%BA%86%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96.png"></p>
<p>和上一个测试结果相同，都是提示产生了循环依赖，并且Spring是无法解决这种循环依赖的。这是通过构造方法注入导致的：因为构造方法注入会导致实例化对象的过程和对象属性赋值的过程没有分离开，必须在一起完成。</p>
<h2 id="7-5-Spring解决循环依赖的机理"><a href="#7-5-Spring解决循环依赖的机理" class="headerlink" title="7.5 Spring解决循环依赖的机理"></a>7.5 Spring解决循环依赖的机理</h2><p>Spring 为什么可以解决 <code>set + singleton</code> 模式下循环依赖？</p>
<p>根本的原因在于：这种方式可以做到将“实例化 Bean ”和“给 Bean 属性赋值”这两个动作分开去完成。</p>
<ul>
<li><p>实例化 Bean 的时候：调用无参数构造方法来完成。此时可以先不给属性赋值，可以提前将该 Bean 对象“曝光”给外界。</p>
</li>
<li><p>给 Bean 属性赋值的时候：调用 <code>setter</code> 方法来完成。</p>
</li>
</ul>
<p>两个步骤是完全可以分离开去完成的，并且这两步不要求在同一个时间点上完成。</p>
<p>也就是说，Bean 都是单例的，我们可以先把所有的单例 Bean 实例化出来，放到一个集合当中（我们可以称之为缓存），所有的单例Bean 全部实例化完成之后，以后我们再慢慢的调用 <code>setter</code> 方法给属性赋值。这样就解决了循环依赖的问题。</p>
<p>那么在Spring框架底层源码级别上是如何实现的呢？请看：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/accidence-spring/DeafaultSingletonBeanRegistry%E6%BA%90%E7%A0%81.png"></p>
<p>在以上类中包含三个重要的属性：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Cache of singleton objects: bean name to bean instance</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Object&gt; singletonObjects = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>(<span class="number">256</span>);</span><br></pre></td></tr></table></figure>

<p><strong><code>Cache of singleton objects: bean name to bean instance.</code> 单例对象的缓存：key存储 bean 名称，value 存储 Bean 对象【一级缓存】</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Cache of early singleton objects: bean name to bean instance</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Object&gt; earlySingletonObjects = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>(<span class="number">16</span>);</span><br></pre></td></tr></table></figure>

<p><strong><code>Cache of early singleton objects: bean name to bean instance.</code> 早期单例对象的缓存：key 存储 bean 名称，value 存储早期的 Bean 对象【二级缓存】</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Cache of singleton factories: bean name to ObjectFactory</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, ObjectFactory&lt;?&gt;&gt; singletonFactories = <span class="keyword">new</span> <span class="title class_">HashMap</span>(<span class="number">16</span>);</span><br></pre></td></tr></table></figure>

<p><strong><code>Cache of singleton factories: bean name to ObjectFactory.</code> 单例工厂缓存：key 存储 bean 名称，value 存储该 Bean 对应的 ObjectFactory 对象【三级缓存】</strong></p>
<p>这三个缓存其实本质上是三个Map集合。</p>
<p>我们再来看，在该类中有这样一个方法 <code>addSingletonFactory()</code> ，这个方法的作用是：将创建 Bean 对象的 ObjectFactory 对象提前曝光。</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/accidence-spring/addSingletonFactory()%E6%96%B9%E6%B3%95.png" style="zoom:67%;">

<p>再分析下面的源码：</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/accidence-spring/getSingleton%E6%BA%90%E7%A0%81.png" style="zoom:67%;">

<p>从源码中可以看到，spring 会先从一级缓存中获取 Bean，如果获取不到，则从二级缓存中获取 Bean，如果二级缓存还是获取不到，则从三级缓存中获取之前曝光的 ObjectFactory 对象，通过 ObjectFactory 对象获取 Bean 实例，这样就解决了循环依赖的问题。</p>
<p><strong>总结</strong></p>
<p>Spring 只能解决 <code>setter</code> 方法注入的单例 bean 之间的循环依赖。ClassA 依赖 ClassB ，ClassB 又依赖ClassA ，形成依赖闭环。Spring 在创建 ClassA 对象后，不需要等给属性赋值，直接将其曝光到 bean 缓存当中。在解析 ClassA 的属性时，又发现依赖于 ClassB ，再次去获取 ClassB，当解析 ClassB 的属性时，又发现需要 ClassA 的属性，但此时的 ClassA 已经被提前曝光加入了正在创建的 bean 的缓存中，则无需创建新的的 ClassA 的实例，直接从缓存中获取即可。从而解决循环依赖问题。</p>
]]></content>
      <categories>
        <category>SSM</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring入门（下）</title>
    <url>/posts/Accidence-Spring-Volume-Two/</url>
    <content><![CDATA[<p>Spring官网：<a href="https://spring.io/">https://spring.io/</a></p>
<p>参考视频：</p>
<ul>
<li><a href="https://www.bilibili.com/video/BV1Ft4y1g7Fb/">Spring视频零基础入门到高级，Spring全套视频教程详解</a></li>
<li><a href="https://www.bilibili.com/video/BV1Fi4y1S7ix/">黑马程序员SSM框架教程Spring部分</a></li>
</ul>
<p>源码仓库：<a href="https://github.com/muyoukule/accidence-spring">muyoukule&#x2F;accidence-spring (github.com)</a></p>
<h1 id="1-Spring-IoC注解式开发"><a href="#1-Spring-IoC注解式开发" class="headerlink" title="1. Spring IoC注解式开发"></a>1. Spring IoC注解式开发</h1><h2 id="1-1-回顾注解"><a href="#1-1-回顾注解" class="headerlink" title="1.1 回顾注解"></a>1.1 回顾注解</h2><p>注解的存在主要是为了简化XML的配置。</p>
<p>我们来回顾一下：</p>
<ul>
<li>第一：注解怎么定义，注解中的属性怎么定义？</li>
<li>第二：注解怎么使用？</li>
<li>第三：通过反射机制怎么读取注解？</li>
</ul>
<blockquote>
<p>注解怎么定义，注解中的属性怎么定义？</p>
</blockquote>
<p>自定义注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(value = &#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(value = RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Component &#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上是自定义了一个注解：<code>Component</code></p>
<p>该注解上面修饰的注解包括：<code>Target</code> 注解和 <code>Retention</code> 注解，这两个注解被称为元注解。</p>
<p><code>Target</code> 注解用来设置 <code>Component</code> 注解可以出现的位置，以上代表表示 <code>Component</code> 注解只能用在类和接口上。</p>
<p><code>Retention</code> 注解用来设置 <code>Component</code> 注解的保持性策略，以上代表 <code>Component</code> 注解可以被反射机制读取。</p>
<p><code>String value();</code> 是 <code>Component</code> 注解中的一个属性。该属性类型 String ，属性名是 value 。</p>
<blockquote>
<p>注解怎么使用？</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component(value = &quot;userBean&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>用法简单，语法格式：@注解类型名(属性名&#x3D;属性值, 属性名&#x3D;属性值, 属性名&#x3D;属性值……)</p>
<p><code>userBean</code> 为什么使用双引号括起来，因为 value 属性是 String 类型，字符串。</p>
<p>另外如果属性名是 value ，则在使用的时候可以省略属性名，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component(&quot;userBean&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>通过反射机制怎么读取注解？</p>
</blockquote>
<p>接下来，我们来写一段程序，当 Bean 类上有 <code>Component</code> 注解时，则实例化 Bean 对象，如果没有，则不实例化对象。</p>
<p>我们准备两个 Bean ，一个上面有注解，一个上面没有注解。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component(&quot;userBean&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Vip</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>假设我们现在只知道包名：<code>com.muyoukule.bean</code> 。至于这个包下有多少个 Bean 我们不知道。哪些 Bean 上有注解，哪些 Bean 上没有注解，这些我们都不知道，如何通过程序全自动化判断。</p>
<p>a. 反射解析注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ComponentScan</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 存放Bean的Map集合。key存储beanId。value存储Bean。</span></span><br><span class="line">        Map&lt;String, Object&gt; beanMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">packageName</span> <span class="operator">=</span> <span class="string">&quot;com.muyoukule.Bean&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> packageName.replaceAll(<span class="string">&quot;\\.&quot;</span>, <span class="string">&quot;/&quot;</span>);</span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> ClassLoader.getSystemClassLoader().getResource(path);</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(url.getPath());</span><br><span class="line">        File[] files = file.listFiles();</span><br><span class="line">        Arrays.stream(files).forEach(f -&gt; &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> packageName + <span class="string">&quot;.&quot;</span> + f.getName().split(<span class="string">&quot;\\.&quot;</span>)[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Class&lt;?&gt; clazz = Class.forName(className);</span><br><span class="line">                <span class="keyword">if</span> (clazz.isAnnotationPresent(Component.class)) &#123;</span><br><span class="line">                    <span class="type">Component</span> <span class="variable">component</span> <span class="operator">=</span> clazz.getAnnotation(Component.class);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">beanId</span> <span class="operator">=</span> component.value();</span><br><span class="line">                    <span class="type">Object</span> <span class="variable">bean</span> <span class="operator">=</span> clazz.newInstance();</span><br><span class="line">                    beanMap.put(beanId, bean);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(beanMap);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>b. 执行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;userBean=com.muyoukule.Bean.User@27fa135a&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注：如果项目存放路径有中文或者空格可能会报空指针异常</strong></p>
<h2 id="1-2-声明Bean的注解"><a href="#1-2-声明Bean的注解" class="headerlink" title="1.2  声明Bean的注解"></a>1.2  声明Bean的注解</h2><p>负责声明 Bean 的注解，常见的包括四个：</p>
<ul>
<li><code>@Component</code></li>
<li><code>@Controller</code></li>
<li><code>@Service</code></li>
<li><code>@Repository</code></li>
</ul>
<p>源码如下：</p>
<p><code>@Component</code> 注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(value = &#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(value = RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Component &#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>@Controller</code> 注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Controller &#123;</span><br><span class="line">    <span class="meta">@AliasFor(</span></span><br><span class="line"><span class="meta">        annotation = Component.class</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>@Service</code> 注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Service &#123;</span><br><span class="line">    <span class="meta">@AliasFor(</span></span><br><span class="line"><span class="meta">        annotation = Component.class</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>@Repository</code> 注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Repository &#123;</span><br><span class="line">    <span class="meta">@AliasFor(</span></span><br><span class="line"><span class="meta">        annotation = Component.class</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过源码可以看到，<code>@Controller</code> 、<code>@Service</code> 、<code>@Repository</code> 这三个注解都是 <code>@Component</code> 注解的别名。</p>
<p>也就是说：这四个注解的功能都一样。用哪个都可以。</p>
<p>只是为了增强程序的可读性，建议：</p>
<ul>
<li>控制器类上使用：Controller</li>
<li>Service类上使用：Service</li>
<li>Dao类上使用：Repository</li>
</ul>
<p>他们都是只有一个 value 属性。value属性用来指定 bean 的 id，也就是 bean 的名字。</p>
<h2 id="1-3-Spring注解的使用"><a href="#1-3-Spring注解的使用" class="headerlink" title="1.3 Spring注解的使用"></a>1.3 Spring注解的使用</h2><p>如何使用以上的注解呢？</p>
<ol>
<li>加入aop的依赖</li>
<li>在配置文件中添加 <code>context</code> 命名空间</li>
<li>在配置文件中指定扫描的包</li>
<li>在Bean类上使用注解</li>
</ol>
<p>a. 加入aop的依赖：</p>
<p>我们可以看到当加入 <code>spring-contex</code>t 依赖之后，会关联加入 <code>aop</code> 的依赖。所以这一步不用做。</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/accidence-spring/aop%E7%9A%84%E4%BE%9D%E8%B5%96.png"></p>
<p>b. 在配置文件 <code>spring.xml</code> 中添加context命名空间</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>c. 在配置文件 <code>spring.xml</code> 中指定要扫描的包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.muyoukule.Bean&quot;</span>/&gt;</span> </span><br></pre></td></tr></table></figure>

<p>d. 在Bean类上使用注解</p>
<p>这里一定要注意是使用 <code>org.springframework.stereotype</code> 包下的 <code>@Component</code> ，不是上面自定义的<code>@Component</code> 😢</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component(value = &quot;userBean&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>e. 编写测试程序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testBean</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring.xml&quot;</span>);</span><br><span class="line">    <span class="type">User</span> <span class="variable">userBean</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;userBean&quot;</span>, User.class);</span><br><span class="line">    System.out.println(userBean);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>f. 执行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">com.muyoukule.Bean.User@a43ce46</span><br></pre></td></tr></table></figure>

<p>如果注解的属性名是value，那么value是可以省略的。</p>
<p>如果把value属性彻底去掉，spring会被 Bean 自动取名，并且默认名字的规律是：Bean类名首字母小写即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BankDao</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>也就是说，这个 BankDao 的 bean 的名字为：bankDao</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">com.muyoukule.Bean.BankDao@2320fa6f</span><br></pre></td></tr></table></figure>

<p><strong>如果是多个包有两种解决方案：</strong></p>
<ol>
<li>在配置文件中指定多个包，用逗号隔开。</li>
<li>指定多个包的共同父包。</li>
</ol>
<blockquote>
<p>逗号（英文）的方式</p>
</blockquote>
<p>a. 创建一个新的包：Bean2，定义一个Bean类Order</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Order</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>b. 配置文件 <code>spring.xml</code> 中修改</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--1.在配置文件中指定多个包，用逗号隔开。--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;context:component-scan base-package=&quot;com.muyoukule.Bean,com.muyoukule.Bean2&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--2.指定多个包的共同父包。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.muyoukule&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>c. 测试</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">com.muyoukule.Bean.BankDao@37052337</span><br><span class="line">com.muyoukule.Bean2.Order@2320fa6f</span><br></pre></td></tr></table></figure>

<h2 id="1-4-选择性实例化Bean"><a href="#1-4-选择性实例化Bean" class="headerlink" title="1.4 选择性实例化Bean"></a>1.4 选择性实例化Bean</h2><p>假设在某个包下有很多 Bean，有的 Bean上 标注了 <code>@Component</code>，有的标注了 <code>@Controller</code>，有的标注了 <code>@Service</code>，有的标注了 <code>@Repository</code>，现在由于某种特殊业务的需要，只允许其中所有的 <code>@Controller</code> 参与 Bean 管理，其他的都不实例化。这应该怎么办呢？</p>
<p>a. 为了方便，将这几个类都定义到同一个java源文件中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">A</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;A的无参数构造方法执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">B</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;B的无参数构造方法执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">C</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;C的无参数构造方法执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">D</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;D的无参数构造方法执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">E</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">E</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;E的无参数构造方法执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">F</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">F</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;F的无参数构造方法执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>b. 只想实例化 Bean3 包下的 <code>@Controller</code>。配置文件这样写：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.muyoukule.Bean3&quot;</span> <span class="attr">use-default-filters</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>use-default-filters=&quot;true&quot;</code> 表示：使用 spring 默认的规则，只要有 <code>@Component</code> 、<code>@Controller</code> 、<code>@Service</code> 、<code>@Repository</code>  中的任意一个注解标注，则进行实例化。</p>
<p><code>use-default-filters=&quot;false&quot;</code> 表示：不再 spring 默认实例化规则，即使有 <code>@Component</code> 、<code>@Controller</code> 、<code>@Service</code> 、<code>@Repository</code>  这些注解标注，也不再实例化。</p>
<p><code>&lt;context:include-filter type=&quot;annotation&quot; expression=&quot;org.springframework.stereotype.Controller&quot;/&gt;</code> 表示只有<code>@Controller</code> 进行实例化</p>
<p>c. 测试程序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testChoose</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring.xml&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>d. 执行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">B的无参数构造方法执行</span><br><span class="line">E的无参数构造方法执行</span><br><span class="line">F的无参数构造方法执行</span><br></pre></td></tr></table></figure>

<p>也可以将 <code>use-default-filters</code> 设置为 true（不写就是true），并且采用 <code>exclude-filter</code> 方式排出哪些注解标注的 Bean 不参与实例化：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.muyoukule.Bean3&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Repository&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Service&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">A的无参数构造方法执行</span><br></pre></td></tr></table></figure>

<h2 id="1-5-负责注入的注解"><a href="#1-5-负责注入的注解" class="headerlink" title="1.5 负责注入的注解"></a>1.5 负责注入的注解</h2><p> <code>@Component</code> 、<code>@Controller</code> 、<code>@Service</code> 、<code>@Repository</code>  这四个注解是用来声明 Bean 的，声明后这些 Bean 将被实例化。接下来我们看一下，如何给 Bean 的属性赋值。给Bean属性赋值需要用到这些注解：</p>
<p><code>@Value</code> 、<code>@Autowired</code> 、<code>@Qualifier</code> 、<code>@Resource</code></p>
<h3 id="1-5-1-Value"><a href="#1-5-1-Value" class="headerlink" title="1.5.1 @Value"></a>1.5.1 @Value</h3><blockquote>
<p>属性的类型是简单类型，可以使用 @Value 注解进行注入</p>
</blockquote>
<p>a. 创建如下类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@Value(value = &quot;zhangsan&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Value(&quot;20&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>b. 开启包扫描</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.muyoukule.Bean4&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>c. 测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testValue</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring.xml&quot;</span>);</span><br><span class="line">    <span class="type">Object</span> <span class="variable">user</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>d. 执行测试程序</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">User(name=zhangsan, age=20)</span><br></pre></td></tr></table></figure>

<p>通过以上代码可以发现，我们并没有给属性提供 <code>setter</code> 方法，但仍然可以完成属性赋值。</p>
<blockquote>
<p>提供 setter 方法，并且在 setter 方法上添加 @Value 注解，也可以完成注入</p>
</blockquote>
<p>a. 修改类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;李四&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;30&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>b. 执行测试程序</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">User(name=李四, age=30)</span><br></pre></td></tr></table></figure>

<p>为了简化代码，以后我们一般不提供 <code>setter</code> 方法，直接在属性上使用 <code>@Value</code> 注解完成属性赋值。</p>
<blockquote>
<p>也能够通过构造方法完成注入</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(<span class="meta">@Value(&quot;隔壁老王&quot;)</span> String name, <span class="meta">@Value(&quot;33&quot;)</span> <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">User(name=隔壁老王, age=33)</span><br></pre></td></tr></table></figure>

<p>通过测试得知：<code>@Value</code> 注解可以出现在属性上、<code>setter</code> 方法上、构造方法的形参上。</p>
<h3 id="1-5-2-Autowired与-Qualifier"><a href="#1-5-2-Autowired与-Qualifier" class="headerlink" title="1.5.2 @Autowired与@Qualifier"></a>1.5.2 @Autowired与@Qualifier</h3><p><code>@Autowired</code> 注解可以用来注入<strong>非简单类型</strong>。被翻译为：自动连线的，或者自动装配。</p>
<p>单独使用 <code>@Autowired</code> 注解，<strong>默认根据类型装配</strong>。【默认是 byType 】</p>
<p>看一下 <code>@Autowired源码</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.CONSTRUCTOR, ElementType.METHOD, ElementType.PARAMETER, ElementType.FIELD, ElementType.ANNOTATION_TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Autowired &#123;</span><br><span class="line">	<span class="type">boolean</span> <span class="title function_">required</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>源码中有两处需要注意：</p>
<ul>
<li><p>第一处：该注解可以标注在哪里？</p>
<ul>
<li>构造方法上</li>
<li>方法上</li>
<li>形参上</li>
<li>属性上</li>
<li>注解上</li>
</ul>
</li>
<li><p>第二处：该注解有一个 <code>required</code> 属性，默认值是 true，表示在注入的时候要求被注入的 Bean 必须是存在的，如果不存在则报错。如果 <code>required</code> 属性设置为 false，表示注入的 Bean 存在或者不存在都没关系，存在的话就注入，不存在的话，也不报错。</p>
</li>
</ul>
<blockquote>
<p>在属性上使用 @Autowired 注解</p>
</blockquote>
<p>a. 创建如下类</p>
<p>UserDao接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>UserDao实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span> <span class="comment">//纳入bean管理</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoForMySQL</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在向mysql数据库插入User数据...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>UserService</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span> <span class="comment">// 纳入bean管理</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span> <span class="comment">// 在属性上注入</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 没有提供构造方法和setter方法。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        userDao.insert();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>b. 配置包扫描</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.muyoukule.Dao,com.muyoukule.Service&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>c. 测试程序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAutowired</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring.xml&quot;</span>);</span><br><span class="line">    <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;userService&quot;</span>, UserService.class);</span><br><span class="line">    userService.save();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>d. 结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">正在向mysql数据库插入User数据...</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在setter方法使用 @Autowired 注解</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserDao</span><span class="params">(UserDao userDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        userDao.insert();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在构造方法使用 @Autowired 注解</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserService</span><span class="params">(UserDao userDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        userDao.insert();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>只在构造方法的形参使用 @Autowired 注解</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserService</span><span class="params">(<span class="meta">@Autowired</span> UserDao userDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        userDao.insert();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>当有参数的构造方法只有一个时，@Autowired 注解可以省略</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserService</span><span class="params">(UserDao userDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        userDao.insert();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果均为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">正在向mysql数据库插入User数据...</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果有多个构造方法，@Autowired 肯定是不能省略的</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserService</span><span class="params">(UserDao userDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserService</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        userDao.insert();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行结果</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/accidence-spring/%E6%9C%89%E5%A4%9A%E4%B8%AA%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95%E7%9C%81%E7%95%A5@Autowired.png"></p>
<p>到此为止，我们已经清楚 <code>@Autowired</code> 注解可以出现在哪些位置了。</p>
<p><code>@Autowired</code> 注解默认是 <code>byType</code> 进行注入的，也就是说根据类型注入的，如果以上程序中，UserDao 接口还有另外一个实现类，会出现问题吗？</p>
<p><code>UserDaoForOracle</code> ，接口另一个实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span> <span class="comment">//纳入bean管理</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoForOracle</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在向Oracle数据库插入User数据...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行测试，程序报错</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">No qualifying bean of type &#x27;com.muyoukule.Dao.UserDao&#x27; available: expected single matching bean but found 2: userDaoForMySQL,userDaoForOracle</span><br></pre></td></tr></table></figure>

<p>可以通过 <code>byName</code> ，根据名称进行装配解决这个问题。</p>
<p><code>@Autowired</code> 注解和 <code>@Qualifier</code> 注解联合起来才可以根据名称进行装配，在 <code>@Qualifier</code> 注解中指定 Bean 名称</p>
<p>UserDaoForOracle</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span> <span class="comment">// 这里没有给bean起名，默认名字是：userDaoForOracle</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoForOracle</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在向Oracle数据库插入User数据...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>UserService</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;userDaoForOracle&quot;)</span> <span class="comment">// 这个是bean的名字。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserDao</span><span class="params">(UserDao userDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        userDao.insert();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">正在向Oracle数据库插入User数据...</span><br></pre></td></tr></table></figure>

<p>总结：</p>
<ul>
<li><code>@Autowired</code> 注解可以出现在：属性上、构造方法上、构造方法的参数上、setter方法上。</li>
<li>当带参数的构造方法只有一个，<code>@Autowired</code> 注解可以省略。</li>
<li><code>@Autowired</code> 注解默认根据类型注入。如果要根据名称注入的话，需要配合 <code>@Qualifier</code> 注解一起使用。</li>
</ul>
<h3 id="1-5-3-Resource"><a href="#1-5-3-Resource" class="headerlink" title="1.5.3 @Resource"></a>1.5.3 @Resource</h3><p><code>@Resource</code> 注解也可以完成非简单类型注入。那它和 <code>@Autowired</code> 注解有什么区别？</p>
<ul>
<li><code>@Resource</code> 注解是 JDK 扩展包中的，也就是说属于 JDK 的一部分。所以该注解是标准注解，更加具有通用性。(JSR-250标准中制定的注解类型。JSR是Java规范提案。)</li>
<li><code>@Autowired</code> 注解是 Spring 框架自己的。</li>
<li><code>@Resource</code> 注解默认根据名称装配 <code>byName</code>，未指定 name 时，使用属性名作为 name。通过 name 找不到的话会自动启动通过类型 <code>byType</code> 装配。</li>
<li><code>@Autowired</code> 注解默认根据类型装配 <code>byType</code>，如果想根据名称装配，需要配合 <code>@Qualifier</code> 注解一起用。</li>
<li><code>@Resource</code> 注解用在属性上、<code>setter</code> 方法上。</li>
<li><code>@Autowired</code> 注解用在属性上、<code>setter</code> 方法上、构造方法上、构造方法参数上。</li>
</ul>
<p><code>@Resource</code> 注解属于 JDK 扩展包，所以不在 JDK 当中，需要额外引入以下依赖：【<strong>如果是JDK8的话不需要额外引入依赖。高于JDK11或低于JDK8需要引入以下依赖。</strong>】</p>
<blockquote>
<p>Spring6+版本</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;jakarta.annotation&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;jakarta.annotation-api&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;<span class="number">2.1</span><span class="number">.1</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>一定要注意：如果你用 Spring6，要知道 Spring6 不再支持 JavaEE，它支持的是 JakartaEE9。（Oracle 把 JavaEE贡献给 Apache 了，Apache 把 JavaEE 的名字改成 JakartaEE 了，大家之前所接触的所有的  javax.*  包名统一修改为  jakarta.* 包名了。）</p>
<blockquote>
<p>Spring5-版本</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.annotation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.annotation-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>添加依赖，使用 @Resource 注解</p>
</blockquote>
<p>a. 给这个 UserDaoForOracle 起名 xyz</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository(&quot;xyz&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoForOracle</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在向Oracle数据库插入User数据...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>b. 在UserService中使用 <code>@Resource</code> 注解根据 name 注入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource(name = &quot;xyz&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        userDao.insert();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>c. 执行测试程序</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">正在向Oracle数据库插入User数据...</span><br></pre></td></tr></table></figure>

<blockquote>
<p>当 @Resource 注解使用时没有指定name的时候，还是根据 name 进行查找，这个 name 是属性名</p>
</blockquote>
<p>a. 把 UserDaoForOracle 的名字 xyz 修改为 userDao，让这个 Bean 的名字和 UserService 类中的 UserDao 属性名一致</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository(&quot;userDao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoForOracle</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在向Oracle数据库插入User数据...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>b. UserService类中 <code>@Resource</code> 注解并没有指定 name</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        userDao.insert();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>c. 执行测试程序</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">正在向Oracle数据库插入User数据...</span><br></pre></td></tr></table></figure>

<p>把 UserService 类中的属性名修改一下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao2;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        userDao2.insert();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行结果，程序报错</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">No qualifying bean of type &#x27;com.muyoukule.Dao.UserDao&#x27; available: expected single matching bean but found 2: userDaoForMySQL,userDao</span><br></pre></td></tr></table></figure>

<p>根据异常信息得知：当通过 name 找不到的时候，自然会启动 <code>byType</code> 进行注入。以上的错误是因为 UserDao 接口下有两个实现类导致的。所以根据类型注入就会报错。</p>
<blockquote>
<p>@Resource 注解可以在 setter 方法上使用</p>
</blockquote>
<p>UserService添加 <code>setter</code> 方法并使用注解标注</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserDao</span><span class="params">(UserDao userDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        userDao.insert();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意这个 <code>setter</code> 方法的方法名，setUserDao 去掉 set 之后，将首字母变小写 userDao，userDao 就是 name</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">正在向Oracle数据库插入User数据...</span><br></pre></td></tr></table></figure>

<p>也可以指定 name </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource(name = &quot;userDaoForMySQL&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserDao</span><span class="params">(UserDao userDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>&#123;</span><br><span class="line">        userDao.insert();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">正在向mysql数据库插入User数据...</span><br></pre></td></tr></table></figure>

<p><strong>总结：</strong></p>
<p><code>@Resource</code> 注解：默认 <code>byName</code> 注入，没有指定 name 时把属性名当做 name，根据 name 找不到时，才会 <code>byType</code> 注入。<code>byType</code> 注入时，某种类型的 Bean 只能有一个。</p>
<h2 id="1-6-全注解式开发"><a href="#1-6-全注解式开发" class="headerlink" title="1.6 全注解式开发"></a>1.6 全注解式开发</h2><p>上面已经可以使用注解来配置 bean ,但是依然有用到配置文件，在配置文件中对包进行了扫描，Spring 在3.0版已经支持纯注解开发</p>
<ul>
<li>Spring3.0开启了纯注解开发模式，使用 Java 类替代配置文件，开启了 Spring 快速开发赛道，具体如何实现?</li>
</ul>
<p>所谓的全注解开发就是不再使用 spring 配置文件了。写一个配置类来代替配置文件。</p>
<blockquote>
<p>思路分析</p>
</blockquote>
<p>实现思路为: </p>
<ul>
<li>将配置文件 <code>spring.xml</code> 删除掉，使用类来替换。</li>
</ul>
<blockquote>
<p>实现步骤</p>
</blockquote>
<p>a. 创建一个配置类</p>
<p>创建一个配置类 <code>SpringConfig</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>b. 标识该类为配置类</p>
<p>在配置类上添加 <code>@Configuration</code> 注解，将其标识为一个配置类，替换 <code>spring.xml</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>c. 用注解替换包扫描配置</p>
<p>在配置类上添加包扫描注解 <code>@ComponentScan</code> 替换 <code>&lt;context:component-scan base-package=&quot;&quot;/&gt;</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.muyoukule&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>d. 编写测试程序：不再 <code>new ClassPathXmlApplicationContext()</code> 对象了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testNoXml</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br><span class="line">    <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;userService&quot;</span>, UserService.class);</span><br><span class="line">    userService.save();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>e. 执行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">正在向mysql数据库插入User数据...</span><br></pre></td></tr></table></figure>

<p>至此，纯注解开发的方式就已经完成了，主要内容包括：</p>
<ul>
<li><p>Java类替换 Spring 核心配置文件</p>
</li>
<li><p><code>@Configuration</code> 注解用于设定当前类为配置类</p>
</li>
<li><p><code>@ComponentScan</code> 注解用于设定扫描路径，此注解只能添加一次，多个数据请用数组格式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@ComponentScan(&#123;&quot;com.muyoukule.service&quot;,&quot;com.muyoukule.dao&quot;&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>读取 Spring 核心配置文件初始化容器对象切换为读取 Java 配置类初始化容器对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//加载配置文件初始化容器</span></span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring.xml&quot;</span>);</span><br><span class="line"><span class="comment">//加载配置类初始化容器</span></span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="1-7-IOC-DI注解开发管理第三方bean"><a href="#1-7-IOC-DI注解开发管理第三方bean" class="headerlink" title="1.7 IOC&#x2F;DI注解开发管理第三方bean"></a>1.7 IOC&#x2F;DI注解开发管理第三方bean</h2><blockquote>
<p>准备环境</p>
</blockquote>
<p>a. 新建spring_009模块</p>
<p>b. <code>pom.xml</code> 添加 Spring 的依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.27<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>c. 添加一个配置类 <code>SpringConfig</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>d. 添加BookDao、BookDaoImpl类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>e. 创建运行类App</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-7-1-注解开发管理第三方bean"><a href="#1-7-1-注解开发管理第三方bean" class="headerlink" title="1.7.1 注解开发管理第三方bean"></a>1.7.1 注解开发管理第三方bean</h3><blockquote>
<p>在上述环境中完成对 Druid 数据源的管理</p>
</blockquote>
<p>a. 导入对应的 jar 包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>b. 在配置类中添加一个方法</p>
<p>注意该方法的返回值就是要创建的 Bean 对象类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        ds.setDriverClassName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        ds.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/spring_db&quot;</span>);</span><br><span class="line">        ds.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        ds.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>c. 在方法上添加 <code>@Bean</code> 注解</p>
<p><code>@Bean</code> 注解的作用是将方法的返回值制作为 Spring 管理的一个 bean 对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        ds.setDriverClassName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        ds.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/spring_db&quot;</span>);</span><br><span class="line">        ds.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        ds.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>**注意：不能使用 <code>DataSource ds = new DruidDataSource()</code>  **，因为 DataSource 接口中没有对应的 <code>setter</code> 方法来设置属性。</p>
<p>d. 从IOC容器中获取对象并打印</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br><span class="line">        <span class="type">DataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> ctx.getBean(DataSource.class);</span><br><span class="line">        System.out.println(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>e. 结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	CreateTime:&quot;2023-03-16 15:05:54&quot;,</span><br><span class="line">	ActiveCount:0,</span><br><span class="line">	PoolingCount:0,</span><br><span class="line">	CreateCount:0,</span><br><span class="line">	DestroyCount:0,</span><br><span class="line">	CloseCount:0,</span><br><span class="line">	ConnectCount:0,</span><br><span class="line">	Connections:[</span><br><span class="line">	]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果有多个 bean 要被 Spring 管理，直接在配置类中多些几个方法，方法上添加 <code>@Bean</code> 注解即可。</p>
<h3 id="1-7-2-引入外部配置类"><a href="#1-7-2-引入外部配置类" class="headerlink" title="1.7.2 引入外部配置类"></a>1.7.2 引入外部配置类</h3><p>如果把所有的第三方 bean 都配置到 Spring 的配置类 <code>SpringConfig</code> 中，虽然可以，但是不利于代码阅读和分类管理，所有我们就想能不能按照类别将这些bean配置到不同的配置类中?</p>
<p>对于数据源的bean,我们新建一个 <code>JdbcConfig</code> 配置类，并把数据源配置到该类下。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        ds.setDriverClassName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        ds.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/spring_db&quot;</span>);</span><br><span class="line">        ds.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        ds.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在的问题是，这个配置类如何能被 Spring 配置类加载到，并创建 DataSource 对象在 IOC 容器中?</p>
<p>针对这个问题，有两个解决方案:</p>
<ol>
<li>使用包扫描引入</li>
<li>使用 <code>@Import</code> 引入</li>
</ol>
<blockquote>
<p>使用包扫描引入</p>
</blockquote>
<p>a. 在Spring的配置类上添加包扫描</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.muyoukule.Config&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>b. 在 JdbcConfig 上添加配置注解</p>
<p>JdbcConfig 类要放入到 <code>com.muyoukule.Config</code> 包下，需要被 Spring 的配置类扫描到即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        ds.setDriverClassName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        ds.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/spring_db&quot;</span>);</span><br><span class="line">        ds.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        ds.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>c. 运行程序</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	CreateTime:&quot;2023-03-16 15:22:46&quot;,</span><br><span class="line">	ActiveCount:0,</span><br><span class="line">	PoolingCount:0,</span><br><span class="line">	CreateCount:0,</span><br><span class="line">	DestroyCount:0,</span><br><span class="line">	CloseCount:0,</span><br><span class="line">	ConnectCount:0,</span><br><span class="line">	Connections:[</span><br><span class="line">	]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这种方式虽然能够扫描到，但是不能很快的知晓都引入了哪些配置类，所有这种方式不推荐使用。</p>
<blockquote>
<p>使用 @Import 引入</p>
</blockquote>
<p>方案一实现起来有点小复杂，Spring 早就想到了这一点，于是又给我们提供了第二种方案。</p>
<p>这种方案可以不用加 <code>@Configuration</code> 注解，但是必须在Spring配置类上使用 <code>@Import</code> 注解手动引入需要加载的配置类</p>
<p>a. 去除JdbcConfig类上的注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        ds.setDriverClassName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        ds.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/spring_db&quot;</span>);</span><br><span class="line">        ds.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        ds.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>b. 在Spring配置类中引入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//@ComponentScan(&quot;com.muyoukule.Config&quot;)</span></span><br><span class="line"><span class="meta">@Import(&#123;JdbcConfig.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意:</strong></p>
<ul>
<li><p>扫描注解可以移除</p>
</li>
<li><p><code>@Import</code> 参数需要的是一个数组，可以引入多个配置类。</p>
</li>
<li><p><code>@Import</code> 注解在配置类中只能写一次，下面的方式是不允许的😥</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//@ComponentScan(&quot;com.zxq.config&quot;)</span></span><br><span class="line"><span class="meta">@Import(JdbcConfig.class)</span></span><br><span class="line"><span class="meta">@Import(Xxx.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>c. 运行程序</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	CreateTime:&quot;2024-03-16 15:27:17&quot;,</span><br><span class="line">	ActiveCount:0,</span><br><span class="line">	PoolingCount:0,</span><br><span class="line">	CreateCount:0,</span><br><span class="line">	DestroyCount:0,</span><br><span class="line">	CloseCount:0,</span><br><span class="line">	ConnectCount:0,</span><br><span class="line">	Connections:[</span><br><span class="line">	]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-7-3-注解开发实现为第三方bean注入资源"><a href="#1-7-3-注解开发实现为第三方bean注入资源" class="headerlink" title="1.7.3 注解开发实现为第三方bean注入资源"></a>1.7.3 注解开发实现为第三方bean注入资源</h3><p>在使用 @Bean 创建 bean 对象的时候，如果方法在创建的过程中需要其他资源该怎么办?</p>
<p>这些资源会有两大类，分别是 <code>简单数据类型</code>  和 <code>引用数据类型</code> 。</p>
<h4 id="1-7-3-1-简单数据类型"><a href="#1-7-3-1-简单数据类型" class="headerlink" title="1.7.3.1 简单数据类型"></a>1.7.3.1 简单数据类型</h4><p>对于下面代码关于数据库的四要素不应该写死在代码中，应该是从properties配置文件中读取。如何来优化下面的代码?</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        ds.setDriverClassName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        ds.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/spring_db&quot;</span>);</span><br><span class="line">        ds.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        ds.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注入简单数据类型</p>
</blockquote>
<p>a. 类中提供四个属性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfig</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        ds.setDriverClassName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        ds.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/spring_db&quot;</span>);</span><br><span class="line">        ds.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        ds.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>b. 使用 @Value 注解引入值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;com.mysql.jdbc.Driver&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    <span class="meta">@Value(&quot;jdbc:mysql://localhost:3306/spring_db&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Value(&quot;root&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="meta">@Value(&quot;password&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        ds.setDriverClassName(driver);</span><br><span class="line">        ds.setUrl(url);</span><br><span class="line">        ds.setUsername(userName);</span><br><span class="line">        ds.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>扩展</p>
</blockquote>
<p>现在的数据库连接四要素还是写在代码中，需要做的是将这些内容提取到jdbc.properties配置文件，该如何实现?</p>
<ol>
<li><p>resources目录下添加 <code>jdbc.properties</code> </p>
</li>
<li><p>配置文件中提供四个键值对分别是数据库的四要素</p>
</li>
<li><p>使用 <code>@PropertySource</code> 加载 jdbc.properties 配置文件</p>
</li>
<li><p>修改 <code>@Value</code> 注解属性的值，将其修改为<code>$&#123;key&#125;</code>，key 就是键值对中的键的值</p>
</li>
</ol>
<h4 id="1-7-3-2-引用数据类型"><a href="#1-7-3-2-引用数据类型" class="headerlink" title="1.7.3.2 引用数据类型"></a>1.7.3.2 引用数据类型</h4><p>假设在构建 DataSource 对象的时候，需要用到 BookDao 对象，该如何把 BookDao 对象注入进方法内让其使用呢?</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        ds.setDriverClassName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        ds.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/spring_db&quot;</span>);</span><br><span class="line">        ds.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        ds.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注入引用数据类型</p>
</blockquote>
<p>a. 在 SpringConfig 中扫描 BookDao</p>
<p>扫描的目的是让 Spring 能管理到 BookDao ,也就是说要让 IOC 容器中有一个 bookDao 对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.muyoukule.Dao&quot;)</span></span><br><span class="line"><span class="meta">@Import(&#123;JdbcConfig.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>b. 在 JdbcConfig 类的方法上添加参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">(BookDao bookDao)</span> &#123;</span><br><span class="line">        System.out.println(bookDao);</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        ds.setDriverClassName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        ds.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/spring_db&quot;</span>);</span><br><span class="line">        ds.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        ds.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>引用类型注入只需要为bean定义方法设置形参即可，容器会根据类型 <code>byType</code> 自动装配对象。</p>
<p>c. 运行程序</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">com.muyoukule.Dao.BookDaoImpl@6572421</span><br><span class="line">&#123;</span><br><span class="line">	CreateTime:&quot;2023-03-16 15:38:04&quot;,</span><br><span class="line">	ActiveCount:0,</span><br><span class="line">	PoolingCount:0,</span><br><span class="line">	CreateCount:0,</span><br><span class="line">	DestroyCount:0,</span><br><span class="line">	CloseCount:0,</span><br><span class="line">	ConnectCount:0,</span><br><span class="line">	Connections:[</span><br><span class="line">	]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="2-面向切面编程AOP"><a href="#2-面向切面编程AOP" class="headerlink" title="2. 面向切面编程AOP"></a>2. 面向切面编程AOP</h1><p>IoC使软件组件松耦合。AOP让你能够捕捉系统中经常使用的功能，把它转化成组件。</p>
<p>AOP（Aspect Oriented Programming）：面向切面编程，面向方面编程。（AOP是一种编程技术）</p>
<p>AOP 是对OOP的补充延伸。</p>
<p>AOP 底层使用的就是动态代理来实现的。</p>
<p>Spring 的 AOP 使用的动态代理是：JDK 动态代理 + CGLIB 动态代理技术。Spring 在这两种动态代理中灵活切换，如果是代理接口，会默认使用 JDK 动态代理，如果要代理某个类，这个类没有实现接口，就会切换使用 CGLIB。当然，你也可以强制通过一些配置让 Spring 只使用 CGLIB。</p>
<h2 id="2-1-AOP介绍"><a href="#2-1-AOP介绍" class="headerlink" title="2.1 AOP介绍"></a>2.1 AOP介绍</h2><p>一般一个系统当中都会有一些系统服务，例如：日志、事务管理、安全等。这些系统服务被称为：<strong>交叉业务</strong></p>
<p>这些<strong>交叉业务</strong>几乎是通用的，不管你是做银行账户转账，还是删除用户数据。日志、事务管理、安全，这些都是需要做的。</p>
<p>如果在每一个业务处理过程当中，都掺杂这些交叉业务代码进去的话，存在两方面问题：</p>
<ol>
<li>交叉业务代码在多个业务流程中反复出现，显然这个交叉业务代码没有得到复用。并且修改这些交叉业务代码的话，需要修改多处。</li>
<li>程序员无法专注核心业务代码的编写，在编写核心业务代码的同时还需要处理这些交叉业务。</li>
</ol>
<p>使用AOP可以很轻松的解决以上问题。</p>
<p>请看下图，可以帮助你快速理解AOP的思想：</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/accidence-spring/%E7%90%86%E8%A7%A3AOP%E7%9A%84%E6%80%9D%E6%83%B3.png" style="zoom:67%;">

<p><strong>用一句话总结AOP：将与核心业务无关的代码独立的抽取出来，形成一个独立的组件，然后以横向交叉的方式应用到业务流程当中的过程被称为AOP。</strong></p>
<p>AOP的优点：</p>
<ul>
<li>代码复用性增强。</li>
<li>代码易维护。</li>
<li>使开发者更关注业务逻辑。</li>
</ul>
<h2 id="2-2-AOP的七大术语"><a href="#2-2-AOP的七大术语" class="headerlink" title="2.2 AOP的七大术语"></a>2.2 AOP的七大术语</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">do1</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;do 1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">do2</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;do 2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">do3</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;do 3&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">do4</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;do 4&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">do5</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;do 5&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 核心业务方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">()</span> &#123;</span><br><span class="line">        do1();</span><br><span class="line">        do2();</span><br><span class="line">        do3();</span><br><span class="line">        do5();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>连接点 Joinpoint</p>
<ul>
<li>在程序的整个执行流程中，可以织入切面的位置。方法的执行前后，异常抛出之后等位置。</li>
</ul>
</li>
<li><p>切点 Pointcut</p>
<ul>
<li>在程序执行流程中，真正织入切面的方法。（一个切点对应多个连接点）</li>
</ul>
</li>
<li><p>通知 Advice</p>
<ul>
<li><p>通知又叫增强，就是具体你要织入的代码。</p>
</li>
<li><p>通知包括：</p>
<ul>
<li>前置通知</li>
<li>后置通知</li>
<li>环绕通知</li>
<li>异常通知</li>
<li>最终通知</li>
</ul>
</li>
</ul>
</li>
<li><p>切面 Aspect</p>
<ul>
<li>切点 + 通知就是切面。</li>
</ul>
</li>
<li><p>织入 Weaving</p>
<ul>
<li>把通知应用到目标对象上的过程。</li>
</ul>
</li>
<li><p>代理对象 Proxy</p>
<ul>
<li>一个目标对象被织入通知后产生的新对象。</li>
</ul>
</li>
<li><p>目标对象 Target</p>
<ul>
<li>被织入通知的对象。</li>
</ul>
</li>
</ul>
<p>通过下图，大家可以很好的理解AOP的相关术语：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/accidence-spring/%E7%90%86%E8%A7%A3AOP%E7%9A%84%E7%9B%B8%E5%85%B3%E6%9C%AF%E8%AF%AD.png"></p>
<h2 id="2-3-切点表达式"><a href="#2-3-切点表达式" class="headerlink" title="2.3 切点表达式"></a>2.3 切点表达式</h2><p>切点表达式用来定义通知（Advice）往哪些方法上切入。</p>
<p>切入点表达式语法格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">execution([访问控制权限修饰符] 返回值类型 [全限定类名]方法名(形式参数列表) [异常])</span><br></pre></td></tr></table></figure>

<p>访问控制权限修饰符：</p>
<ul>
<li>可选项。</li>
<li>没写，就是4个权限都包括。</li>
<li>写 public 就表示只包括公开的方法。</li>
</ul>
<p>返回值类型：</p>
<ul>
<li>必填项。</li>
<li>* 表示返回值类型任意。</li>
</ul>
<p>全限定类名：</p>
<ul>
<li>可选项。</li>
<li>两个点“..”代表当前包以及子包下的所有类。</li>
<li>省略时表示所有的类。</li>
</ul>
<p>方法名：</p>
<ul>
<li>必填项。</li>
<li>*表示所有方法。</li>
<li>set*表示所有的set方法。</li>
</ul>
<p>形式参数列表：</p>
<ul>
<li><p>必填项</p>
</li>
<li><p>() 表示没有参数的方法</p>
</li>
<li><p>(..) 参数类型和个数随意的方法</p>
</li>
<li><p>(*) 只有一个参数的方法</p>
</li>
<li><p>(*, String) 第一个参数类型随意，第二个参数是String的。</p>
</li>
</ul>
<p>异常：</p>
<ul>
<li>可选项。</li>
<li>省略时表示任意异常类型。</li>
</ul>
<p>理解以下的切点表达式：</p>
<p>Service包下所有的类中以 delete 开始的所有方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">execution(<span class="keyword">public</span> * com.muyoukule.Service.*.delete*(..))</span><br></pre></td></tr></table></figure>

<p>Mall包下所有的类的所有的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">execution(* com.muyoukule.Mall..*(..))</span><br></pre></td></tr></table></figure>

<p>所有类的所有方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">execution(* *(..))</span><br></pre></td></tr></table></figure>

<h2 id="2-4-使用Spring的AOP"><a href="#2-4-使用Spring的AOP" class="headerlink" title="2.4 使用Spring的AOP"></a>2.4 使用Spring的AOP</h2><p>Spring对AOP的实现包括以下3种方式：</p>
<ul>
<li><strong>第一种方式：Spring框架结合AspectJ框架实现的AOP，基于注解方式。</strong></li>
<li><strong>第二种方式：Spring框架结合AspectJ框架实现的AOP，基于XML方式。</strong></li>
<li>第三种方式：Spring框架自己实现的AOP，基于XML配置方式。</li>
</ul>
<p>实际开发中，都是 Spring+AspectJ 来实现 AOP。所以我们重点学习第一种和第二种方式。</p>
<p>什么是AspectJ？（Eclipse组织的一个支持AOP的框架。AspectJ框架是独立于Spring框架之外的一个框架，Spring框架用了AspectJ） </p>
<blockquote>
<p>环境准备</p>
</blockquote>
<p>a. 使用Spring+AspectJ的AOP需要引入的依赖，由于在<code>spring-context</code>中已经包含了<code>spring aop</code>依赖，所以只需引入以下依赖：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/accidence-spring/aop%E7%9A%84%E4%BE%9D%E8%B5%96.png"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--spring context依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.27<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--spring aspects依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.27<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--junit--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>b. Spring配置文件 <code>spring.xml</code> 中添加 <code>context</code> 命名空间和 <code>aop</code> 命名空间</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-4-1-基于AspectJ的AOP注解式开发"><a href="#2-4-1-基于AspectJ的AOP注解式开发" class="headerlink" title="2.4.1 基于AspectJ的AOP注解式开发"></a>2.4.1 基于AspectJ的AOP注解式开发</h3><blockquote>
<p>实现步骤</p>
</blockquote>
<p>a. 定义目标类以及目标方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 目标类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderService</span> &#123;</span><br><span class="line">    <span class="comment">// 目标方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">generate</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;订单已生成！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>b. 定义切面类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 切面类</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspect</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>c. 目标类和切面类都纳入spring bean管理</p>
<ul>
<li><p>在目标类 OrderService 上添加 <code>@Service</code> 注解。</p>
</li>
<li><p>在切面类 MyAspect 类上添加 <code>@Component</code> 注解。</p>
</li>
</ul>
<p>d. 在spring配置文件中添加组建扫描</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--开启组件扫描--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.muyoukule.Service,com.muyoukule.Aspect&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>e. 在切面类中添加通知</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 切面类</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspect</span> &#123;</span><br><span class="line">    <span class="comment">// 这就是需要增强的代码（通知）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">advice</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是一个通知&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>f. 在通知上添加切点表达式（通知+切点&#x3D;切面）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 切面类</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspect</span> &#123;</span><br><span class="line">    <span class="comment">// 切点表达式</span></span><br><span class="line">    <span class="meta">@Before(&quot;execution(* com.muyoukule.Service.OrderService.*(..))&quot;)</span></span><br><span class="line">    <span class="comment">// 这就是需要增强的代码（通知）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">advice</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是一个通知&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>PS：注解 <code>@Before</code> 表示前置通知。</strong></p>
<p>g. 在 spring 配置文件中启用自动代理</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--开启组件扫描--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.muyoukule.Service&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--开启自动代理--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> <span class="attr">proxy-target-class</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>&lt;aop:aspectj-autoproxy  proxy-target-class=&quot;true&quot;/&gt;</code>  开启自动代理之后，凡是带有 <code>@Aspect</code> 注解的 bean 都会生成代理对象。</p>
<p><code>proxy-target-class=&quot;true&quot;</code> 表示采用cglib动态代理。</p>
<p><code>proxy-target-class=&quot;false&quot;</code> 表示采用 jdk 动态代理。默认值是 false。即使写成 false，当没有接口的时候，也会自动选择 cglib 生成代理类。</p>
<p>h. 测试程序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAOP</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring.xml&quot;</span>);</span><br><span class="line">    <span class="type">OrderService</span> <span class="variable">orderService</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;orderService&quot;</span>, OrderService.class);</span><br><span class="line">    orderService.generate();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>i. 运行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">我是一个通知</span><br><span class="line">订单已生成！</span><br></pre></td></tr></table></figure>

<blockquote>
<p>通知类型</p>
</blockquote>
<p>通知类型包括：</p>
<ul>
<li>前置通知：<code>@Before</code> 目标方法执行之前的通知</li>
<li>后置通知：<code>@AfterReturning</code> 目标方法执行之后的通知</li>
<li>环绕通知：<code>@Around</code> 目标方法之前添加通知，同时目标方法执行之后添加通知。</li>
<li>异常通知：<code>@AfterThrowing</code> 发生异常之后执行的通知</li>
<li>最终通知：<code>@After</code> 放在 finally 语句块中的通知</li>
</ul>
<p>接下来，改写程序来测试这几个通知的执行顺序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 切面类</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;execution(* com.muyoukule.Service.OrderService.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">aroundAdvice</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕通知开始&quot;</span>);</span><br><span class="line">        <span class="comment">// 执行目标方法。</span></span><br><span class="line">        proceedingJoinPoint.proceed();</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕通知结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;execution(* com.muyoukule.Service.OrderService.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeAdvice</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;前置通知&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning(&quot;execution(* com.muyoukule.Service.OrderService.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturningAdvice</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;后置通知&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterThrowing(&quot;execution(* com.muyoukule.Service.OrderService.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterThrowingAdvice</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;异常通知&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(&quot;execution(* com.muyoukule.Service.OrderService.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterAdvice</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;最终通知&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行测试，结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">环绕通知开始</span><br><span class="line">前置通知</span><br><span class="line">订单已生成！</span><br><span class="line">后置通知</span><br><span class="line">最终通知</span><br><span class="line">环绕通知结束</span><br></pre></td></tr></table></figure>

<p>结果中没有异常通知，这是因为目标程序执行过程中没有发生异常。</p>
<p>尝试让目标方法发生异常</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 目标类</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderService</span> &#123;</span><br><span class="line">    <span class="comment">// 目标方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">generate</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;订单已生成！&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">1</span> == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;模拟异常发生&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再次执行测试程序</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">环绕通知开始</span><br><span class="line">前置通知</span><br><span class="line">订单已生成！</span><br><span class="line">异常通知</span><br><span class="line">最终通知</span><br><span class="line"></span><br><span class="line">java.lang.RuntimeException: 模拟异常发生</span><br><span class="line"></span><br><span class="line">    // --snip--</span><br></pre></td></tr></table></figure>

<p>通过测试得知，当发生异常之后，最终通知也会执行，因为最终通知 <code>@After</code> 会出现在 finally 语句块中。出现异常之后，后置通知和环绕通知的结束部分不会执行。</p>
<blockquote>
<p>切面的先后顺序</p>
</blockquote>
<p>我们知道，业务流程当中不一定只有一个切面，可能有的切面控制事务，有的记录日志，有的进行安全控制，如果多个切面的话，顺序如何控制：可以使用 <code>@Order</code> 注解来标识切面类，为 <code>@Order</code> 注解的 value 指定一个整数型的数字，数字越小，优先级越高。</p>
<p>a. 再定义一个切面类，并设置优先级</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Order(1)</span> <span class="comment">//设置优先级</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">YourAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;execution(* com.muyoukule.Service.OrderService.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">aroundAdvice</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;YourAspect环绕通知开始&quot;</span>);</span><br><span class="line">        <span class="comment">// 执行目标方法。</span></span><br><span class="line">        proceedingJoinPoint.proceed();</span><br><span class="line">        System.out.println(<span class="string">&quot;YourAspect环绕通知结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;execution(* com.muyoukule.Service.OrderService.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeAdvice</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;YourAspect前置通知&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning(&quot;execution(* com.muyoukule.Service.OrderService.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturningAdvice</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;YourAspect后置通知&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterThrowing(&quot;execution(* com.muyoukule.Service.OrderService.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterThrowingAdvice</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;YourAspect异常通知&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(&quot;execution(* com.muyoukule.Service.OrderService.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterAdvice</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;YourAspect最终通知&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>b. 设置切面类 MyAspect 的优先级</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 切面类</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Order(2)</span> <span class="comment">//设置优先级</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>c. 执行测试程序</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">YourAspect环绕通知开始</span><br><span class="line">YourAspect前置通知</span><br><span class="line">环绕通知开始</span><br><span class="line">前置通知</span><br><span class="line">订单已生成！</span><br><span class="line">后置通知</span><br><span class="line">最终通知</span><br><span class="line">环绕通知结束</span><br><span class="line">YourAspect后置通知</span><br><span class="line">YourAspect最终通知</span><br><span class="line">YourAspect环绕通知结束</span><br></pre></td></tr></table></figure>

<p>通过修改 <code>@Order</code> 注解的整数值来切换顺序，执行测试程序：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">环绕通知开始</span><br><span class="line">前置通知</span><br><span class="line">YourAspect环绕通知开始</span><br><span class="line">YourAspect前置通知</span><br><span class="line">订单已生成！</span><br><span class="line">YourAspect后置通知</span><br><span class="line">YourAspect最终通知</span><br><span class="line">YourAspect环绕通知结束</span><br><span class="line">后置通知</span><br><span class="line">最终通知</span><br><span class="line">环绕通知结束</span><br></pre></td></tr></table></figure>

<blockquote>
<p>优化使用切点表达式</p>
</blockquote>
<p>观看刚才代码中的切点表达式，缺点是：</p>
<ul>
<li>切点表达式重复写了多次，没有得到复用。</li>
<li>如果要修改切点表达式，需要修改多处，难维护。</li>
</ul>
<p>可以这样做：将切点表达式单独的定义出来，在需要的位置引入即可。如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 切面类</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Order(2)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义通用的切点表达式</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.muyoukule.Service..*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pointcut</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 这个方法只是一个标记，方法名随意，方法体中也不需要写任何代码。</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;pointcut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">aroundAdvice</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕通知开始&quot;</span>);</span><br><span class="line">        <span class="comment">// 执行目标方法。</span></span><br><span class="line">        proceedingJoinPoint.proceed();</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕通知结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;pointcut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeAdvice</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;前置通知&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用 <code>@Pointcut</code> 注解来定义独立的切点表达式。注意这个 <code>@Pointcut</code> 注解标注的方法随意，只是起到一个能够让 <code>@Pointcut</code> 注解编写的位置。</p>
<p>运行测试</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">环绕通知开始</span><br><span class="line">前置通知</span><br><span class="line">订单已生成！</span><br><span class="line">后置通知</span><br><span class="line">最终通知</span><br><span class="line">环绕通知结束</span><br></pre></td></tr></table></figure>

<blockquote>
<p>全注解式开发AOP</p>
</blockquote>
<p>就是编写一个类，在这个类上面使用大量注解来代替 spring 的配置文件，spring 配置文件消失了，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&#123;&quot;com.muyoukule.Service&quot;, &quot;com.muyoukule.Aspect&quot;&#125;)</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy(proxyTargetClass = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>@EnableAspectJAutoProxy(proxyTargetClass = true)</code> 或者 <code>@EnableAspectJAutoProxy</code> 开启注解格式AOP功能。</li>
<li><code>proxyTargetClass = true</code> 表示采用 cglib 动态代理。</li>
</ul>
<p>测试程序也变化了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAOPWithAllAnnotation</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br><span class="line">    <span class="type">OrderService</span> <span class="variable">orderService</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;orderService&quot;</span>, OrderService.class);</span><br><span class="line">    orderService.generate();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-4-2-基于XML配置方式的AOP（了解）"><a href="#2-4-2-基于XML配置方式的AOP（了解）" class="headerlink" title="2.4.2 基于XML配置方式的AOP（了解）"></a>2.4.2 基于XML配置方式的AOP（了解）</h3><p>a. 编写目标类（不添加注解）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 目标类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VipService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;保存vip信息...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>b. 编写切面类，并且编写通知（不添加 <code>@Component</code> 注解）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 负责计时的切面类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TimerAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">time</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">begin</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="comment">//执行目标</span></span><br><span class="line">        proceedingJoinPoint.proceed();</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;耗时&quot;</span> + (end - begin) + <span class="string">&quot;毫秒&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>c. 编写 <code>spring.xml</code> 配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd                       </span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--纳入spring bean管理--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;vipService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.muyoukule.Service.VipService&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;timerAspect&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.muyoukule.Aspect.TimerAspect&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--aop配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--切点表达式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;p&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.muyoukule.Service.VipService.*(..))&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--切面--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;timerAspect&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--切面=通知 + 切点--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">method</span>=<span class="string">&quot;time&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;p&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>d. 测试程序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAOPXml</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring.xml&quot;</span>);</span><br><span class="line">    <span class="type">VipService</span> <span class="variable">vipService</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;vipService&quot;</span>, VipService.class);</span><br><span class="line">    vipService.add();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>e. 结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">保存vip信息...</span><br><span class="line">耗时9毫秒</span><br></pre></td></tr></table></figure>

<h2 id="2-5-AOP的实际案例：事务处理"><a href="#2-5-AOP的实际案例：事务处理" class="headerlink" title="2.5 AOP的实际案例：事务处理"></a>2.5 AOP的实际案例：事务处理</h2><p>项目中的事务控制是在所难免的。在一个业务流程当中，可能需要多条 DML 语句共同完成，为了保证数据的安全，这多条 DML 语句要么同时成功，要么同时失败。这就需要添加事务控制的代码。例如以下伪代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">class 业务类<span class="number">1</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 业务方法<span class="number">1</span>()&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">// 开启事务</span></span><br><span class="line">            startTransaction();</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 执行核心业务逻辑</span></span><br><span class="line">            step1();</span><br><span class="line">            step2();</span><br><span class="line">            step3();</span><br><span class="line">            ....</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 提交事务</span></span><br><span class="line">            commitTransaction();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            <span class="comment">// 回滚事务</span></span><br><span class="line">            rollbackTransaction();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 业务方法<span class="number">2</span>()&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">// 开启事务</span></span><br><span class="line">            startTransaction();</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 执行核心业务逻辑</span></span><br><span class="line">            step1();</span><br><span class="line">            step2();</span><br><span class="line">            step3();</span><br><span class="line">            ....</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 提交事务</span></span><br><span class="line">            commitTransaction();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            <span class="comment">// 回滚事务</span></span><br><span class="line">            rollbackTransaction();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 业务方法<span class="number">3</span>()&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">// 开启事务</span></span><br><span class="line">            startTransaction();</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 执行核心业务逻辑</span></span><br><span class="line">            step1();</span><br><span class="line">            step2();</span><br><span class="line">            step3();</span><br><span class="line">            ....</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 提交事务</span></span><br><span class="line">            commitTransaction();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            <span class="comment">// 回滚事务</span></span><br><span class="line">            rollbackTransaction();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class 业务类<span class="number">2</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 业务方法<span class="number">1</span>()&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">// 开启事务</span></span><br><span class="line">            startTransaction();</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 执行核心业务逻辑</span></span><br><span class="line">            step1();</span><br><span class="line">            step2();</span><br><span class="line">            step3();</span><br><span class="line">            ....</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 提交事务</span></span><br><span class="line">            commitTransaction();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            <span class="comment">// 回滚事务</span></span><br><span class="line">            rollbackTransaction();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 业务方法<span class="number">2</span>()&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">// 开启事务</span></span><br><span class="line">            startTransaction();</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 执行核心业务逻辑</span></span><br><span class="line">            step1();</span><br><span class="line">            step2();</span><br><span class="line">            step3();</span><br><span class="line">            ....</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 提交事务</span></span><br><span class="line">            commitTransaction();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            <span class="comment">// 回滚事务</span></span><br><span class="line">            rollbackTransaction();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 业务方法<span class="number">3</span>()&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">// 开启事务</span></span><br><span class="line">            startTransaction();</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 执行核心业务逻辑</span></span><br><span class="line">            step1();</span><br><span class="line">            step2();</span><br><span class="line">            step3();</span><br><span class="line">            ....</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 提交事务</span></span><br><span class="line">            commitTransaction();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            <span class="comment">// 回滚事务</span></span><br><span class="line">            rollbackTransaction();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//......</span></span><br></pre></td></tr></table></figure>

<p>可以看到，这些业务类中的每一个业务方法都是需要控制事务的，而控制事务的代码又是固定的格式，都是：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="comment">// 开启事务</span></span><br><span class="line">    startTransaction();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行核心业务逻辑</span></span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提交事务</span></span><br><span class="line">    commitTransaction();</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">    <span class="comment">// 回滚事务</span></span><br><span class="line">    rollbackTransaction();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个控制事务的代码就是和业务逻辑没有关系的 “<strong>交叉业务</strong>” 。以上伪代码当中可以看到这些交叉业务的代码没有得到复用，并且如果这些交叉业务代码需要修改，那必然需要修改多处，难维护，怎么解决？可以采用 AOP 思想解决。可以把以上控制事务的代码作为环绕通知，切入到目标类的方法当中。</p>
<p>a. 有两个业务类，如下</p>
<p>银行账户的业务类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="comment">// 业务类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountService</span> &#123;</span><br><span class="line">    <span class="comment">// 转账业务方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在进行银行账户转账...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 取款业务方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">withdraw</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在进行取款操作...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>订单业务类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="comment">// 业务类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderService</span> &#123;</span><br><span class="line">    <span class="comment">// 生成订单</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">generate</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在生成订单...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 取消订单</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cancel</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在取消订单...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意，以上两个业务类已经纳入spring bean的管理，因为都添加了 <code>@Service</code> 注解。</p>
<p>给以上两个业务类的4个方法添加事务控制代码，使用 AOP 来完成：</p>
<p>b. 事务切面类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="comment">// 事务切面类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TransactionAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;execution(* com.muyoukule.Service..*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">aroundAdvice</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;开启事务&quot;</span>);</span><br><span class="line">            <span class="comment">// 执行目标</span></span><br><span class="line">            proceedingJoinPoint.proceed();</span><br><span class="line">            System.out.println(<span class="string">&quot;提交事务&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;回滚事务&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>c. 编写配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&#123;&quot;com.muyoukule.Service&quot;, &quot;com.muyoukule.Aspect&quot;&#125;)</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy(proxyTargetClass = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个事务控制代码只需要写一次就行了，并且修改起来也没有成本。</p>
<p>d. 编写测试程序：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testTransaction</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br><span class="line">    <span class="type">OrderService</span> <span class="variable">orderService</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;orderService&quot;</span>, OrderService.class);</span><br><span class="line">    <span class="type">AccountService</span> <span class="variable">accountService</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;accountService&quot;</span>, AccountService.class);</span><br><span class="line">    <span class="comment">// 生成订单</span></span><br><span class="line">    orderService.generate();</span><br><span class="line">    <span class="comment">// 取消订单</span></span><br><span class="line">    orderService.cancel();</span><br><span class="line">    <span class="comment">// 转账</span></span><br><span class="line">    accountService.transfer();</span><br><span class="line">    <span class="comment">// 取款</span></span><br><span class="line">    accountService.withdraw();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>e. 运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">开启事务</span><br><span class="line">正在生成订单...</span><br><span class="line">提交事务</span><br><span class="line">开启事务</span><br><span class="line">正在取消订单...</span><br><span class="line">提交事务</span><br><span class="line">开启事务</span><br><span class="line">正在进行银行账户转账...</span><br><span class="line">提交事务</span><br><span class="line">开启事务</span><br><span class="line">正在进行取款操作...</span><br><span class="line">提交事务</span><br></pre></td></tr></table></figure>

<h2 id="2-6-AOP的实际案例：安全日志"><a href="#2-6-AOP的实际案例：安全日志" class="headerlink" title="2.6 AOP的实际案例：安全日志"></a>2.6 AOP的实际案例：安全日志</h2><p>需求是这样的：项目开发结束了，已经上线了。运行正常。客户提出了新的需求：凡事在系统中进行修改操作的，删除操作的，新增操作的，都要把这个人记录下来。因为这几个操作是属于危险行为。例如有业务类和业务方法：</p>
<p>用户业务类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="comment">//用户业务</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getUser</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;获取用户信息...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveUser</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;保存用户...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteUser</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;删除用户...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">modifyUser</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;修改用户...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>商品业务类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 商品业务类</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getProduct</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;获取商品信息....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveProduct</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;保存商品....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteProduct</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;删除商品....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">modifyProduct</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;修改商品....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接下来我们使用aop来解决上面的需求：编写一个负责安全的切面类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.muyoukule.Service..save*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">savePointcut</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.muyoukule.Service..delete*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deletePointcut</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.muyoukule.Service..modify*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">modifyPointcut</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;savePointcut() || deletePointcut() || modifyPointcut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeAdivce</span><span class="params">(JoinPoint joinpoint)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;XXX操作员正在操作&quot;</span> + joinpoint.getSignature().getName() + <span class="string">&quot;方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试程序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSecurity</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br><span class="line">    <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;userService&quot;</span>, UserService.class);</span><br><span class="line">    <span class="type">ProductService</span> <span class="variable">productService</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;productService&quot;</span>, ProductService.class);</span><br><span class="line">    userService.getUser();</span><br><span class="line">    userService.saveUser();</span><br><span class="line">    userService.deleteUser();</span><br><span class="line">    userService.modifyUser();</span><br><span class="line">    productService.getProduct();</span><br><span class="line">    productService.saveProduct();</span><br><span class="line">    productService.deleteProduct();</span><br><span class="line">    productService.modifyProduct();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编写配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&#123;&quot;com.muyoukule.Service&quot;, &quot;com.muyoukule.Aspect&quot;&#125;)</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy(proxyTargetClass = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">获取用户信息</span><br><span class="line">XXX操作员正在操作saveUser方法</span><br><span class="line">保存用户</span><br><span class="line">XXX操作员正在操作deleteUser方法</span><br><span class="line">删除用户</span><br><span class="line">XXX操作员正在操作modifyUser方法</span><br><span class="line">修改用户</span><br><span class="line">获取商品信息</span><br><span class="line">XXX操作员正在操作saveProduct方法</span><br><span class="line">保存商品</span><br><span class="line">XXX操作员正在操作deleteProduct方法</span><br><span class="line">删除商品</span><br><span class="line">XXX操作员正在操作modifyProduct方法</span><br><span class="line">修改商品</span><br></pre></td></tr></table></figure>

<h1 id="3-Spring对事务的支持"><a href="#3-Spring对事务的支持" class="headerlink" title="3. Spring对事务的支持"></a>3. Spring对事务的支持</h1><h2 id="3-1-事务概述"><a href="#3-1-事务概述" class="headerlink" title="3.1 事务概述"></a>3.1 事务概述</h2><ul>
<li><p>什么是事务</p>
<ul>
<li>在一个业务流程当中，通常需要多条DML（insert delete update）语句共同联合才能完成，这多条DML语句必须同时成功，或者同时失败，这样才能保证数据的安全。</li>
<li>多条DML要么同时成功，要么同时失败，这叫做事务。</li>
<li>事务：Transaction（tx）</li>
</ul>
</li>
<li><p>事务的四个处理过程：</p>
<ul>
<li>第一步：开启事务 (start transaction)</li>
<li>第二步：执行核心业务代码</li>
<li>第三步：提交事务（如果核心业务处理过程中没有出现异常）(commit transaction)</li>
<li>第四步：回滚事务（如果核心业务处理过程中出现异常）(rollback transaction)</li>
</ul>
</li>
<li><p>事务的四个特性：</p>
<ul>
<li>A 原子性：事务是最小的工作单元，不可再分。</li>
<li>C 一致性：事务要求要么同时成功，要么同时失败。事务前和事务后的总量不变。</li>
<li>I 隔离性：事务和事务之间因为有隔离性，才可以保证互不干扰。</li>
<li>D 持久性：持久性是事务结束的标志。</li>
</ul>
</li>
<li><p>事务作用：在数据层保障一系列的数据库操作同成功同失败。</p>
</li>
<li><p>Spring事务作用：在数据层或业务层保障一系列的数据库操作同成功同失败。</p>
</li>
</ul>
<h2 id="3-2-Spring事务案例"><a href="#3-2-Spring事务案例" class="headerlink" title="3.2 Spring事务案例"></a>3.2 Spring事务案例</h2><p>数据层有事务我们可以理解，为什么业务层也需要处理事务呢?</p>
<p>举个简单的例子：</p>
<ul>
<li>转账业务会有两次数据层的调用，一次是加钱一次是减钱。</li>
<li>把事务放在数据层，加钱和减钱就有两个事务。</li>
<li>没办法保证加钱和减钱同时成功或者同时失败。</li>
<li>这个时候就需要将事务放在业务层进行处理。</li>
</ul>
<p>Spring 为了管理事务，提供了一个平台事务管理器 <code>PlatformTransactionManager</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PlatformTransactionManager</span> <span class="keyword">extends</span> <span class="title class_">TransactionManager</span> &#123;</span><br><span class="line">    TransactionStatus <span class="title function_">getTransaction</span><span class="params">(<span class="meta">@Nullable</span> TransactionDefinition definition)</span> <span class="keyword">throws</span> TransactionException;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">commit</span><span class="params">(TransactionStatus status)</span> <span class="keyword">throws</span> TransactionException;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">rollback</span><span class="params">(TransactionStatus status)</span> <span class="keyword">throws</span> TransactionException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>commit</code> 是用来提交事务，<code>rollback</code> 是用来回滚事务。</p>
<p><code>PlatformTransactionManager</code> 只是一个接口，Spring还为其提供了一个具体的实现：<code>DataSourceTransactionManager</code></p>
<p>从名称上可以看出，我们只需要给它一个 DataSource 对象，它就可以帮你去在业务层管理事务。其内部采用的是 JDBC 的事务。所以说如果你持久层采用的是JDBC相关的技术，就可以采用这个事务管理器来管理你的事务。而 Mybatis 内部采用的就是 JDBC 的事务，所以后期我们 Spring 整合 Mybatis 就采用的这个 <code>DataSourceTransactionManager</code> 事务管理器。</p>
<p>小Tips😀：关于整合的知识可以在本站搜索查看 <code>accidence-spring-volumeThree</code> 学习。</p>
<h3 id="3-2-1-转账案例-需求分析"><a href="#3-2-1-转账案例-需求分析" class="headerlink" title="3.2.1 转账案例-需求分析"></a>3.2.1 转账案例-需求分析</h3><p>接下来通过一个案例来学习下Spring是如何来管理事务的。</p>
<p>先来分析下需求:</p>
<p>需求: 实现任意两个账户间转账操作</p>
<p>需求微缩: A账户减钱，B账户加钱</p>
<p>为了实现上述的业务需求，我们可以按照下面步骤来实现下：</p>
<ol>
<li>数据层提供基础操作，指定账户减钱（outMoney），指定账户加钱（inMoney）</li>
<li>业务层提供转账操作（transfer），调用减钱与加钱的操作</li>
<li>提供2个账号和操作金额执行转账操作</li>
<li>基于 Spring 整合 MyBatis 环境搭建上述操作</li>
</ol>
<h3 id="3-2-2-转账案例-环境搭建"><a href="#3-2-2-转账案例-环境搭建" class="headerlink" title="3.2.2 转账案例-环境搭建"></a>3.2.2 转账案例-环境搭建</h3><p>a. 准备数据库表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> database spring_db <span class="type">character</span> <span class="keyword">set</span> utf8;</span><br><span class="line">use spring_db;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tbl_account(</span><br><span class="line">    id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">35</span>),</span><br><span class="line">    money <span class="keyword">double</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tbl_account <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;Tom&#x27;</span>,<span class="number">1000</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tbl_account <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;Jerry&#x27;</span>,<span class="number">1000</span>);</span><br></pre></td></tr></table></figure>

<p>b. 创建项目导入jar包，项目的 <code>pom.xml</code> 添加相关依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--spring context依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.27<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.31<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.27<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.27<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.24<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>c. 根据表创建模型类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Account</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Double money;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>d. 创建 Dao 接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AccountDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update(&quot;update tbl_account set money = money + #&#123;money&#125; where name = #&#123;name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">inMoney</span><span class="params">(<span class="meta">@Param(&quot;name&quot;)</span> String name, <span class="meta">@Param(&quot;money&quot;)</span> Double money)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update(&quot;update tbl_account set money = money - #&#123;money&#125; where name = #&#123;name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">outMoney</span><span class="params">(<span class="meta">@Param(&quot;name&quot;)</span> String name, <span class="meta">@Param(&quot;money&quot;)</span> Double money)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>e. 创建 Service 接口和实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AccountService</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转账操作</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> out 传出方</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> in 转入方</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money 金额</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(String out,String in ,Double money)</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">AccountService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(String out,String in ,Double money)</span> &#123;</span><br><span class="line">        accountDao.outMoney(out,money);</span><br><span class="line">        accountDao.inMoney(in,money);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>f. 添加 <code>jdbc.properties</code> 文件</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/spring_db?useSSL=false</span></span><br><span class="line"><span class="attr">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure>

<p>g. 创建 JdbcConfig 配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        ds.setDriverClassName(driver);</span><br><span class="line">        ds.setUrl(url);</span><br><span class="line">        ds.setUsername(userName);</span><br><span class="line">        ds.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>h. 创建 MybatisConfig 配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SqlSessionFactoryBean <span class="title function_">sqlSessionFactory</span><span class="params">(DataSource dataSource)</span> &#123;</span><br><span class="line">        <span class="type">SqlSessionFactoryBean</span> <span class="variable">ssfb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBean</span>();</span><br><span class="line">        ssfb.setTypeAliasesPackage(<span class="string">&quot;com.muyoukule.Entity&quot;</span>);</span><br><span class="line">        ssfb.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> ssfb;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MapperScannerConfigurer <span class="title function_">mapperScannerConfigurer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">MapperScannerConfigurer</span> <span class="variable">msc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MapperScannerConfigurer</span>();</span><br><span class="line">        msc.setBasePackage(<span class="string">&quot;com.muyoukule.Dao&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> msc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>i. 创建S pringConfig 配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.muyoukule&quot;)</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:jdbc.properties&quot;)</span></span><br><span class="line"><span class="meta">@Import(&#123;JdbcConfig.class, MybatisConfig.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>j. 编写测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(classes = SpringConfig.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountServiceTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountService accountService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testTransfer</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        accountService.transfer(<span class="string">&quot;Tom&quot;</span>,<span class="string">&quot;Jerry&quot;</span>,<span class="number">100D</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-2-3-事务管理"><a href="#3-2-3-事务管理" class="headerlink" title="3.2.3 事务管理"></a>3.2.3 事务管理</h3><p>上述环境，运行单元测试类，会执行转账操作，<code>Tom</code>的账户会减少100，<code>Jerry</code>的账户会加100。</p>
<p>这是正常情况下的运行结果，但是如果在转账的过程中出现了异常，如:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">AccountService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(String out,String in ,Double money)</span> &#123;</span><br><span class="line">        accountDao.outMoney(out,money);</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">        accountDao.inMoney(in,money);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个时候就模拟了转账过程中出现异常的情况，正确的操作应该是转账出问题了，<code>Tom</code> 应该还是900，<code>Jerry</code> 应该还是1100，但是真正运行后会发现，并没有像我们想象的那样，<code>Tom</code> 账户为800而 <code>Jerry</code> 还是1100，100块钱凭空消失了，银行乐疯了。如果把转账换个顺序，银行就该哭了。</p>
<p>不管哪种情况，都是不允许出现的，对刚才的结果我们做一个分析:</p>
<ol>
<li><p>程序正常执行时，账户金额A减B加，没有问题</p>
</li>
<li><p>程序出现异常后，转账失败，但是异常之前操作成功，异常之后操作失败，整体业务失败</p>
</li>
</ol>
<p>当程序出问题后，我们需要让事务进行回滚，而且这个事务应该是加在业务层上，而 Spring 的事务管理就是用来解决这类问题的。</p>
<blockquote>
<p>Spring 事务管理具体的实现步骤</p>
</blockquote>
<p>a. 在需要被事务管理的方法上添加注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AccountService</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转账操作</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> out 传出方</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> in 转入方</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money 金额</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//配置当前接口方法具有事务</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(String out,String in ,Double money)</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">AccountService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(String out, String in, Double money)</span> &#123;</span><br><span class="line">        accountDao.outMoney(out, money);</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">        accountDao.inMoney(in, money);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意:</p>
<p><code>@Transactional</code> 可以写在接口类上、接口方法上、实现类上和实现类方法上</p>
<ul>
<li>写在接口类上，该接口的所有实现类的所有方法都会有事务</li>
<li>写在接口方法上，该接口的所有实现类的该方法都会有事务</li>
<li>写在实现类上，该类中的所有方法都会有事务</li>
<li>写在实现类方法上，该方法上有事务</li>
<li>建议写在实现类或实现类的方法上</li>
</ul>
<p>b. 在 JdbcConfig 类中配置事务管理器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfig</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置事务管理器，mybatis使用的是jdbc事务</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PlatformTransactionManager <span class="title function_">transactionManager</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">        <span class="type">DataSourceTransactionManager</span> <span class="variable">transactionManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataSourceTransactionManager</span>();</span><br><span class="line">        transactionManager.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> transactionManager;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong>事务管理器要根据使用技术进行选择，Mybatis 框架使用的是 JDBC 事务，可以直接使用 <code>DataSourceTransactionManager</code> </p>
<p>c. 开启事务注解</p>
<p>在 SpringConfig 的配置类中开启</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.muyoukule&quot;)</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:jdbc.properties&quot;)</span></span><br><span class="line"><span class="meta">@Import(&#123;JdbcConfig.class, MybatisConfig.class&#125;)</span></span><br><span class="line"><span class="comment">//开启注解式事务驱动</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>d. 运行测试类</p>
<p>会发现在转换的业务出现错误后，事务就可以控制回顾，保证数据的正确性。</p>
<h2 id="3-3-Spring事务角色"><a href="#3-3-Spring事务角色" class="headerlink" title="3.3 Spring事务角色"></a>3.3 Spring事务角色</h2><p>这节中我们重点要理解两个概念，分别是 <code>事务管理员</code> 和 <code>事务协调员</code> 。</p>
<ol>
<li>未开启Spring事务之前:</li>
</ol>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/accidence-spring/%E6%9C%AA%E5%BC%80%E5%90%AFSpring%E4%BA%8B%E5%8A%A1%E4%B9%8B%E5%89%8D.png" style="zoom: 50%;">

<ul>
<li>AccountDao 的 outMoney 因为是修改操作，会开启一个事务T1</li>
<li>AccountDao 的 inMoney 因为是修改操作，会开启一个事务T2</li>
<li>AccountService 的 transfer 没有事务，<ul>
<li>运行过程中如果没有抛出异常，则T1和T2都正常提交，数据正确</li>
<li>如果在两个方法中间抛出异常，T1因为执行成功提交事务，T2因为抛异常不会被执行</li>
<li>就会导致数据出现错误</li>
</ul>
</li>
</ul>
<ol start="2">
<li>开启Spring的事务管理后</li>
</ol>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/accidence-spring/%E5%BC%80%E5%90%AFSpring%E7%9A%84%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86%E5%90%8E.png" style="zoom: 50%;">

<ul>
<li>transfer上添加了 <code>@Transactional</code> 注解，在该方法上就会有一个事务T</li>
<li>AccountDao的 outMoney 方法的事务T1加入到 transfer 的事务T中</li>
<li>AccountDao的 inMoney 方法的事务T2加入到 transfer 的事务T中</li>
<li>这样就保证他们在同一个事务中，当业务层中出现异常，整个事务就会回滚，保证数据的准确性。</li>
</ul>
<p>通过上面例子的分析，我们就可以得到如下概念：</p>
<ul>
<li>事务管理员：发起事务方，在Spring中通常指代业务层开启事务的方法</li>
<li>事务协调员：加入事务方，在Spring中通常指代数据层方法，也可以是业务层方法</li>
</ul>
<p>注意：</p>
<p>目前的事务管理是基于 <code>DataSourceTransactionManager</code> 和 <code>SqlSessionFactoryBean</code> 使用的是同一个数据源。</p>
<h2 id="3-4-Spring事务属性"><a href="#3-4-Spring事务属性" class="headerlink" title="3.4 Spring事务属性"></a>3.4 Spring事务属性</h2><p>上一节我们介绍了两个概念，事务的管理员和事务的协同员，对于这两个概念具体做什么的，我们待会通过案例来使用下。除了这两个概念，还有就是事务的其他相关配置都有哪些，就是我们接下来要学习的内容。</p>
<p>在这一节中，我们主要学习三部分内容 <code>事务配置</code> 、 <code>转账业务追加日志</code> 、 <code>事务传播行为</code>。</p>
<h3 id="3-4-1-事务配置"><a href="#3-4-1-事务配置" class="headerlink" title="3.4.1 事务配置"></a>3.4.1 事务配置</h3><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/accidence-spring/Spring%E4%BA%8B%E5%8A%A1%E9%85%8D%E7%BD%AE.png" style="zoom: 50%;">

<p>上面这些属性都可以在 <code>@Transactional</code> 注解的参数上进行设置：</p>
<ul>
<li><p>readOnly：true 只读事务，false 读写事务，增删改要设为 false,查询设为 true。</p>
</li>
<li><p>timeout：设置超时时间单位秒，在多长时间之内事务没有提交成功就自动回滚，-1表示不设置超时时间。</p>
</li>
<li><p>rollbackFor：当出现指定异常进行事务回滚</p>
</li>
<li><p>noRollbackFor：当出现指定异常不进行事务回滚</p>
<ul>
<li><p>思考：出现异常事务会自动回滚，这个是我们之前就已经知道的</p>
</li>
<li><p>noRollbackFor 是设定对于指定的异常不回滚，这个好理解</p>
</li>
<li><p>rollbackFor 是指定回滚异常，对于异常事务不应该都回滚么，为什么还要指定?</p>
<ul>
<li><p>这块需要更正一个知识点，并不是所有的异常都会回滚事务，比如下面的代码就不会回滚</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AccountService</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转账操作</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> out   传出方</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> in    转入方</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money 金额</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//配置当前接口方法具有事务</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(String out, String in, Double money)</span> <span class="keyword">throws</span> IOException;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">AccountService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(String out, String in, Double money)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        accountDao.outMoney(out, money);</span><br><span class="line">        <span class="comment">//int i = 1/0; //这个异常事务会回滚</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IOException</span>(); <span class="comment">//这个异常事务就不会回滚</span></span><br><span class="line">        &#125;</span><br><span class="line">        accountDao.inMoney(in, money);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li><p>出现这个问题的原因是，Spring的事务只会对 <code>Error</code> 异常 和 <code>RuntimeException</code> 异常及其子类进行事务回顾，其他的异常类型是不会回滚的，对应 IOException 不符合上述条件所以不回滚</p>
<ul>
<li><p>此时就可以使用 rollbackFor 属性来设置出现 <code>IOException</code> 异常不回滚</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">AccountService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = &#123;IOException.class&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(String out, String in, Double money)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        accountDao.outMoney(out, money);</span><br><span class="line">        <span class="comment">//int i = 1/0; //这个异常事务会回滚</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IOException</span>(); <span class="comment">//这个异常事务就不会回滚</span></span><br><span class="line">        &#125;</span><br><span class="line">        accountDao.inMoney(in, money);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>rollbackForClassName 等同于 rollbackFor，只不过属性为异常的类全名字符串</p>
</li>
<li><p>noRollbackForClassName 等同于 noRollbackFor，只不过属性为异常的类全名字符串</p>
</li>
<li><p>isolation 设置事务的隔离级别</p>
<ul>
<li>DEFAULT：默认隔离级别, 会采用数据库的隔离级别</li>
<li>READ_UNCOMMITTED：读未提交</li>
<li>READ_COMMITTED：读已提交</li>
<li>REPEATABLE_READ：重复读取</li>
<li>SERIALIZABLE：串行化</li>
</ul>
</li>
</ul>
<p>介绍完上述属性后，还有最后一个事务的传播行为，为了讲解该属性的设置，我们需要完成下面的案例。</p>
<h3 id="3-4-2-转账业务追加日志案例"><a href="#3-4-2-转账业务追加日志案例" class="headerlink" title="3.4.2 转账业务追加日志案例"></a>3.4.2 转账业务追加日志案例</h3><h4 id="3-4-2-1-需求分析"><a href="#3-4-2-1-需求分析" class="headerlink" title="3.4.2.1 需求分析"></a>3.4.2.1 需求分析</h4><p>在前面的转案例的基础上添加新的需求，完成转账后记录日志。</p>
<ul>
<li>需求：实现任意两个账户间转账操作，并对每次转账操作在数据库进行留痕</li>
<li>需求微缩：A账户减钱，B账户加钱，数据库记录日志</li>
</ul>
<p>基于上述的业务需求，我们来分析下该如何实现:</p>
<ol>
<li><p>基于转账操作案例添加日志模块，实现数据库中记录日志</p>
</li>
<li><p>业务层转账操作（transfer），调用减钱、加钱与记录日志功能</p>
</li>
</ol>
<p>需要注意一点就是，我们这个案例的预期效果为：无论转账操作是否成功，均进行转账操作的日志留痕。</p>
<h4 id="3-4-2-2-环境准备"><a href="#3-4-2-2-环境准备" class="headerlink" title="3.4.2.2 环境准备"></a>3.4.2.2 环境准备</h4><p>该环境是基于转账环境来完成的，在其基础上，我们继续往下写：</p>
<p>a. 创建日志表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tbl_log(</span><br><span class="line">   id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">   info <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">   createDate datetime</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>b. 添加 LogDao 接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">LogDao</span> &#123;</span><br><span class="line">    <span class="meta">@Insert(&quot;insert into tbl_log (info,createDate) values(#&#123;info&#125;,now())&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">log</span><span class="params">(String info)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>c. 添加 LogService 接口与实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">LogService</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">log</span><span class="params">(String out, String in, Double money)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">LogService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LogDao logDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">log</span><span class="params">(String out, String in, Double money)</span> &#123;</span><br><span class="line">        logDao.log(<span class="string">&quot;转账操作由&quot;</span> + out + <span class="string">&quot;到&quot;</span> + in + <span class="string">&quot;,金额：&quot;</span> + money);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>d. 在转账的业务中添加记录日志</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AccountService</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转账操作</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> out   传出方</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> in    转入方</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money 金额</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//配置当前接口方法具有事务</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(String out, String in, Double money)</span> <span class="keyword">throws</span> IOException;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">AccountService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LogService logService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(String out, String in, Double money)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            accountDao.outMoney(out, money);</span><br><span class="line">            accountDao.inMoney(in, money);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            logService.log(out, in, money);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>e. 运行程序</p>
<ul>
<li><p>当程序正常运行，tbl_account 表中转账成功，tbl_log 表中日志记录成功</p>
</li>
<li><p>当转账业务之间出现异常(int i &#x3D;1&#x2F;0)，转账失败，tbl_account 成功回滚，但是 tbl_log 表未添加数据</p>
</li>
<li><p>这个结果和我们想要的不一样，什么原因？该如何解决？</p>
</li>
<li><p>失败原因：日志的记录与转账操作隶属同一个事务，同成功同失败</p>
</li>
<li><p>最终效果：无论转账操作是否成功，日志必须保留</p>
</li>
</ul>
<h3 id="3-4-3-事务传播行为"><a href="#3-4-3-事务传播行为" class="headerlink" title="3.4.3 事务传播行为"></a>3.4.3 事务传播行为</h3><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/accidence-spring/%E4%BA%8B%E5%8A%A1%E4%BC%A0%E6%92%AD%E8%A1%8C%E4%B8%BA.png" style="zoom:50%;">

<p>对于上述案例的分析：</p>
<ul>
<li>log 方法、inMoney 方法和 outMoney 方法都属于增删改，分别有事务T1，T2，T3</li>
<li>transfer 因为加了 <code>@Transactional</code> 注解，也开启了事务T</li>
<li>前面我们讲过 Spring 事务会把T1，T2，T3都加入到事务T中</li>
<li>所以当转账失败后，所有的事务都回滚，导致日志没有记录下来</li>
<li>这和我们的需求不符，这个时候我们就想能不能让 log 方法单独是一个事务呢?</li>
</ul>
<p>要想解决这个问题，就需要用到事务传播行为，所谓的事务传播行为指的是：</p>
<p>事务传播行为：事务协调员对事务管理员所携带事务的处理态度。</p>
<p>具体如何解决，就需要用到之前我们没有说的 <code>propagation属性</code>。</p>
<p>a. 修改 logService 改变事务的传播行为</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">LogService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LogDao logDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//propagation设置事务属性：传播行为设置为当前操作需要新事务</span></span><br><span class="line">    <span class="meta">@Transactional(propagation = Propagation.REQUIRES_NEW)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">log</span><span class="params">(String out, String in, Double money)</span> &#123;</span><br><span class="line">        logDao.log(<span class="string">&quot;转账操作由&quot;</span> + out + <span class="string">&quot;到&quot;</span> + in + <span class="string">&quot;,金额：&quot;</span> + money);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行后，就能实现我们想要的结果，不管转账是否成功，都会记录日志。</p>
<p>b. 事务传播行为的可选值</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/accidence-spring/%E4%BA%8B%E5%8A%A1%E4%BC%A0%E6%92%AD%E8%A1%8C%E4%B8%BA%E7%9A%84%E5%8F%AF%E9%80%89%E5%80%BC.png" style="zoom: 50%;">

<p>对于我们开发实际中使用的话，因为默认值需要事务是常态的。根据开发过程选择其他的就可以了，例如案例中需要新事务就需要手工配置。其实入账和出账操作上也有事务，采用的就是默认值。</p>
]]></content>
      <categories>
        <category>SSM</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker教程</title>
    <url>/posts/Docker/</url>
    <content><![CDATA[<p>Docker 官网：<a href="https://www.docker.com/">https://www.docker.com</a></p>
<p>参考视频：<a href="https://www.bilibili.com/video/BV1HP4118797/">黑马程序员Docker快速入门到项目部署，MySQL部署+Nginx部署+docker自定义镜像+DockerCompose项目实战一套搞定</a></p>
<h1 id="1-初识-Docker"><a href="#1-初识-Docker" class="headerlink" title="1. 初识 Docker"></a>1. 初识 Docker</h1><h2 id="1-1-什么是-Docker"><a href="#1-1-什么是-Docker" class="headerlink" title="1.1 什么是 Docker"></a>1.1 什么是 Docker</h2><p>Docker 是一个开源的应用容器引擎，它可以让开发者打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何 Linux 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间没有任何接口(类似 iPhon e的 app)，几乎没有性能开销，可以很容易地在机器和数据中心中运行。最重要的是，容器性能开销极低。</p>
<p>Docker 的主要特点包括：</p>
<ul>
<li><strong>轻量级与可移植性</strong>：Docker 容器是基于 Linux 内核的虚拟化技术，不依赖于特定的硬件架构或操作系统。因此，它可以轻松地从一个环境迁移到另一个环境，实现应用的快速部署和扩展。</li>
<li><strong>版本控制</strong>：Docker 允许开发者像管理代码一样管理基础设施。这意味着可以使用版本控制工具(如 Git)来跟踪容器的变更历史，确保每次变更都是可追踪和可重复的。</li>
<li><strong>隔离性</strong>：每个 Docker 容器都运行在自己的命名空间中，拥有独立的文件系统、网络栈和进程空间。这种隔离性确保了容器之间的安全性，防止了潜在的冲突和干扰。</li>
<li><strong>自动化与编排</strong>：Docker 与各种自动化工具和编排平台(如 Kubernetes、Docker Swarm 等)集成，可以轻松地实现容器的自动化部署、扩展和管理。</li>
<li><strong>丰富的生态系统</strong>：Docker 拥有庞大的用户群体和丰富的生态系统，包括大量的官方和第三方镜像、插件和工具。这使得开发者可以轻松地找到所需的资源，加速应用的开发和部署过程。</li>
</ul>
<p>总的来说，Docker 提供了一种高效、可靠和灵活的方式来构建、部署和管理应用。它简化了应用的开发和运维过程，降低了成本，提高了效率。无论是个人开发者还是大型企业，都可以从 Docker 中受益。</p>
<h2 id="1-2-Docker-和虚拟机的区别"><a href="#1-2-Docker-和虚拟机的区别" class="headerlink" title="1.2 Docker 和虚拟机的区别"></a>1.2 Docker 和虚拟机的区别</h2><p>Docker 可以让一个应用在任何操作系统中非常方便的运行。而以前我们接触的虚拟机，也能在一个操作系统中，运行另外一个操作系统，保护系统中的任何应用。两者有什么差异呢？</p>
<p><strong>虚拟机</strong>(virtual machine)是在操作系统中<strong>模拟</strong>硬件设备，然后运行另一个操作系统，比如在 Windows 系统里面运行 Ubuntu 系统，这样就可以运行任意的Ubuntu应用了。</p>
<p><strong>Docker</strong>仅仅是封装函数库，并没有模拟完整的操作系统，如图：</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/ToolsIMG/Docker/Docker%E5%92%8C%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E5%8C%BA%E5%88%AB.png" style="zoom: 33%;">

<p>对比来看：</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/ToolsIMG/Docker/Docker%E5%92%8C%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E7%89%B9%E5%BE%81.png" style="zoom:50%;">

<p><strong>小结</strong></p>
<p>Docker 和虚拟机的差异：</p>
<ul>
<li><p>Docker 是一个系统进程；虚拟机是在操作系统中的操作系统</p>
</li>
<li><p>Docker 体积小、启动速度快、性能好；虚拟机体积大、启动速度慢、性能一般</p>
</li>
</ul>
<h2 id="1-3-Docker架构"><a href="#1-3-Docker架构" class="headerlink" title="1.3 Docker架构"></a>1.3 Docker架构</h2><h3 id="1-3-1-镜像-Image-和容器-Container"><a href="#1-3-1-镜像-Image-和容器-Container" class="headerlink" title="1.3.1 镜像(Image)和容器(Container)"></a>1.3.1 镜像(Image)和容器(Container)</h3><p>Docker 中有几个重要的概念：</p>
<p><strong>镜像</strong>：Docker将应用程序及其所需的依赖、函数库、环境、配置等文件打包在一起，称为镜像。</p>
<p><strong>容器</strong>：镜像中的应用程序运行后形成的进程就是<strong>容器</strong>，只是Docker会给容器进程做隔离，对外不可见。</p>
<p>一切应用最终都是代码组成，都是硬盘中的一个个的字节形成的<strong>文件</strong>。只有运行时，才会加载到内存，形成进程。</p>
<p><strong>镜像</strong>就是把一个应用在硬盘上的文件、及其运行环境、部分系统函数库文件一起打包形成的文件包。这个文件包是只读的。</p>
<p><strong>容器</strong>就是将这些文件中编写的程序、函数加载到内存中允许，形成进程，只不过要隔离起来。因此一个镜像可以启动多次，形成多个容器进程。</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/ToolsIMG/Docker/Docker%E9%95%9C%E5%83%8F%E5%92%8C%E5%AE%B9%E5%99%A8.png" style="zoom: 33%;">

<p>例如你下载了一个QQ，如果我们将QQ在磁盘上的运行<strong>文件</strong>及其运行的操作系统依赖打包，形成QQ镜像。然后你可以启动多次，双开、甚至三开QQ，跟多个妹子聊天。😎</p>
<h3 id="1-3-2-DockerHub"><a href="#1-3-2-DockerHub" class="headerlink" title="1.3.2 DockerHub"></a>1.3.2 DockerHub</h3><p>开源应用程序非常多，打包这些应用往往是重复的劳动。为了避免这些重复劳动，人们就会将自己打包的应用镜像，例如 Redis、MySQL 镜像放到网络上，共享使用，就像 GitHub 的代码共享一样。</p>
<p>Docker 官方提供了一个专门管理、存储镜像的网站，并对外开放了镜像上传、下载的权利。Docker 官方提供了一些基础镜像，然后各大软件公司又在基础镜像基础上，制作了自家软件的镜像，全部都存放在这个网站。这个网站就成了 Docker 镜像交流的社区：<a href="https://hub.docker.com/">https://hub.docker.com/</a></p>
<ul>
<li><p>DockerHub：DockerHub 是一个官方的 Docker 镜像的托管平台。这样的平台称为 Docker Registry。</p>
</li>
<li><p>国内也有类似于 DockerHub 的公开服务，比如 <a href="https://c.163yun.com/hub">网易云镜像服务</a>、<a href="https://cr.console.aliyun.com/">阿里云镜像库</a>等。</p>
</li>
</ul>
<p>我们一方面可以将自己的镜像共享到 DockerHub，另一方面也可以从 DockerHub 拉取镜像：</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/ToolsIMG/Docker/DockerHub%E4%B8%8A%E4%BC%A0%E4%B8%8E%E6%8B%89%E5%8F%96%E9%95%9C%E5%83%8F.png" style="zoom: 25%;">

<h3 id="1-3-3-Docker架构"><a href="#1-3-3-Docker架构" class="headerlink" title="1.3.3 Docker架构"></a>1.3.3 Docker架构</h3><p>Docker 是一个 CS 架构的程序，由两部分组成：</p>
<ul>
<li><p>服务端(server)：Docker 守护进程，负责处理 Docker 指令，管理镜像、容器等</p>
</li>
<li><p>客户端(client)：通过命令或RestAPI向Docker服务端发送指令。可以在本地或远程向服务端发送指令</p>
</li>
</ul>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/ToolsIMG/Docker/Docker%E6%9E%B6%E6%9E%84.png" style="zoom: 50%;">

<h1 id="2-快速入门"><a href="#2-快速入门" class="headerlink" title="2. 快速入门"></a>2. 快速入门</h1><h2 id="2-1-安装-Docker"><a href="#2-1-安装-Docker" class="headerlink" title="2.1 安装 Docker"></a>2.1 安装 Docker</h2><p>Docker 分为 CE 和 EE 两大版本。CE 即社区版（免费，支持周期 7 个月），EE 即企业版，强调安全，付费使用，支持周期 24 个月。</p>
<p>Docker CE 分为 <code>stable</code> <code>test</code> 和 <code>nightly</code> 三个更新频道。</p>
<p>官方网站上有各种环境下的 <a href="https://docs.docker.com/install/">安装指南</a>，这里主要介绍 Docker CE 在 CentOS上的安装。</p>
<p>1、卸载旧版</p>
<p>首先如果系统中已经存在旧的 Docker，则先卸载：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum remove docker \</span><br><span class="line">    docker-client \</span><br><span class="line">    docker-client-latest \</span><br><span class="line">    docker-common \</span><br><span class="line">    docker-latest \</span><br><span class="line">    docker-latest-logrotate \</span><br><span class="line">    docker-logrotate \</span><br><span class="line">    docker-engine</span><br></pre></td></tr></table></figure>

<p>2、配置Docker的 yum 库</p>
<p>首先要安装一个 yum 工具</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y yum-utils</span><br></pre></td></tr></table></figure>

<p>安装成功后，执行命令，配置 Docker 的 yum 源：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>

<p>3、安装 Docker</p>
<p>最后，执行命令，安装 Docker</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin</span><br></pre></td></tr></table></figure>

<p>4、启动和校验</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动Docker</span></span><br><span class="line">systemctl start docker</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停止Docker</span></span><br><span class="line">systemctl stop docker</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启</span></span><br><span class="line">systemctl restart docker</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置开机自启</span></span><br><span class="line">systemctl enable docker</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行docker ps命令，如果不报错，说明安装启动成功</span></span><br><span class="line">docker ps</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看 Docekr 版本</span></span><br><span class="line">docker -v</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">返回如下信息</span></span><br><span class="line">Docker version 26.0.0, build 2ae903e</span><br></pre></td></tr></table></figure>

<p>5、配置镜像加速</p>
<p>这里以阿里云镜像加速为例。</p>
<p>(1) 注册阿里云账号</p>
<p>首先访问<a href="https://www.aliyun.com/">阿里云网站</a>注册一个账号。</p>
<p>(2) 开通镜像服务</p>
<p>在首页的产品中，找到阿里云的<strong>容器镜像服务</strong>：</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/ToolsIMG/Docker/Docker%E9%85%8D%E7%BD%AE%E9%98%BF%E9%87%8C%E4%BA%91%E9%95%9C%E5%83%8F(1).png" style="zoom: 67%;">

<p>点击后进入控制台：</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/ToolsIMG/Docker/Docker%E9%85%8D%E7%BD%AE%E9%98%BF%E9%87%8C%E4%BA%91%E9%95%9C%E5%83%8F(2).png" style="zoom:67%;">

<p>(3) 配置镜像加速</p>
<p>找到<strong>镜像工具</strong>下的<strong>镜像加速器</strong>：</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/ToolsIMG/Docker/Docker%E9%85%8D%E7%BD%AE%E9%98%BF%E9%87%8C%E4%BA%91%E9%95%9C%E5%83%8F(3).png" style="zoom: 80%;">

<p>页面向下滚动，即可找到配置的文档说明：</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/ToolsIMG/Docker/Docker%E9%85%8D%E7%BD%AE%E9%98%BF%E9%87%8C%E4%BA%91%E9%95%9C%E5%83%8F(4).png" style="zoom: 80%;">

<p>具体命令如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建目录</span></span><br><span class="line">mkdir -p /etc/docker</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">复制内容，注意把其中的镜像加速地址改成你自己的</span></span><br><span class="line">tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://xxxx.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重新加载配置</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启Docker</span></span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>

<h2 id="2-2-部署-MySQL"><a href="#2-2-部署-MySQL" class="headerlink" title="2.2 部署 MySQL"></a>2.2 部署 MySQL</h2><p>首先，我们利用 Docker 来安装一个 MySQL 软件，大家可以对比一下之前传统的安装方式，看看哪个效率更高一些。</p>
<p>如果是利用传统方式部署 MySQL，大概的步骤有：</p>
<ul>
<li>搜索并下载 MySQL 安装包</li>
<li>上传至Linux环境</li>
<li>编译和配置环境</li>
<li>安装</li>
</ul>
<p>而使用 Docker 安装，仅仅需要一步即可，在命令行输入下面的命令(建议采用 CV 大法)：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">  --name mysql \</span><br><span class="line">  -p 3306:3306 \</span><br><span class="line">  -e TZ=Asia/Shanghai \</span><br><span class="line">  -e MYSQL_ROOT_PASSWORD=123 \</span><br><span class="line">  mysql</span><br></pre></td></tr></table></figure>

<p>运行效果如图：</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/ToolsIMG/Docker/Docker%E9%83%A8%E7%BD%B2MySQL.png" style="zoom: 67%;">

<p>MySQL 安装完毕！通过任意客户端工具即可连接到 MySQL。</p>
<p>大家可以发现，当我们执行命令后，Docker 做的第一件事情，是去自动搜索并下载了 MySQL，然后会自动运行 MySQL，我们完全不用插手，非常方便。而且，这种安装方式你完全不用考虑运行的操作系统环境。</p>
<p><font color="red">PS：这里下载的不是安装包，而是<strong>镜像。</strong></font>😀 镜像中不仅包含了 MySQL 本身，还包含了其运行所需要的环境、配置、系统级函数库。因此它在运行时就有自己独立的环境，就可以跨系统运行，也不需要手动再次配置环境了。这套独立运行的隔离环境我们称为<strong>容器</strong>。</p>
<p>因此，Docker 安装软件的过程，就是自动搜索下载镜像，然后创建并运行容器的过程。😏😏Docker 会根据命令中的镜像名称去 DockerHub 自动搜索并下载镜像。</p>
<p><strong>总结</strong>：</p>
<p>Docker 本身包含一个后台服务，我们可以利用 Docker 命令告诉 Docker 服务，帮助我们快速部署指定的应用。Docker 服务部署应用时，首先要去搜索并下载应用对应的镜像，然后根据镜像创建并允许容器，应用就部署完成了。</p>
<h2 id="2-3-命令解读"><a href="#2-3-命令解读" class="headerlink" title="2.3 命令解读"></a>2.3 命令解读</h2><p>利用 Docker 快速的安装了 MySQL，非常的方便，不过我们执行的命令到底是什么意思呢？</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">  --name mysql \</span><br><span class="line">  -p 3306:3306 \</span><br><span class="line">  -e TZ=Asia/Shanghai \</span><br><span class="line">  -e MYSQL_ROOT_PASSWORD=123 \</span><br><span class="line">  mysql</span><br></pre></td></tr></table></figure>

<p>解读：</p>
<ul>
<li><code>docker run -d</code> ：创建并运行一个容器，<code>-d</code>则是让容器以后台进程运行</li>
<li><code>--name mysql </code> : 给容器起个名字叫<code>mysql</code>，你可以叫别的</li>
<li><code>-p 3306:3306</code> : 设置端口映射。<ul>
<li><strong>容器是隔离环境</strong>，外界不可访问。但是可以<strong>将宿主机端口映射容器内到端口</strong>，当访问宿主机指定端口时，就是在访问容器内的端口了。</li>
<li>容器内端口往往是由容器内的进程决定，例如 MySQL 进程默认端口是 3306，因此容器内端口一定是 3306；而宿主机端口则可以任意指定，一般与容器内保持一致。</li>
<li>格式： <code>-p 宿主机端口:容器内端口</code>，示例中就是将宿主机的 3306 映射到容器内的3306端口</li>
</ul>
</li>
<li><code>-e TZ=Asia/Shanghai</code> : 配置容器内进程运行时的一些参数<ul>
<li>格式：<code>-e KEY=VALUE</code>，KEY 和 VALUE 都由容器内进程决定</li>
<li>案例中，<code>TZ=Asia/Shanghai</code>是设置时区；<code>MYSQL_ROOT_PASSWORD=123</code>是设置 MySQL 默认密码</li>
</ul>
</li>
<li><code>mysql</code> : 设置<strong>镜像</strong>名称，Docker 会根据这个名字搜索并下载镜像<ul>
<li>格式：<code>REPOSITORY:TAG</code>，例如<code>mysql:8.0</code>，其中<code>REPOSITORY</code>可以理解为镜像名，<code>TAG</code>是版本号</li>
<li>在未指定<code>TAG</code>的情况下，默认是最新版本，也就是<code>mysql:latest</code></li>
</ul>
</li>
</ul>
<p>镜像的名称<font color="red">不是随意的</font>，而是要到 DockerRegistry 中寻找，镜像运行时的配置<font color="red">也不是随意的</font>，要参考镜像的帮助文档，这些在DockerHub 网站或者软件的官方网站中都能找到。</p>
<p>如果我们要安装其它软件，也可以到 DockerRegistry 中寻找对应的镜像名称和版本，阅读相关配置即可。</p>
<h1 id="3-Docker-基础"><a href="#3-Docker-基础" class="headerlink" title="3. Docker 基础"></a>3. Docker 基础</h1><p> Docker 使用的一些基础知识。具体用法可以参考 Docker 官方文档：<a href="https://docs.docker.com/">https://docs.docker.com/</a></p>
<h2 id="3-1-镜像操作"><a href="#3-1-镜像操作" class="headerlink" title="3.1 镜像操作"></a>3.1 镜像操作</h2><h3 id="3-1-1-镜像名称"><a href="#3-1-1-镜像名称" class="headerlink" title="3.1.1 镜像名称"></a>3.1.1 镜像名称</h3><p>首先来看下镜像的名称组成：</p>
<ul>
<li>镜名称一般分两部分组成：[repository]:[tag]</li>
<li>在没有指定 tag 时，默认是 latest，代表最新版本的镜像</li>
</ul>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/ToolsIMG/Docker/Docker%E9%95%9C%E5%83%8F%E5%90%8D%E7%A7%B0.png" style="zoom: 50%;">

<h3 id="3-1-2-镜像相关命令"><a href="#3-1-2-镜像相关命令" class="headerlink" title="3.1.2 镜像相关命令"></a>3.1.2 镜像相关命令</h3><p>常见的镜像操作命令：</p>
<table>
<thead>
<tr>
<th align="center"><strong>命令</strong></th>
<th align="center"><strong>说明</strong></th>
<th align="center"><strong>文档地址</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center">docker pull</td>
<td align="center">拉取镜像</td>
<td align="center"><a href="https://docs.docker.com/engine/reference/commandline/pull/">docker pull</a></td>
</tr>
<tr>
<td align="center">docker push</td>
<td align="center">推送镜像到DockerRegistry</td>
<td align="center"><a href="https://docs.docker.com/engine/reference/commandline/push/">docker push</a></td>
</tr>
<tr>
<td align="center">docker images</td>
<td align="center">查看本地镜像</td>
<td align="center"><a href="https://docs.docker.com/engine/reference/commandline/images/">docker images</a></td>
</tr>
<tr>
<td align="center">docker rmi</td>
<td align="center">删除本地镜像</td>
<td align="center"><a href="https://docs.docker.com/engine/reference/commandline/rmi/">docker rmi</a></td>
</tr>
<tr>
<td align="center">docker save</td>
<td align="center">保存镜像到本地压缩文件</td>
<td align="center"><a href="https://docs.docker.com/engine/reference/commandline/save/">docker save</a></td>
</tr>
<tr>
<td align="center">docker load</td>
<td align="center">加载本地压缩文件到镜像</td>
<td align="center"><a href="https://docs.docker.com/engine/reference/commandline/load/">docker load</a></td>
</tr>
</tbody></table>
<p>用一副图来表示这些命令的关系：</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/ToolsIMG/Docker/Docker%E9%95%9C%E5%83%8F%E5%91%BD%E4%BB%A4%E5%85%B3%E7%B3%BB%E5%9B%BE.png" style="zoom: 33%;">

<blockquote>
<p>演示</p>
</blockquote>
<p>1、去 DockerHub 查看 nginx 镜像仓库及相关信息</p>
<p>2、拉取Nginx镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull nginx</span><br></pre></td></tr></table></figure>

<p>3、查看镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">mysql        latest    82563e0cbf18   45 hours ago   632MB</span><br><span class="line">nginx        latest    92b11f67642b   6 weeks ago    187MB</span><br></pre></td></tr></table></figure>

<p>4、将 nginx 镜像导出磁盘</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">利用docker xx --<span class="built_in">help</span>命令可以查看docker save和docker load的语法，例如，查看save命令用法，可以输入命令：</span></span><br><span class="line">docker save --help</span><br></pre></td></tr></table></figure>

<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/ToolsIMG/Docker/docker%20save%E5%91%BD%E4%BB%A4%E7%94%A8%E6%B3%95.png"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令格式</span></span><br><span class="line">docker save -o [保存的目标文件名称] [镜像名称]</span><br></pre></td></tr></table></figure>

<p>5、将 nginx 镜像导出磁盘</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker save -o nginx.tar nginx:latest</span><br></pre></td></tr></table></figure>

<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/ToolsIMG/Docker/%E5%B0%86nginx%E9%95%9C%E5%83%8F%E5%AF%BC%E5%87%BA%E7%A3%81%E7%9B%98.png"></p>
<p>6、使用 load 加载镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">先删除本地的nginx镜像</span></span><br><span class="line">docker rmi nginx:latest</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">然后运行命令，加载本地文件</span></span><br><span class="line">docker load -i nginx.tar</span><br></pre></td></tr></table></figure>

<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/ToolsIMG/Docker/%E4%BD%BF%E7%94%A8docker%20load%E5%8A%A0%E8%BD%BD%E9%95%9C%E5%83%8F.png">

<h2 id="3-2-容器操作"><a href="#3-2-容器操作" class="headerlink" title="3.2 容器操作"></a>3.2 容器操作</h2><h3 id="3-2-1-容器相关命令"><a href="#3-2-1-容器相关命令" class="headerlink" title="3.2.1 容器相关命令"></a>3.2.1 容器相关命令</h3><p>常见的容器操作命令：</p>
<table>
<thead>
<tr>
<th align="center"><strong>命令</strong></th>
<th align="center"><strong>说明</strong></th>
<th align="center"><strong>文档地址</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center">docker run</td>
<td align="center">创建并运行容器(不能重复创建)</td>
<td align="center"><a href="https://docs.docker.com/engine/reference/commandline/run/">docker run</a></td>
</tr>
<tr>
<td align="center">docker stop</td>
<td align="center">停止指定容器</td>
<td align="center"><a href="https://docs.docker.com/engine/reference/commandline/stop/">docker stop</a></td>
</tr>
<tr>
<td align="center">docker start</td>
<td align="center">启动指定容器</td>
<td align="center"><a href="https://docs.docker.com/engine/reference/commandline/start/">docker start</a></td>
</tr>
<tr>
<td align="center">docker restart</td>
<td align="center">重新启动容器</td>
<td align="center"><a href="https://docs.docker.com/engine/reference/commandline/restart/">docker restart</a></td>
</tr>
<tr>
<td align="center">docker rm</td>
<td align="center">删除指定容器</td>
<td align="center"><a href="https://docs.docker.com/engine/reference/commandline/rm/">docs.docker.com</a></td>
</tr>
<tr>
<td align="center">docker ps</td>
<td align="center">查看容器</td>
<td align="center"><a href="https://docs.docker.com/engine/reference/commandline/ps/">docker ps</a></td>
</tr>
<tr>
<td align="center">docker logs</td>
<td align="center">查看容器运行日志</td>
<td align="center"><a href="https://docs.docker.com/engine/reference/commandline/logs/">docker logs</a></td>
</tr>
<tr>
<td align="center">docker exec</td>
<td align="center">进入容器</td>
<td align="center"><a href="https://docs.docker.com/engine/reference/commandline/exec/">docker exec</a></td>
</tr>
<tr>
<td align="center">docker inspect</td>
<td align="center">查看容器详细信息</td>
<td align="center"><a href="https://docs.docker.com/engine/reference/commandline/inspect/">docker inspect</a></td>
</tr>
</tbody></table>
<p>用一副图来表示这些命令的关系：</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/ToolsIMG/Docker/Docker%E5%AE%B9%E5%99%A8%E5%91%BD%E4%BB%A4%E5%85%B3%E7%B3%BB%E5%9B%BE.png" style="zoom: 33%;">

<p>容器保护三个状态：</p>
<ul>
<li>运行：进程正常运行</li>
<li>暂停：进程暂停，CPU 不再运行，并不释放内存</li>
<li>停止：进程终止，回收进程占用的内存、CPU 等资源</li>
</ul>
<blockquote>
<p>演示</p>
</blockquote>
<p>1、创建并运行 nginx 容器的命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建并运行Nginx容器</span></span><br><span class="line">docker run -d --name nginx -p 80:80 nginx</span><br></pre></td></tr></table></figure>

<p>创建成功后会返回一串数字：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">f37101c8fff6fddcc5fa8207a53af1799a281a6b26fc2cc4139964b5f73fc05e</span><br></pre></td></tr></table></figure>

<p>命令解读：</p>
<ul>
<li><code>docker run</code> ：创建并运行一个容器</li>
<li><code>-d</code>：后台运行容器</li>
<li><code>--name</code> : 给容器起一个名字，比如叫做 nginx</li>
<li><code>-p</code> ：将宿主机端口与容器端口映射，冒号左侧是宿主机端口，右侧是容器端口</li>
<li><code>nginx</code>：镜像名称，例如nginx</li>
</ul>
<p>这里的 <code>-p</code> 参数，是将容器端口映射到宿主机端口。</p>
<p>默认情况下，容器是隔离环境，我们直接访问宿主机的 80 端口，肯定访问不到容器中的 nginx。</p>
<p>现在，将容器的 80 与宿主机的 80 关联起来，当我们访问宿主机的 80 端口时，就会被映射到容器的 80，这样就能访问到 nginx 了。</p>
<p>2、查看容器是否运行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看运行中容器</span></span><br><span class="line">docker ps</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">也可以加格式化方式访问，格式会更加清爽</span></span><br><span class="line">docker ps --format &quot;table &#123;&#123;.ID&#125;&#125;\t&#123;&#123;.Image&#125;&#125;\t&#123;&#123;.Ports&#125;&#125;\t&#123;&#123;.Status&#125;&#125;\t&#123;&#123;.Names&#125;&#125;&quot;</span><br></pre></td></tr></table></figure>

<p>格式化后查看到 nginx，说明已经运行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">CONTAINER ID   IMAGE     PORTS                                                  STATUS         NAMES</span><br><span class="line">f37101c8fff6   nginx     0.0.0.0:80-&gt;80/tcp, :::80-&gt;80/tcp                      Up 2 minutes   nginx</span><br><span class="line">9e617ee3fdb5   mysql     0.0.0.0:3306-&gt;3306/tcp, :::3306-&gt;3306/tcp, 33060/tcp   Up 2 hours     mysql</span><br></pre></td></tr></table></figure>

<p>3、停掉容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker stop nginx</span><br></pre></td></tr></table></figure>

<p>4、停掉容器后再次执行 <code>docker ps</code> 就看不到 nginx 了，需要使用 <code>-a</code> 参数查看所有容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看所有容器</span></span><br><span class="line">docker ps -a --format &quot;table &#123;&#123;.ID&#125;&#125;\t&#123;&#123;.Image&#125;&#125;\t&#123;&#123;.Ports&#125;&#125;\t&#123;&#123;.Status&#125;&#125;\t&#123;&#123;.Names&#125;&#125;&quot;</span><br></pre></td></tr></table></figure>

<p>可以发现 nginx 的 <code>STATUS</code> 变为了 <code>Exited (0)</code> ，表示已经停掉</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">CONTAINER ID   IMAGE     PORTS                                                  STATUS                     NAMES</span><br><span class="line">f37101c8fff6   nginx                                                            Exited (0) 2 minutes ago   nginx</span><br><span class="line">9e617ee3fdb5   mysql     0.0.0.0:3306-&gt;3306/tcp, :::3306-&gt;3306/tcp, 33060/tcp   Up 2 hours                 mysql</span><br></pre></td></tr></table></figure>

<p>5、启动 nginx 容器，再次执行 <code>docker ps</code> 查看运行中容器就会发现 nginx 又运行起来了。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动nginx容器</span></span><br><span class="line">docker start nginx</span><br></pre></td></tr></table></figure>

<p>6、查看 nginx 容器日志</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker logs nginx  </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可以加 -f 参数，一直查看日志</span></span><br><span class="line">docker logs -f nginx</span><br></pre></td></tr></table></figure>

<p>7、进入容器</p>
<p>(1) 进入我们刚刚创建的 nginx 容器：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it nginx bash</span><br></pre></td></tr></table></figure>

<p>命令解读：</p>
<ul>
<li><p><code>docker exec</code> ：进入容器内部，执行一个命令</p>
</li>
<li><p><code>-it</code> : 给当前进入的容器创建一个标准输入、输出终端，允许我们与容器交互</p>
</li>
<li><p><code>nginx</code> ：要进入的容器的名称</p>
</li>
<li><p><code>bash</code> ：进入容器后执行的命令，bash是一个linux终端交互命令</p>
</li>
</ul>
<p>进入 nginx 的 HTML 所在目录 &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html，容器内部会模拟一个独立的 Linux 文件系统，看起来如同一个 Linux 服务器一样。nginx 的环境、配置、运行文件全部都在这个文件系统中，包括我们要修改的 html 文件。</p>
<p>(2) 查看 DockerHub 网站中的 nginx 页面，可以知道 nginx 的 html 目录位置在 <code>/usr/share/nginx/html</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入目录</span></span><br><span class="line">cd /usr/share/nginx/html</span><br></pre></td></tr></table></figure>

<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/ToolsIMG/Docker/nginx%E7%9A%84html%E7%9B%AE%E5%BD%95%E5%9C%A8%E5%AE%B9%E5%99%A8%E4%B8%AD%E7%9A%84%E4%BD%8D%E7%BD%AE.png"></p>
<p>(3) 修改 index.html 的内容</p>
<p>容器内没有 vi 命令，无法直接修改，我们用下面的命令来修改：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sed -i -e <span class="string">&#x27;s#Welcome to nginx#木又枯了#g&#x27;</span> -e <span class="string">&#x27;s#&lt;head&gt;#&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;&gt;#g&#x27;</span> index.html</span><br></pre></td></tr></table></figure>

<p>在浏览器访问自己的虚拟机地址，例如我的是：<a href="http://192.168.88.132，即可看到结果：">http://192.168.88.132，即可看到结果：</a></p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/ToolsIMG/Docker/%E4%BF%AE%E6%94%B9%E5%90%8E%E7%9A%84nginx%E9%A1%B5%E9%9D%A2.png"></p>
<p>8、删除容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除容器</span></span><br><span class="line">docker rm nginx</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">发现无法删除，因为容器运行中，强制删除容器</span></span><br><span class="line">docker rm -f nginx</span><br></pre></td></tr></table></figure>

<h2 id="3-3-常见命令总结"><a href="#3-3-常见命令总结" class="headerlink" title="3.3 常见命令总结"></a>3.3 常见命令总结</h2><p>Docker 中的常见命令，可以参考官方文档：<a href="https://docs.docker.com/engine/reference/commandline/cli/">https://docs.docker.com/engine/reference/commandline/cli/</a></p>
<h3 id="3-3-1-命令介绍"><a href="#3-3-1-命令介绍" class="headerlink" title="3.3.1 命令介绍"></a>3.3.1 命令介绍</h3><p>其中，比较常见的命令有：</p>
<table>
<thead>
<tr>
<th align="center"><strong>命令</strong></th>
<th align="center"><strong>说明</strong></th>
<th align="center"><strong>文档地址</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center">docker pull</td>
<td align="center">拉取镜像</td>
<td align="center"><a href="https://docs.docker.com/engine/reference/commandline/pull/">docker pull</a></td>
</tr>
<tr>
<td align="center">docker push</td>
<td align="center">推送镜像到DockerRegistry</td>
<td align="center"><a href="https://docs.docker.com/engine/reference/commandline/push/">docker push</a></td>
</tr>
<tr>
<td align="center">docker images</td>
<td align="center">查看本地镜像</td>
<td align="center"><a href="https://docs.docker.com/engine/reference/commandline/images/">docker images</a></td>
</tr>
<tr>
<td align="center">docker rmi</td>
<td align="center">删除本地镜像</td>
<td align="center"><a href="https://docs.docker.com/engine/reference/commandline/rmi/">docker rmi</a></td>
</tr>
<tr>
<td align="center">docker run</td>
<td align="center">创建并运行容器(不能重复创建)</td>
<td align="center"><a href="https://docs.docker.com/engine/reference/commandline/run/">docker run</a></td>
</tr>
<tr>
<td align="center">docker stop</td>
<td align="center">停止指定容器</td>
<td align="center"><a href="https://docs.docker.com/engine/reference/commandline/stop/">docker stop</a></td>
</tr>
<tr>
<td align="center">docker start</td>
<td align="center">启动指定容器</td>
<td align="center"><a href="https://docs.docker.com/engine/reference/commandline/start/">docker start</a></td>
</tr>
<tr>
<td align="center">docker restart</td>
<td align="center">重新启动容器</td>
<td align="center"><a href="https://docs.docker.com/engine/reference/commandline/restart/">docker restart</a></td>
</tr>
<tr>
<td align="center">docker rm</td>
<td align="center">删除指定容器</td>
<td align="center"><a href="https://docs.docker.com/engine/reference/commandline/rm/">docs.docker.com</a></td>
</tr>
<tr>
<td align="center">docker ps</td>
<td align="center">查看容器</td>
<td align="center"><a href="https://docs.docker.com/engine/reference/commandline/ps/">docker ps</a></td>
</tr>
<tr>
<td align="center">docker logs</td>
<td align="center">查看容器运行日志</td>
<td align="center"><a href="https://docs.docker.com/engine/reference/commandline/logs/">docker logs</a></td>
</tr>
<tr>
<td align="center">docker exec</td>
<td align="center">进入容器</td>
<td align="center"><a href="https://docs.docker.com/engine/reference/commandline/exec/">docker exec</a></td>
</tr>
<tr>
<td align="center">docker save</td>
<td align="center">保存镜像到本地压缩文件</td>
<td align="center"><a href="https://docs.docker.com/engine/reference/commandline/save/">docker save</a></td>
</tr>
<tr>
<td align="center">docker load</td>
<td align="center">加载本地压缩文件到镜像</td>
<td align="center"><a href="https://docs.docker.com/engine/reference/commandline/load/">docker load</a></td>
</tr>
<tr>
<td align="center">docker inspect</td>
<td align="center">查看容器详细信息</td>
<td align="center"><a href="https://docs.docker.com/engine/reference/commandline/inspect/">docker inspect</a></td>
</tr>
</tbody></table>
<p>用一副图来表示这些命令的关系：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/ToolsIMG/Docker/Docker%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4%E5%85%B3%E7%B3%BB%E5%9B%BE.png"></p>
<p>PS：默认情况下，每次重启虚拟机我们都需要手动启动 Docker 和 Docker 中的容器。通过命令可以实现开机自启：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Docker开机自启</span></span><br><span class="line">systemctl enable docker</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Docker容器开机自启</span></span><br><span class="line">docker update --restart=always [容器名/容器id]</span><br></pre></td></tr></table></figure>

<h3 id="3-3-2-命令别名"><a href="#3-3-2-命令别名" class="headerlink" title="3.3.2 命令别名"></a>3.3.2 命令别名</h3><p>给常用 Docker 命令起别名，方便我们访问：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改/root/.bashrc文件</span></span><br><span class="line">vi /root/.bashrc</span><br></pre></td></tr></table></figure>

<p>内容如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># .bashrc</span><br><span class="line"></span><br><span class="line"># User specific aliases and functions</span><br><span class="line"></span><br><span class="line">alias rm=&#x27;rm -i&#x27;</span><br><span class="line">alias cp=&#x27;cp -i&#x27;</span><br><span class="line">alias mv=&#x27;mv -i&#x27;</span><br><span class="line">alias dps=&#x27;docker ps --format &quot;table &#123;&#123;.ID&#125;&#125;\t&#123;&#123;.Image&#125;&#125;\t&#123;&#123;.Ports&#125;&#125;\t&#123;&#123;.Status&#125;&#125;\t&#123;&#123;.Names&#125;&#125;&quot;&#x27;</span><br><span class="line">alias dis=&#x27;docker images&#x27;</span><br><span class="line"></span><br><span class="line"># Source global definitions</span><br><span class="line">if [ -f /etc/bashrc ]; then</span><br><span class="line">        . /etc/bashrc</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<p>然后，执行命令使别名生效</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source /root/.bashrc</span><br></pre></td></tr></table></figure>

<p>接下来，试试看新的命令吧。</p>
<h2 id="3-4-数据卷-volume"><a href="#3-4-数据卷-volume" class="headerlink" title="3.4 数据卷(volume)"></a>3.4 数据卷(volume)</h2><p>容器是隔离环境，容器内程序的文件、配置、运行时产生的容器都在容器内部，我们要读写容器内的文件非常不方便。大家思考几个问题：</p>
<ul>
<li>如果要升级 MySQL 版本，需要销毁旧容器，那么数据岂不是跟着被销毁了？</li>
<li>MySQL、Nginx 容器运行后，如果我要修改其中的某些配置该怎么办？</li>
<li>我想要让 Nginx 代理我的静态资源怎么办？</li>
</ul>
<p>因此，容器提供程序的运行环境，但是<strong>程序运行产生的数据、程序运行依赖的配置都应该与容器解耦</strong>。</p>
<h3 id="3-4-1-什么是数据卷"><a href="#3-4-1-什么是数据卷" class="headerlink" title="3.4.1 什么是数据卷"></a>3.4.1 什么是数据卷</h3><p><strong>数据卷</strong>是一个虚拟目录，是<strong>容器内目录</strong> <strong>宿主机目录</strong>之间映射的桥梁。</p>
<p>以 Nginx 为例，我们知道 Nginx 中有两个关键的目录：</p>
<ul>
<li><code>html</code>：放置一些静态资源</li>
<li><code>conf</code>：放置配置文件</li>
</ul>
<p>如果我们要让 Nginx 代理我们的静态资源，最好是放到 <code>html</code> 目录；如果我们要修改 Nginx 的配置，最好是找到 <code>conf</code> 下的<code>nginx.conf</code>文件。</p>
<p>但遗憾的是，容器运行的 Nginx 所有的文件都在容器内部。所以我们必须利用数据卷将两个目录与宿主机目录关联，方便我们操作。如图：</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/ToolsIMG/Docker/%E5%88%A9%E7%94%A8%E6%95%B0%E6%8D%AE%E5%8D%B7%E5%B0%86nginx%E4%B8%A4%E4%B8%AA%E7%9B%AE%E5%BD%95%E4%B8%8E%E5%AE%BF%E4%B8%BB%E6%9C%BA%E7%9B%AE%E5%BD%95%E5%85%B3%E8%81%94.png" style="zoom: 50%;">

<p>在上图中：</p>
<ul>
<li>我们创建了两个数据卷：<code>conf</code>、<code>html</code></li>
<li>Nginx 容器内部的 <code>conf</code> 目录和 <code>html</code> 目录分别与两个数据卷关联。</li>
<li>而数据卷 conf 和 html 分别指向了宿主机的 <code>/var/lib/docker/volumes/conf/_data</code> 目录和 <code>/var/lib/docker/volumes/html/_data</code> 目录</li>
</ul>
<p>这样以来，容器内的 <code>conf</code>和<code>html</code> 目录就 与宿主机的 <code>conf</code> 和 <code>html</code> 目录关联起来，我们称为<strong>挂载</strong>。此时，我们操作宿主机的 <code>/var/lib/docker/volumes/html/_data</code> 就是在操作容器内的 <code>/usr/share/nginx/html/_data</code>目录。只要我们将静态资源放入宿主机对应目录，就可以被 Nginx 代理了。</p>
<blockquote>
<p>小提示😃</p>
</blockquote>
<p><code>/var/lib/docker/volumes</code>这个目录就是默认的存放所有容器数据卷的目录，其下再根据数据卷名称创建新目录，格式为<code>/数据卷名/_data</code>。</p>
<p>为什么不让容器目录直接指向宿主机目录呢？</p>
<p>因为直接指向宿主机目录就与宿主机强耦合了，如果切换了环境，宿主机目录就可能发生改变了。由于容器一旦创建，目录挂载就无法修改，这样容器就无法正常工作了。</p>
<p>但是容器指向数据卷，一个逻辑名称，而数据卷再指向宿主机目录，就不存在强耦合。如果宿主机目录发生改变，只要改变数据卷与宿主机目录之间的映射关系即可。</p>
<p>不过，我们通过由于数据卷目录比较深，不好寻找，通常我们也<strong>允许让容器直接与宿主机目录挂载而不使用数据卷</strong>。</p>
<h3 id="3-4-2-数据卷命令"><a href="#3-4-2-数据卷命令" class="headerlink" title="3.4.2 数据卷命令"></a>3.4.2 数据卷命令</h3><p>数据卷的相关命令有：</p>
<table>
<thead>
<tr>
<th align="center"><strong>命令</strong></th>
<th align="center"><strong>说明</strong></th>
<th align="center"><strong>文档地址</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center">docker volume create</td>
<td align="center">创建数据卷</td>
<td align="center"><a href="https://docs.docker.com/engine/reference/commandline/volume_create/">docker volume create</a></td>
</tr>
<tr>
<td align="center">docker volume ls</td>
<td align="center">查看所有数据卷</td>
<td align="center"><a href="https://docs.docker.com/engine/reference/commandline/volume_ls/">docs.docker.com</a></td>
</tr>
<tr>
<td align="center">docker volume rm</td>
<td align="center">删除指定数据卷</td>
<td align="center"><a href="https://docs.docker.com/engine/reference/commandline/volume_prune/">docs.docker.com</a></td>
</tr>
<tr>
<td align="center">docker volume inspect</td>
<td align="center">查看某个数据卷的详情</td>
<td align="center"><a href="https://docs.docker.com/engine/reference/commandline/volume_inspect/">docs.docker.com</a></td>
</tr>
<tr>
<td align="center">docker volume prune</td>
<td align="center">清除数据卷</td>
<td align="center"><a href="https://docs.docker.com/engine/reference/commandline/volume_prune/">docker volume prune</a></td>
</tr>
</tbody></table>
<p>在执行docker run命令时，使用 <code>-v 数据卷:容器内目录</code> 可以完成数据卷挂载。当创建容器时，如果挂载了数据卷且数据卷不存在，会自动创建数据卷。</p>
<p><font color="red">PS：挂载的动作一定是在docker run(容器创建)的时候执行，容器一旦已经创建是没有办法再去挂载的！！</font>😉</p>
<blockquote>
<p>演示 Nginx 的 html 目录挂载</p>
</blockquote>
<p>1、创建容器并指定数据卷，注意通过 <code>-v</code> 参数来指定数据卷</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d --name nginx -p 80:80 -v html:/usr/share/nginx/html nginx</span><br></pre></td></tr></table></figure>

<p>2、查看数据卷</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker volume ls</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DRIVER    VOLUME NAME</span><br><span class="line">local     b388dcff529dd819f25d271e22f5b1438a12afc5afb5069228230b64b8d8e98a</span><br><span class="line">local     html</span><br></pre></td></tr></table></figure>

<p>3、查看数据卷详情</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker volume inspect html</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;CreatedAt&quot;: &quot;2024-03-27T22:58:31-07:00&quot;,</span><br><span class="line">        &quot;Driver&quot;: &quot;local&quot;,</span><br><span class="line">        &quot;Labels&quot;: null,</span><br><span class="line">        &quot;Mountpoint&quot;: &quot;/var/lib/docker/volumes/html/_data&quot;,</span><br><span class="line">        &quot;Name&quot;: &quot;html&quot;,</span><br><span class="line">        &quot;Options&quot;: null,</span><br><span class="line">        &quot;Scope&quot;: &quot;local&quot;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>4、查看 &#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes&#x2F;html&#x2F;_data 目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ll /var/lib/docker/volumes/html/_data</span><br></pre></td></tr></table></figure>

<p>可以看到与nginx的html目录内容一样，结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">total 8</span><br><span class="line">-rw-r--r--. 1 root root 497 Feb 14 08:03 50x.html</span><br><span class="line">-rw-r--r--. 1 root root 615 Feb 14 08:03 index.html</span><br></pre></td></tr></table></figure>

<p>5、进入该目录，并随意修改index.html内容，修改后打开页面，查看效果</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /var/lib/docker/volumes/html/_data</span><br><span class="line">vim index.html</span><br></pre></td></tr></table></figure>

<p>6、进入容器内部，查看 &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html 目录内的文件是否变化</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec -it nginx bash</span><br></pre></td></tr></table></figure>

<blockquote>
<p>演示 MySQL 的匿名数据卷</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看MySQL容器详细信息</span></span><br><span class="line">docker inspect mysql</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">关注其中.Config.Volumes部分和.Mounts部分</span></span><br></pre></td></tr></table></figure>

<p>我们关注两部分内容，第一是<code>.Config.Volumes</code>部分：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;Config&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// ... 略</span></span><br><span class="line">    <span class="attr">&quot;Volumes&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;/var/lib/mysql&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="comment">// ... 略</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>可以发现这个容器声明了一个本地目录，需要挂载数据卷，但是<strong>数据卷未定义</strong>。这就是匿名卷。</p>
<p>然后，我们再看结果中的<code>.Mounts</code>部分：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;Mounts&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;Type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;volume&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;Name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;29524ff09715d3688eae3f99803a2796558dbd00ca584a25a4bbc193ca82459f&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;Source&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/var/lib/docker/volumes/29524ff09715d3688eae3f99803a2796558dbd00ca584a25a4bbc193ca82459f/_data&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;Destination&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/var/lib/mysql&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;Driver&quot;</span><span class="punctuation">:</span> <span class="string">&quot;local&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>可以发现，其中有几个关键属性：</p>
<ul>
<li>Name：数据卷名称。由于定义容器未设置容器名，这里的就是匿名卷自动生成的名字，一串hash值。</li>
<li>Source：宿主机目录</li>
<li>Destination : 容器内的目录</li>
</ul>
<p>上述配置是将容器内的<code>/var/lib/mysql</code>这个目录，与数据卷<code>29524ff09715d3688eae3f99803a2796558dbd00ca584a25a4bbc193ca82459f</code>挂载。于是在宿主机中就有了<code>/var/lib/docker/volumes/29524ff09715d3688eae3f99803a2796558dbd00ca584a25a4bbc193ca82459f/_data</code>这个目录。这就是匿名数据卷对应的目录，其使用方式与普通数据卷没有差别。</p>
<p>接下来，可以查看该目录下的MySQL的data文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> -l /var/lib/docker/volumes/29524ff09715d3688eae3f99803a2796558dbd00ca584a25a4bbc193ca82459f/_data</span><br></pre></td></tr></table></figure>

<p>注意：每一个不同的镜像，将来创建容器后内部有哪些目录可以挂载，可以参考DockerHub对应的页面。</p>
<h3 id="3-4-3-挂载本地目录或文件"><a href="#3-4-3-挂载本地目录或文件" class="headerlink" title="3.4.3 挂载本地目录或文件"></a>3.4.3 挂载本地目录或文件</h3><p>可以发现，数据卷的目录结构较深，如果我们去操作数据卷目录会不太方便。在很多情况下，我们会直接将容器目录与宿主机指定目录挂载。挂载语法与数据卷类似：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 挂载本地目录</span></span><br><span class="line">-v 本地目录:容器内目录</span><br><span class="line"></span><br><span class="line"><span class="comment"># 挂载本地文件</span></span><br><span class="line">-v 本地文件:容器内文件</span><br></pre></td></tr></table></figure>

<p><font color="red"><strong>PS：本地目录或文件必须以 <code>/</code> 或 <code>./</code>开头，如果直接以名字开头，会被识别为数据卷名而非本地目录名。</strong></font>😄😄😄 例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 会被识别为一个数据卷叫mysql，运行时会自动创建这个数据卷</span></span><br><span class="line">-v mysql:/var/lib/mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 会被识别为当前目录下的mysql目录，运行时如果不存在会创建目录</span></span><br><span class="line">-v ./mysql:/var/lib/mysql</span><br></pre></td></tr></table></figure>

<blockquote>
<p>演示基于宿主机目录实现 MySQL 数据目录、配置文件、初始化脚本的挂载(查阅官方镜像文档)：</p>
</blockquote>
<ul>
<li>挂载<code>/root/mysql/data</code>到容器内的<code>/var/lib/mysql</code>目录</li>
<li>挂载<code>/root/mysql/init</code>到容器内的<code>/docker-entrypoint-initdb.d</code>目录(初始化的SQL脚本目录)</li>
<li>挂载<code>/root/mysql/conf</code>到容器内的<code>/etc/mysql/conf.d</code>目录(这个是MySQL配置文件目录)</li>
</ul>
<p>准备好了 mysql 的初始化 SQL 脚本和配置文件，在创建 mysql 容器后，上传到对应挂载的本地目录。</p>
<p>其中，hm.cnf 主要是配置了 MySQL 的默认编码，改为 utf8mb4；而 hmall.sql 则是黑马商城项目的初始化 SQL 脚本。</p>
<p>接下来，我们演示本地目录挂载：</p>
<p>1、删除原来的 MySQL 容器，进入 root 目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker rm -f mysql</span><br><span class="line">cd ~</span><br></pre></td></tr></table></figure>

<p>2、创建并运行新 mysql 容器，挂载本地目录(<strong>注意挂载的目录权限，权限不足会导致挂载的目录文件不生效</strong>)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">  --name mysql \</span><br><span class="line">  -p 3306:3306 \</span><br><span class="line">  -e TZ=Asia/Shanghai \</span><br><span class="line">  -e MYSQL_ROOT_PASSWORD=123 \</span><br><span class="line">  -v ./mysql/data:/var/lib/mysql \</span><br><span class="line">  -v ./mysql/conf:/etc/mysql/conf.d \</span><br><span class="line">  -v ./mysql/init:/docker-entrypoint-initdb.d \</span><br><span class="line">  mysql</span><br></pre></td></tr></table></figure>

<p>3、查看 root 目录，可以发现 ~&#x2F;mysql&#x2F;data 目录已经自动创建好了</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ls -l mysql</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看data目录，会发现里面有大量数据库数据，说明数据库完成了初始化</span></span><br><span class="line">ls -l data</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">总用量 4</span><br><span class="line">drwxr-xr-x. 2 root    root   20 5月  19 15:11 conf</span><br><span class="line">drwxr-xr-x. 7 polkitd root 4096 5月  19 15:11 data</span><br><span class="line">drwxr-xr-x. 2 root    root   23 5月  19 15:11 init</span><br></pre></td></tr></table></figure>

<p>4、查看MySQL容器内数据</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入MySQL</span></span><br><span class="line">docker exec -it mysql mysql -uroot -p123</span><br></pre></td></tr></table></figure>

<p>(1) 查看编码表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show variables like &quot;%char%&quot;;</span><br></pre></td></tr></table></figure>

<p>编码是 utf8mb4 则没有问题</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+--------------------------+--------------------------------+</span><br><span class="line">| Variable_name            | Value                          |</span><br><span class="line">+--------------------------+--------------------------------+</span><br><span class="line">| character_set_client     | utf8mb4                        |</span><br><span class="line">| character_set_connection | utf8mb4                        |</span><br><span class="line">| character_set_database   | utf8mb4                        |</span><br><span class="line">| character_set_filesystem | binary                         |</span><br><span class="line">| character_set_results    | utf8mb4                        |</span><br><span class="line">| character_set_server     | utf8mb4                        |</span><br><span class="line">| character_set_system     | utf8mb3                        |</span><br><span class="line">| character_sets_dir       | /usr/share/mysql-8.0/charsets/ |</span><br><span class="line">+--------------------------+--------------------------------+</span><br></pre></td></tr></table></figure>

<p>(2) 查看数据库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show databases;</span><br></pre></td></tr></table></figure>

<p>结果查看到 hmall 黑马商城数据库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| hmall              |</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| sys                |</span><br><span class="line">+--------------------+</span><br></pre></td></tr></table></figure>

<p>(3) 切换到 hmall 数据库，查看表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use hmall;</span><br><span class="line">show tables;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+-----------------+</span><br><span class="line">| Tables_in_hmall |</span><br><span class="line">+-----------------+</span><br><span class="line">| address         |</span><br><span class="line">| cart            |</span><br><span class="line">| item            |</span><br><span class="line">| order           |</span><br><span class="line">| order_detail    |</span><br><span class="line">| order_logistics |</span><br><span class="line">| pay_order       |</span><br><span class="line">| user            |</span><br><span class="line">+-----------------+</span><br></pre></td></tr></table></figure>

<p>(4) 查看 address 表数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+----+---------+----------+--------+----------+-------------+---------------+-----------+------------+-------+</span><br><span class="line">| id | user_id | province | city   | town     | mobile      | street        | contact   | is_default | notes |</span><br><span class="line">+----+---------+----------+--------+----------+-------------+---------------+-----------+------------+-------+</span><br><span class="line">| 59 |       1 | 北京     | 北京   | 朝阳区    | 13900112222 | 金燕龙办公楼   | 李佳诚    | 0          | NULL  |</span><br><span class="line">| 60 |       1 | 北京     | 北京   | 朝阳区    | 13700221122 | 修正大厦       | 李佳红    | 0          | NULL  |</span><br><span class="line">| 61 |       1 | 上海     | 上海   | 浦东新区  | 13301212233 | 航头镇航头路   | 李佳星    | 1          | NULL  |</span><br><span class="line">| 63 |       1 | 广东     | 佛山   | 永春      | 13301212233 | 永春武馆       | 李晓龙    | 0          | NULL  |</span><br><span class="line">+----+---------+----------+--------+----------+-------------+---------------+-----------+------------+-------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>推荐挂载到一个固定的自己设置的本地目录。挂载到本地目录后，即使将 mysql 容器删掉，再次创建并运行新mysql容器，只要挂载的地方不变，会发现所有的数据依然会存在。也就是说<font color="red">只要挂载的目录还在，数据就不会丢失，实现了数据的持久保存。</font></p>
<h2 id="3-5-镜像"><a href="#3-5-镜像" class="headerlink" title="3.5 镜像"></a>3.5 镜像</h2><p>前面我们一直在使用别人准备好的镜像，那如果我要部署一个 Java 项目，把它打包为一个镜像该怎么做呢？</p>
<h3 id="3-5-1-镜像结构"><a href="#3-5-1-镜像结构" class="headerlink" title="3.5.1 镜像结构"></a>3.5.1 镜像结构</h3><p>镜像之所以能让我们快速跨操作系统部署应用而忽略其运行环境、配置，就是因为镜像中包含了程序运行需要的系统函数库、环境、配置、依赖。因此，自定义镜像本质就是依次准备好程序运行的基础环境、依赖、应用本身、运行配置等文件，并且打包而成。</p>
<p>我们打包镜像也是分成这么几步：</p>
<ul>
<li>准备Linux运行环境(Java项目并不需要完整的操作系统，仅仅是基础运行环境即可)</li>
<li>安装并配置JDK</li>
<li>拷贝jar包</li>
<li>配置启动脚本</li>
</ul>
<p>上述步骤中的每一次操作其实都是在生产一些文件(系统运行环境、函数库、配置最终都是磁盘文件)，所以<strong>镜像就是一堆文件的集合</strong>。</p>
<p>但需要注意的是，镜像文件不是随意堆放的，而是按照操作的步骤分层叠加而成，每一层形成的文件都会单独打包并标记一个唯一 id，称为 **Layer(层)**。这样，如果我们构建时用到的某些层其他人已经制作过，就可以直接拷贝使用这些层，而不用重复制作。</p>
<p>例如，第一步中需要的 Linux 运行环境，通用性就很强，所以 Docker 官方就制作了这样的只包含 Linux 运行环境的镜像。我们在制作Java 镜像时，就无需重复制作，直接使用 Docker 官方提供的 CentOS 或 Ubuntu 镜像作为基础镜像。然后再搭建其它层即可，这样逐层搭建，最终整个 Java 项目的镜像结构如图所示：</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/ToolsIMG/Docker/Docker%E9%95%9C%E5%83%8F%E7%BB%93%E6%9E%84.png" style="zoom:50%;">

<h3 id="3-5-2-Dockerfile"><a href="#3-5-2-Dockerfile" class="headerlink" title="3.5.2 Dockerfile"></a>3.5.2 Dockerfile</h3><p>由于制作镜像的过程中，需要逐层处理和打包，比较复杂，所以 Docker 就提供了自动打包镜像的功能。我们只需要将打包的过程，每一层要做的事情用固定的语法写下来，交给 Docker 去执行即可。</p>
<p>而这种记录镜像结构的文件就称为 <strong>Dockerfile</strong>，其对应的语法可以参考官方文档：<a href="https://docs.docker.com/engine/reference/builder/">https://docs.docker.com/engine/reference/builder/</a></p>
<p>其中的语法比较多，比较常用的有：</p>
<table>
<thead>
<tr>
<th align="center"><strong>指令</strong></th>
<th align="center"><strong>说明</strong></th>
<th align="center"><strong>示例</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>FROM</strong></td>
<td align="center">指定基础镜像</td>
<td align="center"><code>FROM centos:6</code></td>
</tr>
<tr>
<td align="center"><strong>ENV</strong></td>
<td align="center">设置环境变量，可在后面指令使用</td>
<td align="center"><code>ENV key value</code></td>
</tr>
<tr>
<td align="center"><strong>COPY</strong></td>
<td align="center">拷贝本地文件到镜像的指定目录</td>
<td align="center"><code>COPY ./xx.jar /tmp/app.jar</code></td>
</tr>
<tr>
<td align="center"><strong>RUN</strong></td>
<td align="center">执行Linux的shell命令，一般是安装过程的命令</td>
<td align="center"><code>RUN yum install gcc</code></td>
</tr>
<tr>
<td align="center"><strong>EXPOSE</strong></td>
<td align="center">指定容器运行时监听的端口，是给镜像使用者看的</td>
<td align="center">EXPOSE 8080</td>
</tr>
<tr>
<td align="center"><strong>ENTRYPOINT</strong></td>
<td align="center">镜像中应用的启动命令，容器运行时调用</td>
<td align="center">ENTRYPOINT java -jar xx.jar</td>
</tr>
</tbody></table>
<p>例如，要基于Ubuntu镜像来构建一个 Java 应用，其 Dockerfile 内容如下：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 指定基础镜像</span></span><br><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">16.04</span></span><br><span class="line"><span class="comment"># 配置环境变量，JDK的安装目录、容器内时区</span></span><br><span class="line"><span class="keyword">ENV</span> JAVA_DIR=/usr/local</span><br><span class="line"><span class="keyword">ENV</span> TZ=Asia/Shanghai</span><br><span class="line"><span class="comment"># 拷贝JDK和Java项目的包</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./jdk8.tar.gz <span class="variable">$JAVA_DIR</span>/</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./docker-demo.jar /tmp/app.jar</span></span><br><span class="line"><span class="comment"># 设定时区</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">ln</span> -snf /usr/share/zoneinfo/<span class="variable">$TZ</span> /etc/localtime &amp;&amp; <span class="built_in">echo</span> <span class="variable">$TZ</span> &gt; /etc/timezone</span></span><br><span class="line"><span class="comment"># 安装JDK</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">cd</span> <span class="variable">$JAVA_DIR</span> \</span></span><br><span class="line"><span class="language-bash"> &amp;&amp; tar -xf ./jdk8.tar.gz \</span></span><br><span class="line"><span class="language-bash"> &amp;&amp; <span class="built_in">mv</span> ./jdk1.8.0_144 ./java8</span></span><br><span class="line"><span class="comment"># 配置环境变量</span></span><br><span class="line"><span class="keyword">ENV</span> JAVA_HOME=$JAVA_DIR/java8</span><br><span class="line"><span class="keyword">ENV</span> PATH=$PATH:$JAVA_HOME/bin</span><br><span class="line"><span class="comment"># 指定项目监听的端口</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></span><br><span class="line"><span class="comment"># 入口，Java项目的启动命令</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;java&quot;</span>, <span class="string">&quot;-jar&quot;</span>, <span class="string">&quot;/app.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<p>我们思考一下：以后我们会有很多很多 Java 项目需要打包为镜像，他们都需要 Linux 系统环境、JDK 环境这两层，只有上面的3层不同(因为jar包不同)。如果每次制作 Java 镜像都重复制作前两层镜像，是不是很麻烦。</p>
<p>所以，就有人提供了基础的系统加 JDK 环境，我们在此基础上制作 Java 镜像，就可以省去 JDK 的配置了：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 基础镜像</span></span><br><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">11.0</span>-jre-buster</span><br><span class="line"><span class="comment"># 设定时区</span></span><br><span class="line"><span class="keyword">ENV</span> TZ=Asia/Shanghai</span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">ln</span> -snf /usr/share/zoneinfo/<span class="variable">$TZ</span> /etc/localtime &amp;&amp; <span class="built_in">echo</span> <span class="variable">$TZ</span> &gt; /etc/timezone</span></span><br><span class="line"><span class="comment"># 拷贝jar包</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> docker-demo.jar /app.jar</span></span><br><span class="line"><span class="comment"># 入口</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;java&quot;</span>, <span class="string">&quot;-jar&quot;</span>, <span class="string">&quot;/app.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<p>是不是简单多了。</p>
<h3 id="3-5-3-构建镜像"><a href="#3-5-3-构建镜像" class="headerlink" title="3.5.3 构建镜像"></a>3.5.3 构建镜像</h3><p>当 Dockerfile 文件写好以后，就可以利用命令来构建镜像了。</p>
<p>准备以下 Dockerfile 文件：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 基础镜像</span></span><br><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">11.0</span>-jre-buster</span><br><span class="line"><span class="comment"># 设定时区</span></span><br><span class="line"><span class="keyword">ENV</span> TZ=Asia/Shanghai</span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">ln</span> -snf /usr/share/zoneinfo/<span class="variable">$TZ</span> /etc/localtime &amp;&amp; <span class="built_in">echo</span> <span class="variable">$TZ</span> &gt; /etc/timezone</span></span><br><span class="line"><span class="comment"># 拷贝jar包</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> docker-demo.jar /app.jar</span></span><br><span class="line"><span class="comment"># 入口</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;java&quot;</span>, <span class="string">&quot;-jar&quot;</span>, <span class="string">&quot;/app.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<p>将<code>docker-demo.jar</code>包以及<code>Dockerfile</code>拷贝到虚拟机的<code>/root/demo</code>目录：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/ToolsIMG/Docker/docker-demo.jar%E5%8C%85%E5%92%8CDockerfile%E6%8B%B7%E8%B4%9D%E5%88%B0%E8%99%9A%E6%8B%9F%E6%9C%BA.png"></p>
<p>然后，执行命令，构建镜像：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入镜像目录</span></span><br><span class="line"><span class="built_in">cd</span> /root/demo</span><br><span class="line"><span class="comment"># 开始构建</span></span><br><span class="line">docker build -t docker-demo:1.0 .</span><br></pre></td></tr></table></figure>

<p>命令说明：</p>
<ul>
<li><p><code>docker build </code> : 就是构建一个docker镜像</p>
</li>
<li><p><code>-t docker-demo:1.0</code> ：<code>-t</code>参数是指定镜像的名称(<code>repository</code>和<code>tag</code>)</p>
</li>
<li><p><code>.</code> : 最后的点是指构建时 Dockerfile 所在路径，由于我们进入了 demo 目录，所以指定的是<code>.</code>代表当前目录，也可以直接指定 Dockerfile 目录：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 直接指定Dockerfile目录</span></span><br><span class="line">docker build -t docker-demo:1.0 /root/demo</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/ToolsIMG/Docker/%E6%9E%84%E5%BB%BAdocker-demo%E9%95%9C%E5%83%8F.png"></p>
</li>
</ul>
<p>查看镜像列表：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看镜像列表：</span></span><br><span class="line">docker images</span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">REPOSITORY    TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">docker-demo   1.0       135cfdff1520   4 minutes ago   315MB</span><br><span class="line">mysql         latest    82563e0cbf18   2 days ago      632MB</span><br><span class="line">nginx         latest    92b11f67642b   6 weeks ago     187MB</span><br></pre></td></tr></table></figure>

<p>然后尝试运行该镜像：</p>
<p>1、创建并运行容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d --name dd -p 8080:8080 docker-demo:1.0</span><br></pre></td></tr></table></figure>

<p>2、查看容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CONTAINER ID   IMAGE             PORTS                                                  STATUS              NAMES</span><br><span class="line">bf65aebe697b   docker-demo:1.0   0.0.0.0:8080-&gt;8080/tcp, :::8080-&gt;8080/tcp              Up About a minute   dd</span><br><span class="line">84f8c612dc9d   mysql             0.0.0.0:3306-&gt;3306/tcp, :::3306-&gt;3306/tcp, 33060/tcp   Up 2 hours          mysql</span><br><span class="line">d38d34cb0b17   nginx             0.0.0.0:80-&gt;80/tcp, :::80-&gt;80/tcp                      Up 3 hours          nginx</span><br></pre></td></tr></table></figure>

<p>3、访问</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl localhost:8080/hello/count</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;h5&gt;欢迎访问黑马商城, 这是您第1次访问&lt;h5&gt;</span><br></pre></td></tr></table></figure>

<h2 id="3-6-网络"><a href="#3-6-网络" class="headerlink" title="3.6 网络"></a>3.6 网络</h2><p>上面我们创建了一个 Java 项目的容器，而 Java 项目往往需要访问其它各种中间件，例如 MySQL、Redis 等。现在，我们的容器之间能否互相访问呢？我们来测试一下</p>
<p>首先，我们查看下 MySQL 容器的详细信息，重点关注其中的网络IP地址：</p>
<p>1、用基本命令，寻找Networks.bridge.IPAddress属性</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker inspect mysql</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">也可以使用format过滤结果</span></span><br><span class="line">docker inspect --format=&#x27;&#123;&#123;range .NetworkSettings.Networks&#125;&#125;&#123;&#123;println .IPAddress&#125;&#125;&#123;&#123;end&#125;&#125;&#x27; mysql</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 得到的 IP 地址</span><br><span class="line">172.17.0.3</span><br></pre></td></tr></table></figure>

<p>2、然后通过命令进入dd容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec -it dd bash</span><br></pre></td></tr></table></figure>

<p>3、在容器内，通过 ping 命令测试网络</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ping 172.17.0.3</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PING 172.17.0.3 (172.17.0.3) 56(84) bytes of data.</span><br><span class="line">64 bytes from 172.17.0.3: icmp_seq=1 ttl=64 time=0.140 ms</span><br><span class="line">64 bytes from 172.17.0.3: icmp_seq=2 ttl=64 time=0.081 ms</span><br><span class="line">64 bytes from 172.17.0.3: icmp_seq=3 ttl=64 time=0.065 ms</span><br></pre></td></tr></table></figure>

<p>发现可以互联，没有问题。</p>
<p>但是，容器的网络IP其实是一个虚拟的 IP，其值并不固定与某一个容器绑定，如果我们在开发时写死某个 IP，而在部署时很可能 MySQL容器的 IP 会发生变化，连接会失败。</p>
<p>所以，我们必须借助于docker的网络功能来解决这个问题，官方文档：<a href="https://docs.docker.com/engine/reference/commandline/network/">https://docs.docker.com/engine/reference/commandline/network/</a></p>
<p>常见命令有：</p>
<table>
<thead>
<tr>
<th align="left"><strong>命令</strong></th>
<th align="left"><strong>说明</strong></th>
<th align="left"><strong>文档地址</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="left">docker network create</td>
<td align="left">创建一个网络</td>
<td align="left"><a href="https://docs.docker.com/engine/reference/commandline/network_create/">docker network create</a></td>
</tr>
<tr>
<td align="left">docker network ls</td>
<td align="left">查看所有网络</td>
<td align="left"><a href="https://docs.docker.com/engine/reference/commandline/network_ls/">docs.docker.com</a></td>
</tr>
<tr>
<td align="left">docker network rm</td>
<td align="left">删除指定网络</td>
<td align="left"><a href="https://docs.docker.com/engine/reference/commandline/network_rm/">docs.docker.com</a></td>
</tr>
<tr>
<td align="left">docker network prune</td>
<td align="left">清除未使用的网络</td>
<td align="left"><a href="https://docs.docker.com/engine/reference/commandline/network_prune/">docs.docker.com</a></td>
</tr>
<tr>
<td align="left">docker network connect</td>
<td align="left">使指定容器连接加入某网络</td>
<td align="left"><a href="https://docs.docker.com/engine/reference/commandline/network_connect/">docs.docker.com</a></td>
</tr>
<tr>
<td align="left">docker network disconnect</td>
<td align="left">使指定容器连接离开某网络</td>
<td align="left"><a href="https://docs.docker.com/engine/reference/commandline/network_disconnect/">docker network disconnect</a></td>
</tr>
<tr>
<td align="left">docker network inspect</td>
<td align="left">查看网络详细信息</td>
<td align="left"><a href="https://docs.docker.com/engine/reference/commandline/network_inspect/">docker network inspect</a></td>
</tr>
</tbody></table>
<blockquote>
<p>演示自定义网络</p>
</blockquote>
<p>1、首先通过命令创建一个网络</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker network create hmall</span><br></pre></td></tr></table></figure>

<p>2、然后查看网络</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker network ls</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">NETWORK ID     NAME      DRIVER    SCOPE</span><br><span class="line">450aad7a52da   bridge    bridge    local</span><br><span class="line">a93df4a22e20   hmall     bridge    local</span><br><span class="line">7e4aae31adc0   host      host      local</span><br><span class="line">fdf56146d7d7   none      null      local</span><br></pre></td></tr></table></figure>

<p>其中，除了hmall以外，其它都是默认的网络</p>
<p>3、让dd和mysql都加入该网络，注意，在加入网络时可以通过–alias给容器起别名，这样该网络内的其它容器可以用别名互相访问！</p>
<p>(1) mysql容器，指定别名为db，另外每一个容器都有一个别名是容器名</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker network connect hmall mysql --alias db</span><br></pre></td></tr></table></figure>

<p>(2) db容器，也就是我们的Java项目</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker network connect hmall dd</span><br></pre></td></tr></table></figure>

<p>4、进入 dd 容器，尝试利用别名访问 db</p>
<p>(1) 进入容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec -it dd bash</span><br></pre></td></tr></table></figure>

<p>(2) 用 db 别名访问</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ping db</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PING db (172.19.0.2) 56(84) bytes of data.</span><br><span class="line">64 bytes from mysql.hmall (172.19.0.2): icmp_seq=1 ttl=64 time=0.063 ms</span><br><span class="line">64 bytes from mysql.hmall (172.19.0.2): icmp_seq=2 ttl=64 time=0.071 ms</span><br><span class="line">64 bytes from mysql.hmall (172.19.0.2): icmp_seq=3 ttl=64 time=0.062 ms</span><br></pre></td></tr></table></figure>

<p>(3) 用容器名访问</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ping mysql</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PING mysql (172.19.0.2) 56(84) bytes of data.</span><br><span class="line">64 bytes from mysql.hmall (172.19.0.2): icmp_seq=1 ttl=64 time=0.074 ms</span><br><span class="line">64 bytes from mysql.hmall (172.19.0.2): icmp_seq=2 ttl=64 time=0.057 ms</span><br><span class="line">64 bytes from mysql.hmall (172.19.0.2): icmp_seq=3 ttl=64 time=0.057 ms</span><br></pre></td></tr></table></figure>

<p>OK，现在无需记住 IP 地址也可以实现容器互联了。</p>
<p><strong>总结</strong>：</p>
<ul>
<li>在自定义网络中，可以给容器起多个别名，默认的别名是容器名本身</li>
<li>在同一个自定义网络中的容器，可以通过别名互相访问</li>
</ul>
<h1 id="4-项目部署"><a href="#4-项目部署" class="headerlink" title="4. 项目部署"></a>4. 项目部署</h1><p>项目说明：</p>
<ul>
<li>hmall：商城的后端代码</li>
<li>hmall-portal：商城用户端的前端代码</li>
<li>hmall-admin：商城管理端的前端代码</li>
</ul>
<p>部署的容器及端口说明：</p>
<table>
<thead>
<tr>
<th align="center"><strong>项目</strong></th>
<th align="center"><strong>容器名</strong></th>
<th align="center"><strong>端口</strong></th>
<th align="center"><strong>备注</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center">hmall</td>
<td align="center">hmall</td>
<td align="center">8080</td>
<td align="center">黑马商城后端API入口</td>
</tr>
<tr>
<td align="center">hmall-portal</td>
<td align="center">nginx</td>
<td align="center">18080</td>
<td align="center">黑马商城用户端入口</td>
</tr>
<tr>
<td align="center">hmall-admin</td>
<td align="center">nginx</td>
<td align="center">18081</td>
<td align="center">黑马商城管理端入口</td>
</tr>
<tr>
<td align="center">mysql</td>
<td align="center">mysql</td>
<td align="center">3306</td>
<td align="center">数据库</td>
</tr>
</tbody></table>
<p>在正式部署前，我们先删除之前的 nginx、dd 两个容器：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">rm</span> -f nginx <span class="built_in">dd</span></span><br></pre></td></tr></table></figure>

<p>mysql容器中已经准备好了商城的数据，所以就不再删除了。</p>
<h2 id="4-1-部署Java项目"><a href="#4-1-部署Java项目" class="headerlink" title="4.1 部署Java项目"></a>4.1 部署Java项目</h2><p><code>hmall</code>项目是一个maven聚合项目，使用IDEA打开<code>hmall</code>项目，查看项目结构如图：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/ToolsIMG/Docker/%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84.png"></p>
<p>我们要部署的就是其中的<code>hm-service</code>，其中的配置文件采用了多环境的方式：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/ToolsIMG/Docker/%E5%A4%9A%E7%8E%AF%E5%A2%83.png"></p>
<p>其中的<code>application-dev.yaml</code>是部署到开发环境的配置，<code>application-local.yaml</code>是本地运行时的配置。</p>
<p>查看 <code>application.yaml</code>，你会发现其中的 JDBC 地址并未写死，而是读取变量：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/ToolsIMG/Docker/JDBC%E5%9C%B0%E5%9D%80%E6%9C%AA%E5%86%99%E6%AD%BB.png"></p>
<p>这两个变量在<code>application-dev.yaml</code>和<code>application-local.yaml</code>中并不相同：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/ToolsIMG/Docker/host%E5%8F%98%E9%87%8F%E5%8C%BA%E5%88%AB.png"></p>
<p>在 dev 开发环境(也就是 Docker 部署时)采用了 mysql 作为地址，刚好是我们的 mysql 容器名，只要两者在一个网络，就一定能互相访问。</p>
<p>我们将项目打包：</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/ToolsIMG/Docker/%E6%89%93%E5%8C%85hmall.png" style="zoom: 67%;">

<p>结果：</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/ToolsIMG/Docker/%E6%89%93%E5%8C%85hmall%E7%BB%93%E6%9E%9C.png" style="zoom:80%;">

<p>将<code>hm-service</code>目录下的<code>Dockerfile</code>和<code>hm-service/target</code>目录下的<code>hm-service.jar</code>一起上传到虚拟机的<code>root</code>目录：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/ToolsIMG/Docker/Dockerfile%E5%92%8Chm-service.jar%E4%B8%8A%E4%BC%A0%E5%88%B0%E8%99%9A%E6%8B%9F%E6%9C%BA.png"></p>
<p>部署项目：</p>
<p>1、构建项目镜像，不指定tag，则默认为latest</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker build -t hmall .</span><br></pre></td></tr></table></figure>

<p>2、查看镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">REPOSITORY    TAG       IMAGE ID       CREATED             SIZE</span><br><span class="line">hmall         latest    5edaf76e6b44   38 minutes ago      365MB</span><br><span class="line">docker-demo   1.0       135cfdff1520   About an hour ago   315MB</span><br><span class="line">mysql         latest    82563e0cbf18   2 days ago          632MB</span><br><span class="line">nginx         latest    92b11f67642b   6 weeks ago         187MB</span><br></pre></td></tr></table></figure>

<p>3、创建并运行容器，并通过 <code>--network</code> 将其加入 <code>hmall</code> 网络，这样才能通过容器名访问 <code>mysql</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d --name hmall --network hmall -p 8080:8080 hmall</span><br></pre></td></tr></table></figure>

<p>测试，通过浏览器访问：<a href="http://yourip:8080/search/list%EF%BC%8C%E6%9F%A5%E7%9C%8B%E5%88%B0%E5%AF%B9%E5%BA%94%E4%BF%A1%E6%81%AF%E5%B0%B1%E6%88%90%E5%8A%9F%E9%83%A8%E7%BD%B2%E3%80%82">http://YourIp:8080/search/list，查看到对应信息就成功部署。</a></p>
<h2 id="4-2-部署前端"><a href="#4-2-部署前端" class="headerlink" title="4.2 部署前端"></a>4.2 部署前端</h2><p><code>hmall-portal</code>和<code>hmall-admin</code>是前端代码，需要基于nginx部署。nginx的部署目录：</p>
<p>其中：</p>
<ul>
<li><code>html</code>是静态资源目录，我们需要把<code>hmall-portal</code>以及<code>hmall-admin</code>都复制进去</li>
<li><code>nginx.conf</code>是nginx的配置文件，主要是完成对<code>html</code>下的两个静态资源目录做代理</li>
</ul>
<p>我们现在要做的就是把整个 nginx 目录上传到虚拟机的 <code>/root</code> 目录下：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/ToolsIMG/Docker/%E6%95%B4%E4%B8%AAnginx%E7%9B%AE%E5%BD%95%E4%B8%8A%E4%BC%A0%E5%88%B0%E8%99%9A%E6%8B%9F%E6%9C%BA.png"></p>
<p>然后创建 nginx 容器并完成两个挂载：</p>
<ul>
<li>把<code>/root/nginx/nginx.conf</code>挂载到<code>/etc/nginx/nginx.conf</code></li>
<li>把<code>/root/nginx/html</code>挂载到<code>/usr/share/nginx/html</code></li>
</ul>
<p>由于需要让 nginx 同时代理 hmall-portal 和 hmall-admin 两套前端资源，因此我们需要暴露两个端口：</p>
<ul>
<li>18080：对应hmall-portal</li>
<li>18081：对应hmall-admin</li>
</ul>
<p>命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">  --name nginx \</span><br><span class="line">  -p 18080:18080 \</span><br><span class="line">  -p 18081:18081 \</span><br><span class="line">  -v /root/nginx/html:/usr/share/nginx/html \</span><br><span class="line">  -v /root/nginx/nginx.conf:/etc/nginx/nginx.conf \</span><br><span class="line">  --network hmall \</span><br><span class="line">  nginx</span><br></pre></td></tr></table></figure>

<p>测试，通过浏览器访问：<a href="http://yourip:18080/">http://YourIp:18080</a></p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/ToolsIMG/Docker/nginx%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E7%BB%93%E6%9E%9C.png"></p>
<h2 id="4-3-DockerCompose"><a href="#4-3-DockerCompose" class="headerlink" title="4.3 DockerCompose"></a>4.3 DockerCompose</h2><p>Docker Compose就可以帮助我们实现<strong>多个相互关联的Docker容器的快速部署</strong>。它允许用户通过一个单独的 <code>docker-compose.yml</code> 模板文件(YAML 格式)来定义一组相关联的应用容器。</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/ToolsIMG/Docker/DockerCompose.png" style="zoom:50%;">

<h3 id="4-3-1-基本语法"><a href="#4-3-1-基本语法" class="headerlink" title="4.3.1 基本语法"></a>4.3.1 基本语法</h3><p>docker-compose.yml文件的基本语法可以参考官方文档：<a href="https://docs.docker.com/compose/compose-file/compose-file-v3/">https://docs.docker.com/compose/compose-file/compose-file-v3/</a></p>
<p>docker-compose文件中可以定义多个相互关联的应用容器，每一个应用容器被称为一个服务(service)。由于 service 就是在定义某个应用的运行时参数，因此与 <code>docker run</code> 参数非常相似。</p>
<p>举例来说，用docker run部署MySQL的命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">  --name mysql \</span><br><span class="line">  -p 3306:3306 \</span><br><span class="line">  -e TZ=Asia/Shanghai \</span><br><span class="line">  -e MYSQL_ROOT_PASSWORD=123 \</span><br><span class="line">  -v ./mysql/data:/var/lib/mysql \</span><br><span class="line">  -v ./mysql/conf:/etc/mysql/conf.d \</span><br><span class="line">  -v ./mysql/init:/docker-entrypoint-initdb.d \</span><br><span class="line">  --network hmall</span><br><span class="line">  mysql</span><br></pre></td></tr></table></figure>

<p>如果用<code>docker-compose.yml</code>文件来定义，就是这样：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.8&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">mysql:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;3306:3306&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="number">123</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;./mysql/conf:/etc/mysql/conf.d&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;./mysql/data:/var/lib/mysql&quot;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">new</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">new:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">hmall</span></span><br></pre></td></tr></table></figure>

<p>对比如下：</p>
<table>
<thead>
<tr>
<th align="center"><strong>docker run 参数</strong></th>
<th align="center"><strong>docker compose 指令</strong></th>
<th align="center"><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center">–name</td>
<td align="center">container_name</td>
<td align="center">容器名称</td>
</tr>
<tr>
<td align="center">-p</td>
<td align="center">ports</td>
<td align="center">端口映射</td>
</tr>
<tr>
<td align="center">-e</td>
<td align="center">environment</td>
<td align="center">环境变量</td>
</tr>
<tr>
<td align="center">-v</td>
<td align="center">volumes</td>
<td align="center">数据卷配置</td>
</tr>
<tr>
<td align="center">–network</td>
<td align="center">networks</td>
<td align="center">网络</td>
</tr>
</tbody></table>
<p>黑马商城部署文件：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.8&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">mysql:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;3306:3306&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="number">123</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;./mysql/conf:/etc/mysql/conf.d&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;./mysql/data:/var/lib/mysql&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;./mysql/init:/docker-entrypoint-initdb.d&quot;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">hm-net</span></span><br><span class="line">  <span class="attr">hmall:</span></span><br><span class="line">    <span class="attr">build:</span> </span><br><span class="line">      <span class="attr">context:</span> <span class="string">.</span></span><br><span class="line">      <span class="attr">dockerfile:</span> <span class="string">Dockerfile</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">hmall</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8080:8080&quot;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">hm-net</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mysql</span></span><br><span class="line">  <span class="attr">nginx:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;18080:18080&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;18081:18081&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;./nginx/nginx.conf:/etc/nginx/nginx.conf&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;./nginx/html:/usr/share/nginx/html&quot;</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">hmall</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">hm-net</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">hm-net:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">hmall</span></span><br></pre></td></tr></table></figure>

<h3 id="4-3-2-基础命令"><a href="#4-3-2-基础命令" class="headerlink" title="4.3.2 基础命令"></a>4.3.2 基础命令</h3><p>编写好docker-compose.yml文件，就可以部署项目了。常见的命令：<a href="https://docs.docker.com/compose/reference/">https://docs.docker.com/compose/reference/</a></p>
<p>基本语法如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker compose [OPTIONS] [COMMAND]</span><br></pre></td></tr></table></figure>

<p>其中，OPTIONS 和 COMMAND 都是可选参数，比较常见的有：</p>
<table>
<thead>
<tr>
<th align="center"><strong>类型</strong></th>
<th align="center"><strong>参数或指令</strong></th>
<th align="center"><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center">Options</td>
<td align="center">-f</td>
<td align="center">指定compose文件的路径和名称</td>
</tr>
<tr>
<td align="center">Options</td>
<td align="center">-p</td>
<td align="center">指定project名称。project就是当前compose文件中设置的多个service的集合，是逻辑概念</td>
</tr>
<tr>
<td align="center">Commands</td>
<td align="center">up</td>
<td align="center">创建并启动所有service容器</td>
</tr>
<tr>
<td align="center">Commands</td>
<td align="center">down</td>
<td align="center">停止并移除所有容器、网络</td>
</tr>
<tr>
<td align="center">Commands</td>
<td align="center">ps</td>
<td align="center">列出所有启动的容器</td>
</tr>
<tr>
<td align="center">Commands</td>
<td align="center">logs</td>
<td align="center">查看指定容器的日志</td>
</tr>
<tr>
<td align="center">Commands</td>
<td align="center">stop</td>
<td align="center">停止容器</td>
</tr>
<tr>
<td align="center">Commands</td>
<td align="center">start</td>
<td align="center">启动容器</td>
</tr>
<tr>
<td align="center">Commands</td>
<td align="center">restart</td>
<td align="center">重启容器</td>
</tr>
<tr>
<td align="center">Commands</td>
<td align="center">top</td>
<td align="center">查看运行的进程</td>
</tr>
</tbody></table>
<blockquote>
<p>演示</p>
</blockquote>
<p>1、进入 root 目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /root</span><br></pre></td></tr></table></figure>

<p>2、删除旧容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker rm -f $(docker ps -qa)</span><br></pre></td></tr></table></figure>

<p>3、删除hmall镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker rmi hmall</span><br></pre></td></tr></table></figure>

<p>4、清空MySQL数据</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rm -rf mysql/data</span><br></pre></td></tr></table></figure>

<p>5、启动所有，<code>-d</code> 参数是后台启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker compose up -d</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[+] Building 15.5s (8/8) FINISHED</span><br><span class="line"> =&gt; [internal] load build definition from Dockerfile                                    0.0s</span><br><span class="line"> =&gt; =&gt; transferring dockerfile: 358B                                                    0.0s</span><br><span class="line"> =&gt; [internal] load .dockerignore                                                       0.0s</span><br><span class="line"> =&gt; =&gt; transferring context: 2B                                                         0.0s</span><br><span class="line"> =&gt; [internal] load metadata for docker.io/library/openjdk:11.0-jre-buster             15.4s</span><br><span class="line"> =&gt; [1/3] FROM docker.io/library/openjdk:11.0-jre-buster@sha256:3546a17e6fb4ff4fa681c3  0.0s</span><br><span class="line"> =&gt; [internal] load build context                                                       0.0s</span><br><span class="line"> =&gt; =&gt; transferring context: 98B                                                        0.0s</span><br><span class="line"> =&gt; CACHED [2/3] RUN ln -snf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime &amp;&amp; echo   0.0s</span><br><span class="line"> =&gt; CACHED [3/3] COPY hm-service.jar /app.jar                                           0.0s</span><br><span class="line"> =&gt; exporting to image                                                                  0.0s</span><br><span class="line"> =&gt; =&gt; exporting layers                                                                 0.0s</span><br><span class="line"> =&gt; =&gt; writing image sha256:32eebee16acde22550232f2eb80c69d2ce813ed099640e4cfed2193f71  0.0s</span><br><span class="line"> =&gt; =&gt; naming to docker.io/library/root-hmall                                           0.0s</span><br><span class="line">[+] Running 4/4</span><br><span class="line"> ✔ Network hmall    Created                                                             0.2s</span><br><span class="line"> ✔ Container mysql  Started                                                             0.5s</span><br><span class="line"> ✔ Container hmall  Started                                                             0.9s</span><br><span class="line"> ✔ Container nginx  Started                                                             1.5s</span><br></pre></td></tr></table></figure>

<p>6、查看镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker compose images</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CONTAINER           REPOSITORY          TAG                 IMAGE ID            SIZE</span><br><span class="line">hmall               root-hmall          latest              32eebee16acd        362MB</span><br><span class="line">mysql               mysql               latest              3218b38490ce        516MB</span><br><span class="line">nginx               nginx               latest              605c77e624dd        141MB</span><br></pre></td></tr></table></figure>

<p>7、查看容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker compose ps</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">NAME                IMAGE               COMMAND                  SERVICE             CREATED             STATUS              PORTS</span><br><span class="line">hmall               root-hmall          <span class="string">&quot;java -jar /app.jar&quot;</span>     hmall               54 seconds ago      Up 52 seconds       0.0.0.0:8080-&gt;8080/tcp, :::8080-&gt;8080/tcp</span><br><span class="line">mysql               mysql               <span class="string">&quot;docker-entrypoint.s…&quot;</span>   mysql               54 seconds ago      Up 53 seconds       0.0.0.0:3306-&gt;3306/tcp, :::3306-&gt;3306/tcp, 33060/tcp</span><br><span class="line">nginx               nginx               <span class="string">&quot;/docker-entrypoint.…&quot;</span>   nginx               54 seconds ago      Up 52 seconds       80/tcp, 0.0.0.0:18080-18081-&gt;18080-18081/tcp, :::18080-18081-&gt;18080-18081/tcp</span><br></pre></td></tr></table></figure>

<p>打开浏览器，访问：<a href="http://yourip:8080/">http://YourIp:8080</a></p>
]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>【步骤零】实验环境准备</title>
    <url>/posts/BigData-Case-Volume-Zero/</url>
    <content><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>简介：本文章基于厦门大学提供的<a href="https://dblab.xmu.edu.cn/post/7499/">大数据课程实验案例：网站用户行为分析</a>，通过使用 CentOS 操作编写而来。具体介绍请打开链接进行阅读。</p>
<p><font color="red">这里介绍几点值得特别注意的事项：</font></p>
<p>1、对于案例所涉及的系统及软件此文档使用的是以下版本，其他软件版本随意：</p>
<ul>
<li>Linux系统（CentOS7）</li>
<li>MySQL（5.7）</li>
<li>Hadoop（3.1.3）</li>
<li>HBase（2.2.2，HBase版本需要和Hadoop版本兼容）</li>
<li>Hive（3.1.2，Hive需要和Hadoop版本兼容）</li>
<li>Sqoop（1.4.7）</li>
<li>R（3.6.0）</li>
<li>IDEA（ 2023.3.6 社区版）</li>
</ul>
<p><font color="red"><strong>PS：Hadoop 与 HBase、Hive 版本一定要兼容！！！版本一定要兼容！！！这很重要！！！</strong></font>😃😃😃其他软件随意。</p>
<p>2、本文章所有<strong>下载</strong>的所有软件均在 <code>/</code> 目录下。所有<strong>安装</strong>的所有软件均在 <code>/usr/local/</code> 目录下以 <code>软件名-版本号</code> 方式命名。在进行每个软件的安装操作之前请先<strong>整体阅读</strong>整个软件安装流程的文章有个整体思路，<strong>了解到安装此软件需要做哪些设置再进行操作</strong>，这样可以避免很多不必要的麻烦。</p>
<p>3、<font color="red"><strong>此案例分为五个步骤，请按照步骤顺序进行阅读！！</strong>🙂🙂</font></p>
<h1 id="1-安装-Linux-系统"><a href="#1-安装-Linux-系统" class="headerlink" title="1. 安装 Linux 系统"></a>1. 安装 Linux 系统</h1><h2 id="1-1-Linux-的选择"><a href="#1-1-Linux-的选择" class="headerlink" title="1.1 Linux 的选择"></a>1.1 Linux 的选择</h2><p>在 Linux 系统各个发行版中，CentOS 系统和 Ubuntu 系统在服务端和桌面端使用占比最高，选择 Ubuntu 还是 CentOS 主要取决于你的具体需求和使用场景。</p>
<p><strong>适用场景</strong>：</p>
<ul>
<li>CentOS 更适合用于企业级服务器环境，特别是那些需要长时间运行和大量数据处理的场景。它属于Red Hat Enterprise Linux(RHEL)的社区版本，核心思想是企业级稳定性和可靠性。</li>
<li>Ubuntu 则更注重用户友好和易用性，因此更适合个人电脑和桌面应用。它也常用于学习和探索 Linux 的初学者。</li>
</ul>
<p><strong>稳定性</strong>：</p>
<ul>
<li>CentOS 以其稳定性著称。它经过长时间的测试，只有经过验证的稳定版本才会被发布，因此更加安全稳定。</li>
<li>Ubuntu 的 LTS(长期支持)版本也非常稳定，提供长达五年的维护和支持。然而，其升级包有时可能会造成系统的不稳定和不安全。</li>
</ul>
<p><strong>使用难度和界面</strong>：</p>
<ul>
<li>Ubuntu 对新手更为友好，它拥有大量的帮助文档和教程，用户界面也更加友好，适合不熟悉 Linux 的用户。</li>
<li>CentOS 则相对较难上手，特别是对新用户来说。它的界面设计更加简洁，侧重于稳定性和安全性。</li>
</ul>
<p><strong>软件包和兼容性</strong>：</p>
<ul>
<li>CentOS 拥有庞大的软件包库，提供了大量的开源软件。</li>
<li>Ubuntu 则与 Canonical 公司以及其他软件供应商有良好的兼容性，对于一些商业软件的支持也更好。</li>
</ul>
<p><strong>社区支持</strong>：</p>
<ul>
<li>Ubuntu 由于其商业支持者和更大的社区，可能在某些情况下能提供更多的帮助。</li>
<li>CentOS 虽然也有社区支持，但可能不如 Ubuntu 的社区那么活跃和广泛。</li>
</ul>
<p>综上所述，如果你需要一个稳定且适用于企业级服务器环境的系统，CentOS 可能是更好的选择。而如果你<font color="red">更注重易用性和友好的用户界面</font>，或者你是一个 Linux 初学者，那么 Ubuntu 可能更适合你。这只是一个大致的指导，具体选择还需要根据你的具体需求和使用场景进行权衡。</p>
<p><font color="red"><strong>PS：本教程选择的是 CentOS7 版本！！！</strong></font>😀下面我们就开始安装 CentOS7 吧！</p>
<h2 id="1-2-CentOS7-下载地址"><a href="#1-2-CentOS7-下载地址" class="headerlink" title="1.2 CentOS7 下载地址"></a>1.2 CentOS7 下载地址</h2><p><a href="https://vault.centos.org/7.6.1810/isos/x86_64/">官网下载</a></p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/CentOS%E5%AE%98%E7%BD%91%E4%B8%8B%E8%BD%BD(1).png" style="zoom: 33%;">

<p>点进去之后依次点击 <code>isos/</code> –&gt; <code>x86_64/</code> ，找到下面文件进行下载</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/CentOS%E5%AE%98%E7%BD%91%E4%B8%8B%E8%BD%BD(2).png" style="zoom: 33%;">

<p><a href="https://mirrors.aliyun.com/centos/7/isos/x86_64/?spm=a2c6h.25603864.0.0.62464511sV8QoX">阿里镜像站</a>：与上面版本有些小差异，不过问题不大。都是CentOS7😉)</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/CentOS%E9%98%BF%E9%87%8C%E4%BA%91%E9%95%9C%E5%83%8F%E4%B8%8B%E8%BD%BD.png" style="zoom: 50%;">

<p>打开网站后下载对应的 <code>ios</code> 文件就可以了。</p>
<h2 id="1-3-CentOS7-系统安装"><a href="#1-3-CentOS7-系统安装" class="headerlink" title="1.3 CentOS7 系统安装"></a>1.3 CentOS7 系统安装</h2><p>Linux 系统的安装主要有两种方式：虚拟机安装和双系统安装。</p>
<p>虚拟机安装和使用 Linux 的硬件配置比较高，<del>建议</del><font color="red">要求</font>电脑至少有<strong>8G</strong>运行内存且剩余的存储容量<strong>足够大</strong>。电脑较旧或运行内存小于等于 4G 的电脑强烈建议选择双系统安装。否则，在配置较低的电脑上运行 Linux 虚拟机，<del>系统运行速度会非常慢</del><font color="red">电脑会卡死</font>😓。</p>
<p>什么是运行内存和存储容量？</p>
<p>通俗的说，运行内存决定了同时运行的程序多少，存储空间决定了能装文件的多少。口语中习惯上用运行内存＋存储空间简单描述设备主要指标。</p>
<p>如何查看电脑运行内存和存储容量？</p>
<ul>
<li><p>运行内存：</p>
<p>双击 <code>此电脑</code> 打开如下界面，然后在空白处右键，点击 <code>属性</code>。</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/%E6%9F%A5%E7%9C%8B%E7%94%B5%E8%84%91%E8%BF%90%E8%A1%8C%E5%86%85%E5%AD%98.png" style="zoom: 67%;">

<p>然后会出现这个界面，这里显示的 <code>RAM</code> 就是电脑的运行内存了。</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/%E7%94%B5%E8%84%91%E8%BF%90%E8%A1%8C%E5%86%85%E5%AD%98.png" style="zoom: 67%;">
</li>
<li><p>存储容量：</p>
<p>简单的来说就是你电脑所有盘符的大小，双击 <code>此电脑</code> 就可以看到自己电脑所有盘符的信息。</p>
</li>
</ul>
<p>由于我的电脑是<strong>16G + 512G</strong> ，所以我这里使用<strong>虚拟机安装</strong>。</p>
<blockquote>
<p>虚拟机 VMware 安装</p>
</blockquote>
<p><a href="https://www.vmware.com/products/workstation-pro/workstation-pro-evaluation.html">官网下载</a></p>
<p>点开后鼠标向下滑，点击 <code>VMware Workstation 17 Pro</code> 栏下的 <code>DOWNLOAD NOW</code> 之后开始下载 VMware。</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/VMware%E5%AE%98%E7%BD%91%E4%B8%8B%E8%BD%BD.png" style="zoom: 50%;">

<p>安装时使用 <font color="red">“傻瓜式”</font> 安装，无脑下一步即可。<font color="red">PS：注意按自己需求修改安装路径！</font>😏</p>
<p>安装完后需要产品许可证激活软件，大家可以在网上自行搜索。</p>
<p>安装成功后，<code>Win + i</code> 打开 <code>Windows</code> 设置找到 <code>网络和 Internet</code>，点击 <code>高级网络设置</code> 里的 <code>更改设配器选项</code>，出现了下面两个<strong>网络适配器</strong>则说明安装成功了。如果没有出现就说明网络适配器没有安装成功，那可能就要重装 VMware 咯😣。<font color="red">PS：重装之前记得将以前安装的 VMware 删除干净 ！！！！！</font>😂</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/%E7%BD%91%E7%BB%9C%E9%80%82%E9%85%8D%E5%99%A8.png" style="zoom: 67%;">

<blockquote>
<p>在 Windows 使用 VMware 安装 CentOS7</p>
</blockquote>
<p>1、打开 VMware 点击 创建新的虚拟机 。</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/%E5%AE%89%E8%A3%85CentOS7(1).png" style="zoom: 50%;">

<p>2、选择 自定义(高级)，点击下一步。</p>
<p>典型安装：VMware 会将主流的配置应用在虚拟机的操作系统上，对于新手来很友好。</p>
<p>自定义安装：自定义安装可以针对性的把一些资源加强，把不需要的资源移除。避免资源的浪费。</p>
<p>这里我选择<strong>自定义安装</strong>。</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/%E5%AE%89%E8%A3%85CentOS7(2).png" style="zoom: 67%;">

<p>3、连续点击下一步来到这个界面，找到择 <code>iso</code> 文件，然后点击下一步。</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/%E5%AE%89%E8%A3%85CentOS7(3).png" style="zoom:67%;">

<p>4、设置 Linux 名称、用户名、密码，设置完成点击下一步。</p>
<p>密码建议尽量简单一些，我这里设置的是 <code>123456</code> 。</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/%E5%AE%89%E8%A3%85CentOS7(4).png" style="zoom: 67%;">

<p>5、设置虚拟机名称和位置，然后点击下一步。</p>
<p>虚拟机安装完成后所在的目录，建议放在 C 盘以外的盘符。</p>
<p>我这里设置成 C 盘仅仅是教学需要，因为我电脑其他盘符已经 <font color="red">红</font> 了。😭😭😭</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/%E5%AE%89%E8%A3%85CentOS7(5).png" style="zoom:67%;">

<p>6、选择处理器数量以及每个处理器的内核数量(两者乘积不能超过本机的CPU内核数)，我这里都设置成 <code>2</code> ，大家随意，然后点击下一步。</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/%E5%AE%89%E8%A3%85CentOS7(6).png" style="zoom:67%;">

<p>7、选择内存大小(根据本机内存大小适当选择，建议不要选择超过本机一半的内存，例如我的是 16G，所以我选择 4G 内存)，然后点击下一步。</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/%E5%AE%89%E8%A3%85CentOS7(7).png" style="zoom: 67%;">

<p>8、连续点击下一步来到这个界面，选择磁盘大小(根据本机大小自己定，建议本机磁盘充裕的情况下越大越好，我这里选择 40G )，将虚拟机磁盘拆分成多个文件，然后点击下一步。</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/%E5%AE%89%E8%A3%85CentOS7(8).png" style="zoom:67%;">

<p>9、连续点击下一步来到这个界面，核对信息无误后点击 完成 即可。</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/%E5%AE%89%E8%A3%85CentOS7(9).png" style="zoom:67%;">

<p>至此 CentOS7 的安装就结束啦！现在只需要等待虚拟机开机即可。<strong>PS：虚拟机第一次开机较久，大家需要耐心等待哦。</strong>😊</p>
<p>加载完成后会出现以下界面：</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%BC%80%E6%9C%BA%E7%95%8C%E9%9D%A2.png" style="zoom: 50%;">

<p>只需要点击一下用户然后输入密码，再点击 <code>Sign In</code> 即可进入虚拟机主界面(第一次开机系统会弹出提示，直接点击右上角 “X” 掉即可)，这就成功进入虚拟机了。</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%BB%E7%95%8C%E9%9D%A2.png" style="zoom: 50%;">

<p>至此 Linux 系统已经成功安装好啦！！！！！！！！！！</p>
<p><strong>如何查看自己虚拟机的 ip 地址？</strong></p>
<p>桌面空白处右键点击 <code>Open Terminal</code> 打开 Terminal ，输入 <code>ifconfig</code> 后在 ens33 下看到的这个就是虚拟机的 ip 地址。</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/%E8%99%9A%E6%8B%9F%E6%9C%BAip%E5%9C%B0%E5%9D%80.png" style="zoom:50%;">

<h1 id="远程连接工具"><a href="#远程连接工具" class="headerlink" title="远程连接工具"></a>远程连接工具</h1><p>我们使用 VMware 可以得到 Linux 虚拟机，但是在 VMware 中操作 Linux 的命令行页面不太方便，主要是：<del>和Linux系统的各类交互，跨越 VMware 不方便</del>界面不好看。😐</p>
<p>这里介绍的是 FinalShell ，我为什么选择 FinalShell 呢？主要是 FinalShell <del>是国产SSH工具(纯中文)</del>我用习惯了而已😁，当然市面上也有很多其他的远程连接工具，你可以自行选择。🤔</p>
<h2 id="FinalShell-下载安装"><a href="#FinalShell-下载安装" class="headerlink" title="FinalShell 下载安装"></a>FinalShell 下载安装</h2><p><a href="https://www.hostbuf.com/t/988.html">下载官网</a>，点进去选择相应的版本即可。</p>
<p>安装：安装？安装时使用 <font color="red">“傻瓜式”</font> 安装，无脑下一步即可。<font color="red">PS：注意按自己需求修改安装路径！</font>😏</p>
<h2 id="FinalShell-使用"><a href="#FinalShell-使用" class="headerlink" title="FinalShell 使用"></a>FinalShell 使用</h2><blockquote>
<p>FinalShell 新建连接</p>
</blockquote>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/FinalShell%E6%96%B0%E5%BB%BA%E8%BF%9E%E6%8E%A5(1).png" style="zoom: 67%;">

<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/FinalShell%E6%96%B0%E5%BB%BA%E8%BF%9E%E6%8E%A5(2).png" style="zoom: 50%;">

<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/FinalShell%E6%96%B0%E5%BB%BA%E8%BF%9E%E6%8E%A5(3).png" style="zoom: 50%;">

<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/FinalShell%E6%96%B0%E5%BB%BA%E8%BF%9E%E6%8E%A5(4).png" style="zoom: 50%;">

<blockquote>
<p>FinalShell 文件上传</p>
</blockquote>
<p>在安装各种软件的时候为了方便，我们通常都是将软件在本机下载好然后再上传到 Linux 系统进行安装，那么怎样将本机下载的软件上传到 Linux 呢？</p>
<p>两种方式：</p>
<ul>
<li>命令上传(需要 <code>sudo yum -y install lrzsz</code> 安装)</li>
<li>直接拖动文件(需要切换 root 用户连接 Linux)</li>
</ul>
<p><strong>第一种：命令上传</strong></p>
<p><font color="red">PS：在上传文件之前请前用 <code>cd</code> 命令切换到文件要上传的目录。</font>😊</p>
<p>执行 <code>sudo rz</code> 命令后会弹出以下界面(第一次使用需要 <code>sudo yum -y install lrzsz</code> 安装一下)，选择下载的文件后点击确定(或者直接双击文件)</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/FinalShell%E5%91%BD%E4%BB%A4%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6(1).png" style="zoom:67%;">

<p>等待上传进度 100% 即可</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/FinalShell%E5%91%BD%E4%BB%A4%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6(2).png" style="zoom: 50%;">

<p>上传完成后可以通过 <code>ll</code> 命令查看，在目录下出现了对应安装包，则上传成功</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/%E5%AE%89%E8%A3%85%E5%8C%85%E4%B8%8A%E4%BC%A0%E6%88%90%E5%8A%9F.png" style="zoom: 50%;">

<p><strong>第二种：直接拖动文件</strong></p>
<p><font color="red">PS：使用这种方式一定要用 root 用户连接Linux，普通用户会上传失败</font>😊</p>
<p>怎么切换用户？</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/FinalShell%E5%88%87%E6%8D%A2%E7%94%A8%E6%88%B7.png" style="zoom: 50%;">

<p>切换用户后点击 FinalShell 右下角箭头</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/FinalShell%E6%8B%96%E5%8A%A8%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0(1).png" style="zoom:50%;">

<p>然后点击选择文件要上传到的目录，在 Windows 中直接将文件拖到此目录即可</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/FinalShell%E6%8B%96%E5%8A%A8%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0(2).png" style="zoom:50%;">

<p>之后就可以通过图形化界面在目录中看到刚刚上传的文件了</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/FinalShell%E6%8B%96%E5%8A%A8%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0(3).png" style="zoom:50%;">

<p><font color="red">PS：上传完之后记得切换回普通用户，避免误操带来系统损坏。</font>😊</p>
<p><strong>在后面涉及到文件上传的内容均采用以上两种方式(按需自选其一即可)，所以后面不再过多赘述。</strong></p>
<h1 id="2-Hadoop"><a href="#2-Hadoop" class="headerlink" title="2. Hadoop"></a>2. Hadoop</h1><p>Hadoop 是一个由 Apache 基金会开发的分布式系统框架，它利用集群的强大计算能力进行大数据的存储和处理，通过 HDFS 实现分布式存储，并通过 MapReduce 实现分布式计算，为企业提供了高效、可靠、可扩展的大数据处理能力。</p>
<h2 id="2-1-Hadoop-安装准备"><a href="#2-1-Hadoop-安装准备" class="headerlink" title="2.1 Hadoop 安装准备"></a>2.1 Hadoop 安装准备</h2><blockquote>
<p>配置操作权限</p>
</blockquote>
<p>安装之前我们要先了解到：我们刚才在安装 CentOS 的时候设置的用户名只是普通用户，而普通用户在许多地方的权限是受限的。那要怎么解决普通用户在 Linux 系统下权限受限的问题呢？</p>
<p>两个方案(<font color="red">推荐使用第二种，不建议长期使用 root 用户，避免带来系统损坏</font>)：</p>
<ul>
<li>使用 root 用户进行操作( root 用户拥有最大的系统操作权限)。</li>
<li>为普通用户配置 sudo 认证(为普通用户增加管理员权限)。(<font color="red">推荐</font>)</li>
</ul>
<p><strong>第一种：使用 root 用户进行操作</strong></p>
<p>直接使用命令然后输入密码即可切换到 root 用户。(输入密码时可能不会显示，输入密码后直接 <code>Enter</code> 确认就行)。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 切换到 root 用户</span></span><br><span class="line">su - root</span><br></pre></td></tr></table></figure>

<p>切换用户后，可以通过 <code>exit</code> 命令退回上一个用户，也可以使用快捷键：<code>ctrl + d</code> 。</p>
<p>使用普通用户，切换到其它用户需要输入密码，如切换到 root 用户。</p>
<p>使用 root 用户切换到其它用户，无需密码，可以直接切换。</p>
<p><strong>第二种：为普通用户配置 sudo 认证</strong></p>
<p>为普通用户配置 sudo 认证后，在执行其它命令之前，带上 sudo ，即可为这一条命令临时赋予 root 授权。</p>
<p>1、切换到 root 用户，使用命令然后输入密码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 切换到 root 用户</span></span><br><span class="line">su - root</span><br></pre></td></tr></table></figure>

<p>2、执行以下命令，会自动通过 vi 编辑器打开：&#x2F;etc&#x2F;sudoers</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">visudo	<span class="comment">#或者执行 vi /etc/sudoers</span></span><br></pre></td></tr></table></figure>

<p>3、先按一下键盘上的 <code>ESC</code> 键，再输入<code>:set nu</code> 显示行号，找到 <code>root ALL=(ALL) ALL</code> 这行，然后输入 <code>:101</code> (跳到第101行 )，然后在这行增加一行内容：<code>muyoukule ALL=(ALL)	NOPASSWD:ALL</code> (其中 <code>muyoukule</code> 是需要配置 <code>sudo</code> 认证的普通用户，<code>NOPASSWD:ALL</code> 表示使用 sudo 命令时无需输入密码，中间的间隔为 <code>tab</code> )，如下图所示：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/sudo%E8%AE%A4%E8%AF%81.png"></p>
<p>4、添加上一行内容后，先按一下键盘上的 <code>ESC</code> 键，然后输入 <code>:wq</code> 再按回车键保存退出就可以了。</p>
<p>5、最后使用 <code>ctrl + d</code> 注销当前 root 用户，回到刚才自己创建的用户，至此为普通用户配置 <code>sudo</code> 认证成功。</p>
<blockquote>
<p>检查网络</p>
</blockquote>
<p>使用 <code>muyoukule</code> 用户登录后，还需要安装几个软件才能安装 Hadoop。</p>
<p>CentOS 使用 yum 来安装软件，需要联网环境，首先应检查一下是否连上了网络。</p>
<p>提供两种方式：</p>
<ul>
<li><p>如下图所示，桌面右上角的网络图标若显示 <font color="green">绿</font> 点，则表明还联网。</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/%E6%A3%80%E6%9F%A5%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE.png" style="zoom: 50%;">
</li>
<li><p>使用 <code>ping www.baidu.com</code>，ping 得通说明可以联网。</p>
</li>
</ul>
<blockquote>
<p>安装 SSH、配置 SSH 无密码登陆</p>
</blockquote>
<p>集群、单节点模式都需要用到 SSH 登陆(类似于远程登陆，你可以登录某台 Linux 主机，并且在上面运行命令)，一般情况下，CentOS 默认已安装了 SSH client、SSH server，打开终端执行如下命令进行检验：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 检验是否安装了 SSH client、SSH server</span></span><br><span class="line">rpm -qa | grep ssh</span><br></pre></td></tr></table></figure>

<p>如果返回的结果如下图所示，包含了 SSH client 跟 SSH server，则不需要再安装。</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/%E6%A3%80%E6%9F%A5SSH.png"></p>
<p>若需要安装，则可以通过 yum 进行安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum -y install openssh-clients</span><br><span class="line">sudo yum -y install openssh-server</span><br></pre></td></tr></table></figure>

<p>接着执行如下命令测试一下 SSH 是否可用：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh localhost</span><br></pre></td></tr></table></figure>

<p>此时会有如下提示(SSH首次登陆提示)，输入 yes 。然后按提示输入密码 <code>123456</code> (输入你自己安装虚拟机的时候输入的密码)，这样就登陆到本机了。</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/%E6%B5%8B%E8%AF%95SSH%20.png"></p>
<p>但这样登陆是需要每次输入密码的，我们需要配置成 SSH 无密码登陆比较方便。</p>
<p>首先输入 <code>exit</code> 退出刚才的 ssh，就回到了我们原先的终端窗口，然后利用 ssh-keygen 生成密钥，并将密钥加入到授权中：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 退出刚才的 ssh localhost</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 若没有该目录，请先执行一次ssh localhost</span></span><br><span class="line"><span class="built_in">cd</span> ~/.ssh/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 会有提示，都按回车就可以</span></span><br><span class="line">ssh-keygen -t rsa</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加入授权</span></span><br><span class="line"><span class="built_in">cat</span> id_rsa.pub &gt;&gt; authorized_keys</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改文件权限</span></span><br><span class="line"><span class="built_in">chmod</span> 600 ./authorized_keys</span><br></pre></td></tr></table></figure>

<p>此时再用 <code>ssh localhost</code> 命令，无需输入密码就可以直接登陆了，如下图所示：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/SSH%E6%97%A0%E5%AF%86%E7%99%BB%E5%85%A5.png"></p>
<blockquote>
<p>准备 Java 环境</p>
</blockquote>
<p>准备 Java 环境之前我们要知道两件事：</p>
<ul>
<li>软件安装的那些事：<a href="https://www.php.cn/faq/502305.html">Linux软件安装在哪个目录？</a> <font color="red">很重要！！！！一定要仔细阅读！！！避免后续自己找不到安装的软件！！！</font>😅</li>
<li><strong>JRE 和 JDK 的主要区别：</strong>JRE ( Java 运行环境)仅用于运行已 <font color="red">编译</font> 的 Java 程序，而  JDK ( Java 开发工具包)则包含了 <font color="red">编译、调试、运行</font> Java 程序所需的所有工具，用于 Java 程序的开发。简单来说，JRE 是运行 Java 的，而 JDK 是开发 Java 的。</li>
</ul>
<p>在Linux系统中，Java 环境的选择和配置对于运行 Hadoop 等 Java 应用至关重要，因为 Hadoop 是基于 Java 开发的。我们可以选择以下两种方式安装 Java 环境(<font color="red">推荐第二种方式</font>)：</p>
<ul>
<li>安装 OpenJDK 。</li>
<li>安装 Oracle 的 JDK 。(<font color="red">推荐</font>)</li>
</ul>
<p>Linux 系统通过 yum 安装 OpenJDK 更为简便且开源免费，而安装 Oracle JDK 则需手动下载并可能涉及商业授权，但享有 Oracle 的专业技术支持，两者在版本更新和稳定性上也有所不同，选择取决于具体需求和偏好。</p>
<p><strong>第一种：安装 OpenJDK</strong></p>
<p>OpenJDK 是开源的，并且被广大社区所支持，因此在许多 Linux 发行版中，包括CentOS ，OpenJDK 被作为默认的 Java 环境安装。以 CentOS7 为例，它默认安装了 OpenJDK 1.8 的 Java 运行环境(JRE)。可以使用 <code>java -version</code> 查看到：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/%E9%BB%98%E8%AE%A4OpenJDK.png"></p>
<p>但是<strong>不能</strong>在系统环境变量中查看到 <code>JAVA_HOME</code> ，由于 Hadoop 需要这个环境变量，所以后面需要<strong>进行 Java 的相关环境变量配置</strong>。</p>
<p>然而，对于 Hadoop 等 Java 应用的开发和运行，通常需要完整的 Java 开发工具包(JDK)，而不仅仅是 JRE 。因此，为了开发方便和确保 Hadoop 等应用的正常运行，用户需要安装 JDK 。</p>
<p>在 CentOS 中，可以通过 <code>yum</code> 包管理器来安装 JDK。具体过程请参考：<a href="https://blog.csdn.net/qq_43699958/article/details/134532819">使用 yum 安装 jdk 并配置环境变量</a></p>
<p><strong>第二种：安装 Oracle 的 JDK</strong></p>
<p><a href="https://www.oracle.com/java/technologies/javase/javase8-archive-downloads.html">JDK 下载官网</a></p>
<p>打开后下拉找到相应的版本下载即可，点击下载后在弹出的页面中输入 Oracle 的账户密码即可下载(如无账户，请自行注册，注册是免费的)。<font color="red">PS：一定要下载以 <code>.tar.gz</code> 结尾的文件，不要下载错了哦！！</font>😊</p>
<p>下载好之后就可以开始安装了：</p>
<p>1、执行以下命令，选择文件上传到 Linux 的 &#x2F; 目录(具体请参考上文 <strong>FinalShell 文件上传</strong>)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /</span><br><span class="line"></span><br><span class="line">sudo rz</span><br></pre></td></tr></table></figure>

<p>2、解压缩 JDK 安装文件到 &#x2F;usr&#x2F;local 目录，解压完成后可以进入到 &#x2F;usr&#x2F;local 目录查看是否多了以下文件夹：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 解压缩 JDK 安装文件到 /usr/local 目录</span></span><br><span class="line">sudo tar -zxvf jdk-8u162-linux-x64.tar.gz -C /usr/local</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入到 /usr/local 目录</span></span><br><span class="line"><span class="built_in">cd</span> /usr/local</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看文件</span></span><br><span class="line">ll</span><br></pre></td></tr></table></figure>

<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/%E6%9F%A5%E7%9C%8B%E8%A7%A3%E5%8E%8B%E6%98%AF%E5%90%A6%E6%88%90%E5%8A%9F.png"></p>
<p>3、配置环境变量，使用 vim 编辑器修改 &#x2F;etc&#x2F;profile 文件，在文件最后添加环境变量。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改 /etc/profile 文件</span></span><br><span class="line">sudo vim /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment"># Java环境变量</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/local/jdk1.8.0_162</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$&#123;JAVA_HOME&#125;</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure>

<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/%E9%85%8D%E7%BD%AEJava%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F.png" style="zoom: 67%;">

<p>4、重启环境变量配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure>

<p>5、检查安装结果，如果设置正确的话，<code>$JAVA_HOME/bin/java -version</code> 会输出 java 的版本信息，且和 <code>java -version</code> 的输出结果一样：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$JAVA_HOME</span>/bin/java -version</span><br><span class="line">java -version</span><br></pre></td></tr></table></figure>

<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/%E6%A3%80%E6%9F%A5Java%E5%AE%89%E8%A3%85%E7%BB%93%E6%9E%9C.png"></p>
<p>这样，Hadoop 所需的 Java 运行环境就安装好了。</p>
<h2 id="2-2-Hadoop下载安装"><a href="#2-2-Hadoop下载安装" class="headerlink" title="2.2 Hadoop下载安装"></a>2.2 Hadoop下载安装</h2><p><a href="https://archive.apache.org/dist/hadoop/common/">官网下载</a></p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/hadoop%E5%AE%98%E7%BD%91%E4%B8%8B%E8%BD%BD(1).png" style="zoom: 67%;">

<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/hadoop%E5%AE%98%E7%BD%91%E4%B8%8B%E8%BD%BD(2).png" style="zoom:50%;">

<p>打不开官网？试试<a href="https://mirrors.tuna.tsinghua.edu.cn/apache/hadoop/common/">清华大学开源软件镜像站下载</a>，不过好像只有新版。🤔</p>
<p>下载好之后就可以开始安装了：</p>
<p>1、执行以下命令，选择文件上传到 Linux 的 &#x2F; 目录(具体请参考上文 <strong>FinalShell 文件上传</strong>)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /</span><br><span class="line"></span><br><span class="line">sudo rz</span><br></pre></td></tr></table></figure>

<p>2、解压缩 Hadoop 安装文件到 &#x2F;usr&#x2F;local 目录，解压完成后可以进入到 &#x2F;usr&#x2F;local 目录查看是否成功。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 解压缩安装文件到 /usr/local 目录</span></span><br><span class="line">sudo tar -zxvf hadoop-3.1.3.tar.gz -C /usr/local</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入到 /usr/local 目录</span></span><br><span class="line"><span class="built_in">cd</span> /usr/local</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 hadoop-3.1.3 下的所有文件的所有者改为 muyoukule，</span></span><br><span class="line"><span class="comment"># hadoop-3.1.3 是 hadoop-3.1.3.tar.gz 解压后得到的文件夹</span></span><br><span class="line"><span class="comment"># muyoukule 是当前用户的用户名</span></span><br><span class="line">sudo <span class="built_in">chown</span> -R muyoukule:muyoukule ./hadoop-3.1.3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看文件</span></span><br><span class="line">ll</span><br></pre></td></tr></table></figure>

<p>3、配置环境变量，使用 vim 编辑器修改 &#x2F;etc&#x2F;profile 文件，在文件最后添加环境变量。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改 /etc/profile 文件</span></span><br><span class="line">sudo vim /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment"># Hadoop 环境变量</span></span><br><span class="line"><span class="built_in">export</span> HADOOP_HOME=/usr/local/hadoop-3.1.3</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$HADOOP_HOME</span>/bin:<span class="variable">$HADOOP_HOME</span>/sbin</span><br></pre></td></tr></table></figure>

<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/%E9%85%8D%E7%BD%AEHadoop%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F.png" style="zoom:67%;">

<p>4、重启环境变量配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure>

<p>5、检查安装结果，出现下面信息代表安装成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看 Hadoop 版本信息</span></span><br><span class="line">hadoop version</span><br></pre></td></tr></table></figure>

<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/%E6%A3%80%E6%9F%A5Hadoop%E5%AE%89%E8%A3%85%E7%BB%93%E6%9E%9C.png">

<p>这样，Hadoop 就安装好了。</p>
<h2 id="2-3-Hadoop-单机配置"><a href="#2-3-Hadoop-单机配置" class="headerlink" title="2.3 Hadoop 单机配置"></a>2.3 Hadoop 单机配置</h2><p>Hadoop 默认模式为非分布式模式，无需进行其他配置即可运行。非分布式即单 Java 进程，方便进行调试。</p>
<p>现在我们可以执行例子来感受下 Hadoop 的运行。Hadoop 附带了丰富的例子，包括 wordcount、terasort、join、grep 等。</p>
<ul>
<li>WordCount 是一个基础示例程序，用于计算文本中每个单词的出现次数，通过MapReduce模型实现数据的分布式处理。</li>
<li>Terasort 是 Hadoop 中的一个排序算法，能够处理大规模数据集的排序问题，通过分布式计算和 trie 树的性质提高排序效率。</li>
<li>Join 操作在 Hadoop 中虽然不直接支持，但可以通过编程实现类似的功能，包括 Reduce side join 和 Map side join，用于整合不同数据源中的数据。</li>
<li>Grep 则是一种文本搜索工具，在 Hadoop 中可以用于搜索存储在 HDFS 中的大规模文本文件，通过编写自定义的 Mapper 程序实现特定正则表达式的匹配。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 改变当前工作目录到 /usr/local/hadoop-3.1.3</span></span><br><span class="line"><span class="built_in">cd</span> /usr/local/hadoop-3.1.3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以看到所有例子</span></span><br><span class="line">hadoop jar ./share/hadoop/mapreduce/hadoop-mapreduce-examples-3.1.3.jar</span><br></pre></td></tr></table></figure>

<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/Hadoop%E4%BE%8B%E5%AD%90.png" style="zoom:67%;">

<p>在此我们选择运行 grep 例子，我们将 input 文件夹中的所有文件作为输入，筛选当中符合正则表达式  <code>dfs[a-z.]+</code>  的单词并统计出现的次数，最后输出结果到 output 文件夹中。需要注意：如果 output 目录已经存在，Hadoop 会报错，<strong>因为输出目录必须是空的</strong>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 改变当前工作目录到 /usr/local/hadoop-3.1.3</span></span><br><span class="line"><span class="built_in">cd</span> /usr/local/hadoop-3.1.3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在当前的目录创建一个名为 input 的目录</span></span><br><span class="line"><span class="built_in">mkdir</span> ./input</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 ./etc/hadoop/ 目录下的所有 .xml 文件复制到刚刚创建的 input 目录中</span></span><br><span class="line"><span class="built_in">cp</span> ./etc/hadoop/*.xml ./input</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 input 目录中搜索所有符合正则表达式模式 dfs[a-z.]+ 的字符串，并将搜索结果输出到 output 目录</span></span><br><span class="line">hadoop jar ./share/hadoop/mapreduce/hadoop-mapreduce-examples-*.jar grep ./input ./output <span class="string">&#x27;dfs[a-z.]+&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 output 目录下的所有文件内容，即 grep 任务的输出结果</span></span><br><span class="line"><span class="built_in">cat</span> ./output/*</span><br></pre></td></tr></table></figure>

<p>执行完后可以看到如下内容：</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/grep%E4%BE%8B%E5%AD%90.png" style="zoom: 67%;">

<h2 id="2-4-Hadoop-伪分布式配置"><a href="#2-4-Hadoop-伪分布式配置" class="headerlink" title="2.4 Hadoop 伪分布式配置"></a>2.4 Hadoop 伪分布式配置</h2><p>Hadoop 的伪分布式配置允许 Hadoop 在单节点上以分布式的方式运行，尽管所有的 Hadoop 进程都运行在同一台机器上。在这种配置中，Hadoop 进程以分离的 Java 进程来运行，节点既作为 NameNode 也作为 DataNode，同时读取的是 HDFS(Hadoop Distributed File System)中的文件。</p>
<p><code>cd</code> 进入 Hadoop 安装包内，通过 <code>ll</code> 命令查看文件夹内部结构：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/Hadoop%E6%96%87%E4%BB%B6%E5%A4%B9%E5%86%85%E9%83%A8%E7%BB%93%E6%9E%84.png"></p>
<p>各个文件夹含义如下：</p>
<ul>
<li>bin，存放Hadoop的各类程序(命令)</li>
<li>etc，存放Hadoop的配置文件</li>
<li>include，C语言的一些头文件</li>
<li>lib，存放Linux系统的动态链接库(.so文件)</li>
<li>libexec，存放配置Hadoop系统的脚本文件(.sh和.cmd)</li>
<li>sbin，管理员程序(super bin)</li>
<li>share，存放二进制源码(Java jar包)</li>
</ul>
<p>配置 Hadoop 伪分布式，我们主要涉及到如下文件的修改：</p>
<ul>
<li>core-site.xml： Hadoop 核心配置文件</li>
<li>hdfs-site.xml： HDFS 核心配置文件</li>
</ul>
<p>这些文件均存在与 <code>$HADOOP_HOME/etc/hadoop</code> 文件夹中，用于设置 Hadoop 集群的各种参数，如 HDFS 的端口号、NameNode 的地址等。Hadoop 的配置文件是 xml 格式，每个配置以声明 property 的 name 和 value 的方式来实现。</p>
<p><strong>PS：$HADOOP_HOME是设置的环境变量，其指代 Hadoop 安装文件夹即 &#x2F;usr&#x2F;local&#x2F;hadoop-3.1.3</strong></p>
<p>1、修改配置文件 core-site.xml </p>
<p><strong>hadoop.tmp.dir</strong></p>
<p><code>hadoop.tmp.dir</code> 是 Hadoop 框架中的关键配置参数，用于指定临时数据和关键元数据的存储位置。它对于 Hadoop 的稳定运行和数据安全至关重要，特别是在处理大规模数据集时。合理配置这个目录，可以确保中间文件和关键信息得到妥善保存，避免因系统重启或临时目录被清空而导致的数据丢失。因此，在部署和配置 Hadoop 时，建议根据实际需求调整 <code>hadoop.tmp.dir</code> 的路径，并确保其指向持久化的存储位置。这里我们给它设置为 Hadoop 安装目录下的 <code>tmp</code> 文件夹，对于我的安装目录来说，具体路径在 <code>/usr/local/hadoop-3.1.3/tmp</code>，大家可以根据自己的安装目录进行一定的调整。</p>
<p><strong>fs.defaultFS</strong></p>
<p><code>fs.defaultFS</code> 是 Hadoop 框架中一个重要的配置参数，它用于指定集群中默认的文件系统路径。这个路径通常是 HDFS(Hadoop Distributed FileSystem)的 URI，但也可以是其他支持的文件系统，如本地文件系统、Amazon S3 等。通过配置 <code>fs.defaultFS</code>，Hadoop 应用程序可以无缝地访问和操作存储在这些文件系统中的数据。</p>
<p>这次我们选择用 gedit 而不是 vim 来编辑。gedit 是文本编辑器，类似于 Windows 中的记事本，会比较方便。保存后记得关掉整个 gedit 程序，否则会占用终端。</p>
<p><font color="red">PS：使用 gedit 需要直接操作虚拟机，不能在远程连接工具操作，否则可能会打不开图形化编辑器。</font>😅</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 改变当前工作目录到 /usr/local/hadoop-3.1.3</span></span><br><span class="line"><span class="built_in">cd</span> /usr/local/hadoop-3.1.3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一次使用先进行安装</span></span><br><span class="line">sudo yum -y install gedit</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开 core-site.xml 文件</span></span><br><span class="line">gedit ./etc/hadoop/core-site.xml</span><br></pre></td></tr></table></figure>

<p>将当中的</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>修改为下面配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置 Hadoop 数据根目录为 /usr/local/hadoop-3.1.3/tmp 目录 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/usr/local/hadoop-3.1.3/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>Abase for other temporary directories.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://localhost:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/gedit%E7%BC%96%E8%BE%91core-site.xml.png" style="zoom:50%;">

<p>2、同理修改配置文件 hdfs-site.xml</p>
<p><strong>dfs.replication</strong></p>
<p><code>dfs.replication</code>  是 Hadoop 分布式文件系统(HDFS)中的关键参数，用于指定每个数据块在HDFS中存储的副本数。合理配置该参数可以平衡数据可靠性、存储资源消耗和性能需求，确保HDFS在高可用性和容错性方面表现出色。</p>
<p><strong>dfs.namenode.name.dir 和 dfs.datanode.data.dir</strong></p>
<p><code>dfs.namenode.name.dir</code> 用于指定保存 HDFS 元数据的目录，包括文件系统的命名空间、属性及块位置等信息，确保元数据的安全存储和可靠访问。</p>
<p><code>dfs.datanode.data.dir</code> 则用于指定存放 HDFS 数据块文件的目录，是数据节点存储实际数据的本地路径，确保数据的分布式存储和高效访问。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打开 hdfs-site.xml 文件</span></span><br><span class="line">gedit ./etc/hadoop/hdfs-site.xml</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置目录为 /usr/local/hadoop-3.1.3/tmp/dfs/name 目录 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.name.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/usr/local/hadoop-3.1.3/tmp/dfs/name<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置目录为 /usr/local/hadoop-3.1.3/tmp/dfs/data 目录 --&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.datanode.data.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/usr/local/hadoop-3.1.3/tmp/dfs/data<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3、配置完成后，执行以下命令格式化 NameNode ，成功的话会看到 <code>successfully formatted</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 格式化 NameNode</span></span><br><span class="line">hdfs namenode -format</span><br></pre></td></tr></table></figure>

<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/NameNode%E7%9A%84%E6%A0%BC%E5%BC%8F%E5%8C%96.png"></p>
<p>4、接着执行一下命令，开启 NameNode 和 DataNode 守护进程</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># start-dfs.sh 是个完整的可执行文件，中间没有空格</span></span><br><span class="line">start-dfs.sh</span><br></pre></td></tr></table></figure>

<p>若出现 SSH 的提示 <code>Are you sure you want to continue connecting</code>，输入 <code>yes</code> 即可。最终出现如下画面：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/%E5%BC%80%E5%90%AF%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B%E6%88%90%E5%8A%9F.png"></p>
<p>假如出现以下异常请参考：<a href="https://www.bilibili.com/read/cv16023845/">解决Hadoop伪分布式中localhost: ERROR: JAVA_HOME is not set and could not be found)</a></p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/JavaHome%E6%89%BE%E4%B8%8D%E5%88%B0.png"></p>
<p>启动完成后，可以通过命令 <code>jps</code> 来判断是否成功启动，若成功启动则会列出如下进程： “NameNode”、”DataNode”和SecondaryNameNode(如果 SecondaryNameNode 没有启动，请运行 <code>stop-dfs.sh</code> 关闭进程，然后再次尝试启动尝试)。如果没有 NameNode 或 DataNode ，那就是配置不成功，请仔细检查之前步骤，或通过查看启动日志排查原因。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 判断是否成功启动</span></span><br><span class="line">jps</span><br></pre></td></tr></table></figure>

<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/Hadoop%E4%BC%AA%E5%88%86%E5%B8%83%E5%BC%8F%E9%85%8D%E7%BD%AE%E6%88%90%E5%8A%9F.png"></p>
<p>成功启动后，可以访问 Web 界面查看 HDFS 的 NameNode 状态，可以在线查看 HDFS 中的文件。</p>
<p><font color="red">PS：访问 WEB 界面时，hadoop 3.x 以下版本的端口为 <code>50070</code>，hadoop 3.x 以上版本的端口为 <code>9870</code>。一定要使用相应的版本访问相应的端口，不然访问不成功！！！！</font>😱😱😱</p>
<p>其实在最开始的时候我也不知道 hadoop 3.x 以上版本的端口号发生了变化😭，而我自己安装的 hadoop 版本为 3.1.3，这就导致了我访问 50070 端口时肯定是失败的😫。在网上进行查阅，发现网上描述出现这个情况的原因无非以下几点：防火墙没关闭；端口被占用；$HADOOP_HOME&#x2F;etc&#x2F;hadoop 下的 core-site.xml 和 hdfs-site.xml 没有配置好。我也根据这些问题一一进行排查，尽管没有出现以上问题结果还是访问不了，于是我百思不得其解，跑去 Hadoop 官网查看默认配置项才发现端口号已经发生了改变：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/NameNode%20Web%20UI%E7%9B%91%E5%90%AC%E7%9A%84%E5%9C%B0%E5%9D%80%E5%92%8C%E5%9F%BA%E7%AB%AF%E5%8F%A3.png"></p>
<p>在Hadoop中，<code>dfs.namenode.http-address</code> 是配置参数，用于指定 NameNode Web UI 监听的地址和基端口。这个 Web UI 提供了关于 HDFS 集群状态、配置、以及文件浏览等信息的可视化界面。</p>
<p>发现端口发生改变后我去网上查阅，最后才知道 hadoop 3.x 以下版本的端口为 <code>50070</code>，hadoop 3.x 以上版本的端口变化为了 <code>9870</code>。</p>
<p>最后将Hadoop 官网查看默认配置项链接放在这儿：<a href="https://hadoop.apache.org/docs/current/hadoop-mapreduce-client/hadoop-mapreduce-client-core/MapReduceTutorial.html">Apache Hadoop 3.4.0 – MapReduce Tutorial</a> 。大家打开后下拉在左下角找到 <code>Configuration</code> 然后点击 <code>hdfs-site.xml</code> 进入页面在 <code>dfs.namenode.http-address</code> 配置参数就可以查看到端口。</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/Hadoop%E7%9A%84Configurationp.png"></p>
<p>两种访问方式：</p>
<ul>
<li>虚拟机访问</li>
<li>本机访问</li>
</ul>
<p><strong>第一种：虚拟机访问</strong></p>
<p><font color="red">PS：需要直接操作虚拟机，不能在远程连接工具操作，否则会报错。</font>😅</p>
<p>CentOS 自带有 Firefox 浏览器，不过一般比较旧，有很多兼容性问题，可以先卸载掉再安装新版的 Firefox ，安装成功后再查看版本。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 卸载 Firefox</span></span><br><span class="line">sudo yum -y remove firefox</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 Firefox</span></span><br><span class="line">sudo yum -y install firefox</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看版本</span></span><br><span class="line">firefox -version</span><br></pre></td></tr></table></figure>

<p>查看 Firefox 版本：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/%E6%9F%A5%E7%9C%8BFirefox%E7%89%88%E6%9C%AC.png"></p>
<p>输入命令直接打开 Firefox 浏览器：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打开 Firefox 浏览器</span></span><br><span class="line">firefox</span><br></pre></td></tr></table></figure>

<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/%E6%88%90%E5%8A%9F%E6%89%93%E5%BC%80Firefox.png" style="zoom:50%;">

<p>浏览器输入 <a href="http://localhost:9870/">http://localhost:9870</a> 成功访问到 Web 界面。</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/CentOS%E6%9F%A5%E7%9C%8BHDFS.png" style="zoom:50%;">

<p><strong>第二种：本机访问</strong></p>
<p><font color="red">PS：本机访问需要关闭虚拟机防火墙，不然访问不了。</font>(自己虚拟机的防火墙无所谓随便关闭，真实的环境中<del>不建议</del><font color="red">绝对不能</font>这样做，真实的环境一般是开放指定端口)😶</p>
<p>首先查看防火墙状态。出现绿色 <code>Active：active (running)</code> 表示开启，出现白色 <code>Active：inactive (dead)</code> 表示关闭。然后自行对其进行设置。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看防火墙状态</span></span><br><span class="line">systemctl status firewalld</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启防火墙 </span></span><br><span class="line">sudo systemctl start firewalld</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭防火墙 </span></span><br><span class="line">sudo systemctl stop firewalld</span><br></pre></td></tr></table></figure>

<p>直接打开本机浏览器输入 <a href="http://192.168.88.131:9870/">http://192.168.88.131:9870/</a> 成功访问到 Web 界面。<font color="red">PS：这里的 192.168.88.131 是虚拟机 ip 地址。</font></p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/%E6%9C%AC%E6%9C%BA%E6%9F%A5%E7%9C%8BHDFS.png" style="zoom: 50%;">

<p><strong>PS：在启动 Hadoop 的时候如果已有 Hadoop 节点在运行，要先关闭所有 Hadoop 服务再启动。</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 关闭 Hadoop</span></span><br><span class="line">stop-dfs.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启 Hadoop</span></span><br><span class="line">start-dfs.sh</span><br><span class="line"></span><br><span class="line"><span class="comment">#上面两句操纵也是关闭和开启hadoop操作</span></span><br></pre></td></tr></table></figure>

<h2 id="2-5-运行-Hadoop-伪分布式实例"><a href="#2-5-运行-Hadoop-伪分布式实例" class="headerlink" title="2.5 运行 Hadoop 伪分布式实例"></a>2.5 运行 Hadoop 伪分布式实例</h2><p>上面的单机模式，grep 例子读取的是本地数据，伪分布式读取的则是 HDFS 上的数据。要使用 HDFS，首先需要在 HDFS 中创建用户目录(用户名目录名可以随意输入，我这里输入的是 muyoukule )：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 改变当前工作目录到 /usr/local/hadoop-3.1.3</span></span><br><span class="line"><span class="built_in">cd</span> /usr/local/hadoop-3.1.3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 HDFS 上创建一个名为 muyoukule 的目录，并将其放置在 /user 目录下</span></span><br><span class="line">hdfs dfs -<span class="built_in">mkdir</span> -p /user/muyoukule</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出 HDFS 上 /user 目录下的所有文件和目录</span></span><br><span class="line">hdfs dfs -<span class="built_in">ls</span> /user</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出 HDFS 上 /user/muyoukule 目录下的所有文件和目录</span></span><br><span class="line">hdfs dfs -<span class="built_in">ls</span> /user/muyoukule</span><br></pre></td></tr></table></figure>

<p>创建成功后可以在 &#x2F;user 目录下查看到用户目录，查看用户目录应该为空，因为目录下没有内容。</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/HDFS%E4%B8%AD%E5%88%9B%E5%BB%BA%E7%94%A8%E6%88%B7%E7%9B%AE%E5%BD%95.png"></p>
<p>接着将 <code>./etc/hadoop</code> 中的 xml 文件作为输入文件复制到分布式文件系统中，即将 <code>/usr/local/hadoop-3.1.3/etc/hadoop</code> 复制到分布式文件系统中的 <code>/user/muyoukule/input</code> 中。我使用的是 muyoukule用户，并且已创建相应的用户目录 <code>/user/muyoukule</code>，因此在命令中就可以使用相对路径如 input，其对应的绝对路径就是 <code>/user/muyoukule/input</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在 HDFS 上创建一个名为 input 的目录</span></span><br><span class="line">hdfs dfs -<span class="built_in">mkdir</span> input</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将本地文件系统上 ./etc/hadoop/ 目录下所有的 .xml 文件上传到 HDFS 的 input 目录中</span></span><br><span class="line">hdfs dfs -put ./etc/hadoop/*.xml input</span><br></pre></td></tr></table></figure>

<p>复制完成后，可以通过如下命令查看文件列表：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hdfs dfs -<span class="built_in">ls</span> input</span><br></pre></td></tr></table></figure>

<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/HDFS%E4%B8%8Binput%E6%96%87%E4%BB%B6%E5%88%97%E8%A1%A8.png"></p>
<p>伪分布式运行 MapReduce 作业的方式跟单机模式相同，区别在于伪分布式读取的是 HDFS 中的文件(可以将单机步骤中创建的本地 input 文件夹，输出结果 output 文件夹都删掉来验证这一点)。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 执行一个 MapReduce 作业，该作业使用 Hadoop 自带的 grep 示例程序来搜索 input 目录中匹配给定模式的行，并将结果写入 output 目录</span></span><br><span class="line">hadoop jar ./share/hadoop/mapreduce/hadoop-mapreduce-examples-*.jar grep input output <span class="string">&#x27;dfs[a-z.]+&#x27;</span></span><br></pre></td></tr></table></figure>

<p>查看运行结果的命令(查看的是位于 HDFS 中的输出结果)：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hdfs dfs -<span class="built_in">cat</span> output/*</span><br></pre></td></tr></table></figure>

<p>如果出现：<code>INFO sasl.SaslDataTransferClient: SASL encryption trust check: localHostTrusted = false, remoteHostTrusted = false</code> 表示SASL数据传输客户端在进行加密信任检查时，发现本地主机(localHost)和远程主机(remoteHost)都没有被信任。可以不用管它。</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/HDFS%E8%BE%93%E5%87%BA%E7%BB%93%E6%9E%9C.png"></p>
<p>将运行结果取回到本地：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除本地文件系统中的 output 目录及其所有内容(如果存在)</span></span><br><span class="line"><span class="built_in">rm</span> -r ./output</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从 HDFS 上的 output 目录复制文件到本地文件系统的 output 目录</span></span><br><span class="line">hdfs dfs -get output ./output</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示本地 output 目录中所有文件的内容</span></span><br><span class="line"><span class="built_in">cat</span> ./output/*</span><br></pre></td></tr></table></figure>

<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/HDFS%E7%BB%93%E6%9E%9C%E5%8F%96%E5%9B%9E%E5%88%B0%E6%9C%AC%E5%9C%B0.png"></p>
<p>Hadoop 运行程序时，输出目录不能存在，否则会提示错误，因此若要再次执行，需要执行如下命令删除 output 文件夹：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除 HDFS 上的 output 目录及其所有内容</span></span><br><span class="line">hdfs dfs -<span class="built_in">rm</span> -r output</span><br></pre></td></tr></table></figure>

<p>若要关闭 Hadoop，则运行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">stop-dfs.sh</span><br></pre></td></tr></table></figure>

<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/%E5%85%B3%E9%97%ADHadoop.png"></p>
<p>注意：下次启动 Hadoop 时，无需进行 NameNode 的初始化，只需要运行 <code>start-dfs.sh</code> 就可以！</p>
<h2 id="2-6-启动-YARN"><a href="#2-6-启动-YARN" class="headerlink" title="2.6 启动 YARN"></a>2.6 启动 YARN</h2><p><strong>PS：伪分布式不启动 YARN 也可以，一般不会影响程序执行。</strong></p>
<p>YARN 是从 MapReduce 中分离出来的，负责资源管理与任务调度。YARN 运行于 MapReduce 之上，提供了高可用性、高扩展性，YARN 的更多介绍在此不展开，有兴趣的可查阅相关资料。</p>
<p>上述通过 <code>start-dfs.sh</code> 启动 Hadoop，仅仅是启动了 MapReduce 环境，我们可以启动 YARN ，让 YARN 来负责资源管理与任务调度。</p>
<p>1、修改 yarn-site.xml 文件，同样使用 gedit 编辑会比较方便些。( gedit 编辑器使用方法请参照上文 <strong>Hadoop 伪分布式配置</strong>)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 改变当前工作目录到 /usr/local/hadoop-3.1.3</span></span><br><span class="line"><span class="built_in">cd</span> /usr/local/hadoop-3.1.3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开 yarn-site.xml 文件</span></span><br><span class="line">gedit ./etc/hadoop/yarn-site.xml</span><br></pre></td></tr></table></figure>

<p>修改为如下配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>localhost<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.vmem-check-enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2、修改 mapred-site.xml 文件，如果没有这个文件，需要从 mapred-site.xml.template 复制一份。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打开 mapred-site.xml 文件</span></span><br><span class="line">gedit ./etc/hadoop/mapred-site.xml</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3、启动YARN服务，(需要先执行过 <code>start-dfs.sh</code>)：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动YARN</span></span><br><span class="line">start-yarn.sh</span><br></pre></td></tr></table></figure>

<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/%E5%90%AF%E5%8A%A8YARN%E6%9C%8D%E5%8A%A1.png"></p>
<p>4、验证是否启动成功</p>
<p>方式一：执行 <code>jps</code> 命令查看 NodeManager 和 ResourceManager 服务是否已经启动：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/%E5%90%AF%E5%8A%A8YARN%E6%9C%8D%E5%8A%A1%E6%88%90%E5%8A%9F.png"></p>
<p>方式二：虚拟机浏览器输入 <a href="http://localhost:8088/">http://localhost:8088</a> 成功访问到 Web 界面。</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/CentOS%E6%9F%A5%E7%9C%8BYARN.png" style="zoom:50%;">

<p>但 YARN 主要是为集群提供更好的资源管理与任务调度，然而这在单机上体现不出价值，反而会使程序跑得稍慢些。因此在单机上是否开启 YARN 就看实际情况了。</p>
<blockquote>
<p>不启动 YARN 需重命名 mapred-site.xml</p>
</blockquote>
<p>如果不想启动 YARN，务必把配置文件 <strong>mapred-site.xml</strong> 重命名，改成 mapred-site.xml.template，需要用时改回来就行。否则在该配置文件存在，而未开启 YARN 的情况下，运行程序会提示 “Retrying connect to server: 0.0.0.0&#x2F;0.0.0.0:8032” 的错误。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 重命名</span></span><br><span class="line"><span class="built_in">mv</span> ./etc/hadoop/mapred-site.xml ./etc/hadoop/mapred-site.xml.template</span><br></pre></td></tr></table></figure>

<p>同样的，关闭 YARN 的脚本如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 关闭 YARN</span></span><br><span class="line">stop-yarn.sh</span><br></pre></td></tr></table></figure>

<p>至此，你已经掌握 Hadoop 的配置和基本使用了。</p>
<h2 id="2-7-Hadoop-集群配置"><a href="#2-7-Hadoop-集群配置" class="headerlink" title="2.7 Hadoop 集群配置"></a>2.7 Hadoop 集群配置</h2><p>伪分布式配置主要用于开发和测试环境，因为它将 NameNode 和 DataNode 放在同一台机器上，可能无法充分利用多节点的并行处理能力。在生产环境中，通常会使用完全分布式配置，以利用集群中多台机器的计算和存储能力。</p>
<p>配置安装集群化软件，首要条件就是要有多台Linux服务器可用。我们可以使用 VMware 提供的克隆功能，基于一台虚拟机去克隆创建多台虚拟机，所以这对电脑配置要求很高(至少有 <strong>8G</strong> 运行内存和 <strong>512G</strong> 存储容量)。但是由于我的电脑剩余存储空间容量有限……😭😭😭且在此实验案例教程后续还涉及很多软件的安装，所以我的电脑已经不再支持我配置安装集群化软件。但是如果你<del>对Hadoop 集群配置感兴趣</del>电脑运行内存和剩余存储容量足够大，不妨可以自己在网上找找教程动手试试。😄</p>
<h1 id="3-MySQL"><a href="#3-MySQL" class="headerlink" title="3. MySQL"></a>3. MySQL</h1><p>MySQL 是一个开源的关系型数据库管理系统，它使用结构化查询语言(SQL)进行数据库管理。MySQL 具有高可靠性、高性能、易用性和灵活性等特点，能够处理大量数据，并支持多种存储引擎以满足不同应用需求。它广泛应用于各类网站、应用及企业级系统中，是众多开发者和企业的首选数据库解决方案。通过 MySQL，用户可以轻松地创建、查询、更新和删除数据库中的数据，实现高效的数据管理。</p>
<h2 id="3-1-MySQL-下载与安装"><a href="#3-1-MySQL-下载与安装" class="headerlink" title="3.1 MySQL 下载与安装"></a>3.1 MySQL 下载与安装</h2><p>关于安装 MySQL的方式有很多这里只示例其中一种：<strong>使用 yum 安装。</strong></p>
<p>yum 安装方式自动处理依赖、简化安装过程、提供版本管理，并且易于管理和维护，适合大多数用户。完全可以满足本案例需求。</p>
<p>1、首先打开 <a href="https://dev.mysql.com/downloads/repo/yum/">MySQL Yum Repository</a> </p>
<p>打开后根据你服务器的配置选择，我服务器是 CentOS7 所以选择 <code>Red Hat Enterprise Linux 7 / Oracle Linux 7 (Architecture Independent), RPM Package</code> ，然后点击 <code>Download</code> 下载进入下载页面，进入页面后鼠标光标定位到 <code>No thanks, just start my download.</code> 右键点击 <code>复制链接</code> (<a href="https://dev.mysql.com/get/mysql80-community-release-el7-11.noarch.rpm)%E3%80%82">https://dev.mysql.com/get/mysql80-community-release-el7-11.noarch.rpm)。</a></p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/yum%E5%AE%89%E8%A3%85MySQL(1).png" style="zoom:50%;">

<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/yum%E5%AE%89%E8%A3%85MySQL(2).png" style="zoom: 50%;">

<p>2、安装前需要对系统进行检查：</p>
<p>RPM(Red-Hat Package Manager)是软件包管理器，是红帽 Linux 用于管理和安装软件的工具。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如果当前系统已经安装过 Mysql 数据库安装将失败。CentOS 自带 mariadb，与 Mysql 数据库冲突。</span></span><br><span class="line"><span class="comment"># 检查是否安装了MySQL</span></span><br><span class="line">sudo rpm -qa | grep mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查是否安装了mariadb</span></span><br><span class="line">sudo rpm -qa | grep mariadb</span><br><span class="line"></span><br><span class="line"><span class="comment">#如果有，将其卸载</span></span><br><span class="line">sudo rpm -e --nodeps &lt;软件包名&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/MySQL%E5%AE%89%E8%A3%85%E5%89%8D%E6%A3%80%E6%9F%A5.png"></p>
<p>3、开始安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 更新密钥</span></span><br><span class="line">sudo rpm --import https://repo.mysql.com/RPM-GPG-KEY-mysql-2022</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装 MySQL yum 库 链接是刚刚在Yum Repository复制的</span></span><br><span class="line">sudo rpm -Uvh https://dev.mysql.com/get/mysql80-community-release-el7-11.noarch.rpm</span><br></pre></td></tr></table></figure>

<p>4、选择要安装的 MySQL 版本：</p>
<p>添加完 yum 源之后，如果什么都不做直接安装的话，会默认安装最新的 MySQL 版本，也就是 mysql8.0 的最新发行版。大家可以自行进行选择。我这里选择的是 <code>mysql5.7</code> ，所以要改一下配置(<strong>想直接装最新版本的可以跳过这一步</strong>)：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 当前 mysql yum 源下哪些子源可用(不同的 mysql 版本使用不同的子仓库</span></span><br><span class="line">yum repolist all | grep mysql</span><br></pre></td></tr></table></figure>

<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/mysql%20yum%E6%BA%90.png" style="zoom:67%;">

<p>可以看到默认开启的是 mysql8.0 的仓库。</p>
<p>开启 5.7，禁用 8.0 有两种方法，一个是用命令修改 <code>/etc/yum.repos.d/mysql-community.repo</code> 文件。另一个是像下面这样使用命令直接修改这个文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 禁用名为 mysql80-community 的软件仓库</span></span><br><span class="line">sudo yum-config-manager --<span class="built_in">disable</span> mysql80-community</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用名为 mysql57-community 的软件仓库</span></span><br><span class="line">sudo yum-config-manager --<span class="built_in">enable</span> mysql57-community</span><br></pre></td></tr></table></figure>

<p>然后再执行查看语句，可以看到 mysql 5.7 已经启用了，8.0 已经禁用了。</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/mysql%205.7%E5%90%AF%E7%94%A8.png" style="zoom:67%;">

<p>5、安装 MySQL</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yum 安装 mysql-community-server 这个包</span></span><br><span class="line">sudo yum -y install mysql-community-server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 MySQL</span></span><br><span class="line">sudo systemctl start mysqld   </span><br><span class="line"><span class="comment"># 设置开机启动(可不设置)</span></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> mysqld</span><br><span class="line"></span><br><span class="line"><span class="comment">#检查 MySQL 服务状态</span></span><br><span class="line">systemctl status mysqld</span><br></pre></td></tr></table></figure>

<p>出现 <code>Active：active(running)</code> 代表 MySQL 启动成功。</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/MySQL%E5%90%AF%E5%8A%A8%E6%88%90%E5%8A%9F.png"></p>
<p>6、登录 MySQL</p>
<p>查看默认密码：第一次启动 MySQL 会在日志文件 &#x2F;var&#x2F;log&#x2F;mysqld.log 中生成 root 用户的一个随机密码。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看密码</span></span><br><span class="line">sudo <span class="built_in">cat</span> /var/log/mysqld.log | grep password</span><br></pre></td></tr></table></figure>

<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/MySQL%E9%BB%98%E8%AE%A4%E5%AF%86%E7%A0%81.png"></p>
<p><strong>PS：没有前面的空格，比如我密码的是 <code>fcIVZvOBk9)r</code> 。</strong></p>
<p>然后执行命令登录 MySQL 数据库服务器，会提示输入密码，输入密码时密码不会显示，输入完直接 <code>Enter</code> 就行。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 登录到 MySQL 数据库服务器</span><br><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure>

<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/%E7%99%BB%E5%BD%95MySQL.png"></p>
<p>登录到 MySQL 后可以执行以下 SQL 语句查看数据库，与下面一致说明安装成功。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 列出服务器上的所有数据库</span><br><span class="line">show databases;</span><br></pre></td></tr></table></figure>

<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/%E6%9F%A5%E7%9C%8BMySQL%E6%95%B0%E6%8D%AE%E5%BA%93.png"></p>
<p>退出MySQL：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">exit	# 或者快捷键 Ctrl + d</span><br></pre></td></tr></table></figure>

<h2 id="3-2-关于-MySQL-的补充"><a href="#3-2-关于-MySQL-的补充" class="headerlink" title="3.2 关于 MySQL 的补充"></a>3.2 关于 MySQL 的补充</h2><p><strong>修改 root 用户密码</strong></p>
<p>如果你觉得 MySQL 自动生成的密码太难记忆的话，可以连接 MySQL 之后进行修改密码。在 Linux 上安装 MySQL 时会自动安装一个校验密码的插件，默认密码检查策略要求密码必须包含：大小写字母、数字和特殊符号，并且长度不能少于8位。修改密码时新密码是否符合当前的策略，不满足则会提示ERROR。</p>
<p>如果你想设置简单密码，需要降低 MySQL 的密码安全级别。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#密码安全级别低</span><br><span class="line">set global validate_password_policy = 0;</span><br><span class="line">#密码长度最低4位即可</span><br><span class="line">set global validate_password_length = 4;</span><br><span class="line"></span><br><span class="line">#设置简单密码(这里使用简单密码是为了方便，真实环境中不要这样)</span><br><span class="line">ALTER USER &#x27;root &#x27;@&#x27;locaLhost&#x27; IDENTIFIED BY &#x27;root&#x27;;	#前面的 root 为用户名，后面的 root 是密码</span><br></pre></td></tr></table></figure>

<p><font color="red">PS：因 mysql 的版本不同调整密码策略的方法也不同，关于更多的密码检查策略请参考<a href="https://dev.mysql.com/doc/refman/8.3/en/">官方文档</a>。</font></p>
<p>在文档中先选择对应版本再搜索：<code>validate_password</code></p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/%E5%AF%86%E7%A0%81%E6%A0%A1%E9%AA%8C%E8%A7%84%E5%88%99(1).png" style="zoom: 50%;">

<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/%E5%AF%86%E7%A0%81%E6%A0%A1%E9%AA%8C%E8%A7%84%E5%88%99(2).png" style="zoom: 50%;">

<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/%E5%AF%86%E7%A0%81%E6%A0%A1%E9%AA%8C%E8%A7%84%E5%88%99(3).png" style="zoom: 50%;">

<p>上面这个就是密码检查策略了。</p>
<p><strong>创建用户与权限分配</strong></p>
<p>默认的 root 用户只能当前节点 localhost 访问，是无法远程访问的。</p>
<p>我们还需要创建一个新的账户，用于远程访问，或者直接给 root 用户添加权限。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 授予来自任何主机的 root 用户对所有数据库和所有表的所有权限，并允许其将这些权限授予其他用户。</span><br><span class="line">grant all privileges on *.* to &#x27;root&#x27;@&#x27;%&#x27; with grant option;</span><br><span class="line"></span><br><span class="line"># 刷新 MySQL 的权限，使新设置的权限立即生效</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>

<p>授权后就可以使用在本机使用图形化工具远程访问虚拟机的 MySQL 。(这里使用的是 <code>Navicat</code> )</p>
<p>首先检查防火墙状态，关闭防火墙：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看防火墙状态</span></span><br><span class="line">systemctl status firewalld</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启防火墙 </span></span><br><span class="line">sudo systemctl start firewalld</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭防火墙 </span></span><br><span class="line">sudo systemctl stop firewalld</span><br></pre></td></tr></table></figure>

<p>打开 Navicat 进行操作：</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE%E8%99%9A%E6%8B%9F%E6%9C%BAMySQL(1).png" style="zoom: 50%;">

<p>在 Navicat 上看到的数据库与虚拟机一致，远程连接成功。</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE%E8%99%9A%E6%8B%9F%E6%9C%BAMySQL(2).png" style="zoom:50%;">

<h1 id="4-HBase"><a href="#4-HBase" class="headerlink" title="4. HBase"></a>4. HBase</h1><p>HBase 是一个分布式、面向列的开源数据库，基于 Hadoop 构建，以 BigTable 为设计蓝本，具有高可靠性、高扩展性和高性能，适用于存储和处理海量非结构化及半结构化数据，广泛应用于大数据场景下的数据存储和实时分析。</p>
<p>开启 HBase 需要先开启 Hadoop，而关闭 Hadoop 必须先关闭 HBase，所以总的流程顺序就是：</p>
<p><font color="red"><strong>开启 Hadoop –&gt; 开启 HBase –&gt; 关闭 HBase –&gt; 关闭 Hadoop</strong></font>😀</p>
<p><font color="red">请一定严格按照顺序进行，否则可能会出现错误，如果不确定是否有开启其中的某个服务，可以使用 <code>jps</code> 命令进行查看进程 <code>id</code>。</font></p>
<h2 id="4-1-HBase-下载与安装"><a href="#4-1-HBase-下载与安装" class="headerlink" title="4.1 HBase 下载与安装"></a>4.1 HBase 下载与安装</h2><p><a href="https://archive.apache.org/dist/hbase/">官网下载</a></p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/HBase%E4%B8%8B%E8%BD%BD(1).png"></p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/HBase%E4%B8%8B%E8%BD%BD(2).png" style="zoom: 67%;">

<p>打不开官网？试试<a href="https://mirrors.tuna.tsinghua.edu.cn/apache/hbase/">清华大学开源软件镜像站下载</a>。不过好像只有新版🤔</p>
<p>下载好之后就可以开始安装了：</p>
<p>1、执行以下命令，选择文件上传到 Linux 的 &#x2F; 目录(具体请参考上文 <strong>FinalShell 文件上传</strong>)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /</span><br><span class="line"></span><br><span class="line">sudo rz</span><br></pre></td></tr></table></figure>

<p>2、解压缩 Hadoop 安装文件到  &#x2F;usr&#x2F;local 目录，解压完成后可以进入到 &#x2F;usr&#x2F;local 目录查看是否成功。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 解压缩安装文件到 /usr/local 目录</span></span><br><span class="line">sudo tar -zxvf hbase-2.2.2-bin.tar.gz -C /usr/local</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入到 /usr/local 目录</span></span><br><span class="line"><span class="built_in">cd</span> /usr/local</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看文件</span></span><br><span class="line">ll</span><br></pre></td></tr></table></figure>

<p>3、配置环境变量，使用 vim 编辑器修改 &#x2F;etc&#x2F;profile 文件，在文件最后添加环境变量。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改 /etc/profile 文件</span></span><br><span class="line">sudo vim /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment"># HBase 环境变量</span></span><br><span class="line"><span class="built_in">export</span> HBASE_HOME=/usr/local/hbase-2.2.2</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$HBASE_HOME</span>/bin</span><br></pre></td></tr></table></figure>

<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/%E9%85%8D%E7%BD%AEHBase%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F.png" style="zoom: 67%;">

<p>4、重启环境变量配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure>

<p>5、添加 HBase 权限</p>
<p>输入下面命令，把 hbase 目录权限赋予给 muyoukule 用户：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入 /usr/local 目录</span></span><br><span class="line"><span class="built_in">cd</span> /usr/local</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 hbase-2.2.2 下的所有文件的所有者改为 muyoukule，muyoukule 是当前用户的用户名</span></span><br><span class="line">sudo <span class="built_in">chown</span> -R muyoukule ./hbase-2.2.2</span><br></pre></td></tr></table></figure>

<p>6、检查安装结果，出现下面信息代表安装成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看 hbase 版本信息</span></span><br><span class="line">hbase version</span><br></pre></td></tr></table></figure>

<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/%E6%A3%80%E6%9F%A5HBase%E5%AE%89%E8%A3%85%E7%BB%93%E6%9E%9C.png"></p>
<p>假如出现 <code>找不到或无法加载主类 org.apache.hadoop.hbase.util.GetJavaProperty</code> 的错误，解决方法：</p>
<p>修改 &#x2F;usr&#x2F;local&#x2F;hbase&#x2F;conf&#x2F;hbase-env.sh 配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /usr/local/hbase-2.2.2/conf/hbase-env.sh</span><br></pre></td></tr></table></figure>

<p>到配置文件底部，将 <code># export HBASE_DISABLE_HADOOP_CLASSPATH_LOOKUP=&quot;true&quot;</code>  前的注释( <code>#</code> 号)删除即可，删除后保存并退出即可。</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/hbase-env.sh.png" style="zoom: 67%;">

<p>这样，HBase 就安装好了。</p>
<h2 id="4-2-HBase-单机模式配置"><a href="#4-2-HBase-单机模式配置" class="headerlink" title="4.2 HBase 单机模式配置"></a>4.2 HBase 单机模式配置</h2><p>HBase单机模式配置时涉及的两个主要配置文件是 <code>hbase-env.sh</code> 和 <code>hbase-site.xml</code> 。这两个文件分别用于设置 HBase 的运行环境和定义 HBase 的核心配置参数。</p>
<p><strong>hbase-env.sh</strong></p>
<p><code>hbase-env.sh</code> 是一个 shell 脚本文件，它包含了 HBase 启动和运行所需的环境变量设置。在单机模式下配置 HBase 时，需要检查并可能修改以下几个关键的配置项：</p>
<ul>
<li><code>JAVA_HOME</code>：这个变量需要指向你安装的 JDK 的目录。确保 HBase 可以找到并使用正确的 Java 版本。</li>
<li><code>HBASE_MANAGES_ZK</code>：这个变量控制 HBase 是否应该管理其自己的 ZooKeeper 实例。在单机模式下，通常将其设置为 <code>true</code>，这样 HBase 就会启动它自己的 ZooKeeper 实例。</li>
<li>其他环境变量：根据具体的系统配置和需求，可能还需要设置其他环境变量。</li>
</ul>
<p><strong>hbase-site.xml</strong></p>
<p><code>hbase-site.xml</code>是 HBase 的核心配置文件，其中包含了 HBase 集群的各种参数设置。在单机模式下配置 HBase 时，你需要修改或添加以下关键配置项：</p>
<ul>
<li><code>hbase.rootdir</code>：这个参数定义了 HBase 数据的存储位置。在单机模式下，通常将其设置为本地文件系统的某个路径，例如<code>file:///tmp/hbase</code>。这意味着所有的 HBase 数据都将存储在这个指定的本地目录中。</li>
<li><code>hbase.zookeeper.property.dataDir</code>：这个参数指定了 ZooKeeper 使用的数据目录。由于在单机模式下 HBase 通常会管理自己的 ZooKeeper 实例，因此需要设置这个参数来指定 ZooKeeper 数据的存储位置。</li>
<li><code>hbase.cluster.distributed</code>：这个参数控制 HBase 是否以分布式模式运行。在单机模式下，通常将其设置为<code>false</code>。</li>
</ul>
<p>需要注意的是，对于配置文件的修改，需要手动重启相应的 HBase 服务。更改配置文件后，请运行 <code>stop-hbase.sh</code> 以停止 HBase 服务，配置完成后再运行<code>start-hbase.sh</code> 以启动服务。</p>
<blockquote>
<p>配置 hbase-env.sh</p>
</blockquote>
<p>在启动HBase前，需设置  JAVA_HOME 环境变量。为方便用户，HBase 允许在 <code>conf/hbase-env.sh</code> 文件中直接设置。用户需找到 Java 安装位置后编辑 <code>conf/hbase-env.sh</code>，取消对 <code>#export JAVA_HOME=</code> 行的注释，并设置为 Java 安装路径。</p>
<p>先查找 Java 安装位置(如果你知道可以忽略)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查找 Java 安装位置</span></span><br><span class="line">whereis java</span><br></pre></td></tr></table></figure>

<p>这里我们找到了不止一个路径，我们需要自行进行判断，我的是 <code>/usr/local/jdk1.8.0_162</code></p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/%E6%9F%A5%E6%89%BEJava%E5%AE%89%E8%A3%85%E4%BD%8D%E7%BD%AE.png"></p>
<p>1、使用 vim 编辑器打开 hbase-env.sh 文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /usr/local/hbase-2.2.2/conf/hbase-env.sh</span><br></pre></td></tr></table></figure>

<p>2、配置 Java 的环境变量</p>
<p>具体作用是告诉 HBase 使用哪一个 jdk，我这里 Java 的安装目录是 <code>/usr/local/jdk1.8.0_162</code>，还需要配置令 ZooKeeper 由 HBase 自己管理，不需要单独的 ZooKeeper，具体需要添加的内容如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置 Java 的环境变量</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/local/jdk1.8.0_162</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置 ZooKeeper 的管理者</span></span><br><span class="line"><span class="built_in">export</span> HBASE_MANAGES_ZK=<span class="literal">true</span> </span><br></pre></td></tr></table></figure>

<p>因为在 <code>hbase-env.sh</code> 文件中已经存在有 <code>JAVA_HOME</code>、<code>HBASE_MANAGES_ZK</code> 这两个变量，但只是被注释掉了，也就是前面带了 <code>#</code> 号，所以大家可以直接寻找到对应的变量，将前面起注释作用的 <code>#</code> 号删去，然后修改后面的值即可。</p>
<p><strong>PS：vim 编辑器怎样搜索字符串？</strong></p>
<ul>
<li>普通模式下，按下 <code>/</code> 键，然后输入你想要搜索的字符串，按下 <code>Enter</code> 键开始搜索。</li>
<li>要查找下一个匹配的字符串，按 <code>n</code>。</li>
<li>要查找上一个匹配的字符串，按 <code>N</code>。</li>
</ul>
<p>但是我很懒不想去找🙄，所以我就直接写在文件顶部了，这个是不影响运行操作的，具体图示如下：</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/%E9%85%8D%E7%BD%AEhbase-env.sh.png" style="zoom:67%;">

<blockquote>
<p>配置 hbase-site.xml</p>
</blockquote>
<p>这里我们需要修改文件中的 <code>hbase.rootdir</code> 、<code>hbase.unsafe.stream.capability.enforce</code> 两个参数：</p>
<p><code>hbase.rootdir</code> 是 HBase 配置中的一个关键参数，用于指定 HBase 数据和元数据的根存储目录。该目录是 HBase 用来存放所有表数据、索引、日志文件以及其他相关信息的核心位置。通过正确配置 <code>hbase.rootdir</code>，可以确保 HBase 数据被存储在一个持久化、可靠且可扩展的存储系统中，从而保障 HBase 的稳定运行和数据的安全性。这里我们给它设置为 HBase 安装目录下的 <code>hbase-tmp</code> 文件夹，对于我的安装目录来说，具体路径在 <code>/usr/local/hbase-2.2.2/hbase-tmp</code>，大家可以根据自己的安装目录进行一定的调整。</p>
<p><code>hbase.unsafe.stream.capability.enforce</code>：这个配置项用于启用或禁用 <code>TFramedTransport</code>或者<code>TLowDelayTransport</code>的帧大小检查，在默认情况下会启用帧大小检查，用于保证网络连接和数据传输的稳定性，也就是把他的值设置为 <code>true</code>，因为我们现在是伪分布模式，所以不需要保证稳定性，可以选择禁用帧大小检查，从而提升数据传输性能，就是将它的值设置为 <code>flase</code>。当然，也可以不管这个配置项，主要是看个人需求。</p>
<p>1、使用 <code>gedit</code> 编辑器修改其文件内容，具体命令如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gedit /usr/local/hbase-2.2.2/conf/hbase-site.xml</span><br></pre></td></tr></table></figure>

<p>将当中的</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>修改为下面配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置 HBase 数据根目录为本地文件系统中的 hbase-tmp 目录 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.rootdir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:///usr/local/hbase-2.2.2/hbase-tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.unsafe.stream.capability.enforce<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2、测试运行</p>
<p>启动 HBase，并且打开 <code>shell</code> 命令行模式，成功打开后，用户就可以通过输入 <code>shell</code> 命令来使用操作 HBase 数据库了。具体命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动 HBase</span></span><br><span class="line">start-hbase.sh</span><br><span class="line"></span><br><span class="line"><span class="comment">#打开 shell 命令行模式</span></span><br><span class="line">hbase shell </span><br></pre></td></tr></table></figure>

<p>出现下面图示的样子，就说明 <code>shell</code> 命令行被成功打开了，可以看到，还有 <code>hbase(main)</code> 的字样：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/shell%E5%91%BD%E4%BB%A4%E6%88%90%E5%8A%9F%E6%89%93%E5%BC%80.png"></p>
<p>输入 <code>help</code>，可以获取帮助信息，帮助你更好的熟悉使用方法，还可以看见当前 HBase 的版本，如下图所示：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/HBase-help.png"></p>
<p>3、输入 <code>exit</code>或者 <code>Ctrl + d</code> 就可以退出该模式，返回终端控制台。</p>
<p>4、停止 HBase 运行，在终端输入下面命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 停止 HBase 运行</span></span><br><span class="line">stop-hbase.sh</span><br></pre></td></tr></table></figure>

<p><strong>PS：如果在操作 HBase 的过程中发生错误，可以通过 {HBASE_HOME}目录(&#x2F;usr&#x2F;local&#x2F;hbase-2.2.2)下的 logs 子目录中的日志文件查看错误原因。</strong></p>
<h2 id="4-3-HBase-伪分布式模式配置"><a href="#4-3-HBase-伪分布式模式配置" class="headerlink" title="4.3 HBase 伪分布式模式配置"></a>4.3 HBase 伪分布式模式配置</h2><p>HBase伪分布式模式配置时涉及的两个主要配置文件是 <code>hbase-env.sh</code> 和 <code>hbase-site.xml</code> 。这两个文件分别用于设置 HBase 的运行环境和定义 HBase 的核心配置参数。</p>
<p><strong>hbase-env.sh</strong></p>
<p><code>hbase-env.sh</code> 是一个 shell 脚本文件，它包含了 HBase 启动和运行所需的环境变量设置。在单机模式下配置 HBase 时，需要检查并可能修改以下几个关键的配置项：</p>
<ul>
<li><code>JAVA_HOME</code>：这个变量需要指向你安装的 JDK 的目录。确保 HBase 可以找到并使用正确的 Java 版本。</li>
<li><code>HBASE_MANAGES_ZK</code>：这个变量控制 HBase 是否应该管理其自己的 ZooKeeper 实例。在单机模式下，通常将其设置为<code>true</code>，这样 HBase 就会启动它自己的 ZooKeeper 实例。</li>
<li>其他环境变量：根据具体的系统配置和需求，可能还需要设置其他环境变量。</li>
</ul>
<p><strong>hbase-site.xml</strong></p>
<p><code>hbase-site.xml</code>是 HBase 的核心配置文件，其中包含了 HBase 集群的各种参数设置。在单机模式下配置 HBase 时，你需要修改或添加以下关键配置项：</p>
<ul>
<li><code>hbase.rootdir</code>：这个参数定义了 HBase 数据的存储位置。在单机模式下，通常将其设置为本地文件系统的某个路径，例如<code>file:///tmp/hbase</code>。这意味着所有的 HBase 数据都将存储在这个指定的本地目录中。</li>
<li><code>hbase.zookeeper.property.dataDir</code>：这个参数指定了 ZooKeeper 使用的数据目录。由于在单机模式下 HBase 通常会管理自己的 ZooKeeper 实例，因此需要设置这个参数来指定 ZooKeeper 数据的存储位置。</li>
<li><code>hbase.cluster.distributed</code>：这个参数控制 HBase 是否以分布式模式运行。在单机模式下，通常将其设置为<code>false</code>。</li>
</ul>
<p>需要注意的是，对于配置文件的修改，需要手动重启相应的 HBase 服务。更改配置文件后，请运行 <code>stop-hbase.sh</code> 以停止 HBase 服务，配置完成后再运行<code>start-hbase.sh</code> 以启动服务。</p>
<blockquote>
<p>配置 hbase-env.sh</p>
</blockquote>
<p>在启动HBase前，需设置  JAVA_HOME 环境变量。为方便用户，HBase 允许在 <code>conf/hbase-env.sh</code> 文件中直接设置。用户需找到 Java 安装位置后编辑 <code>conf/hbase-env.sh</code>，取消对 <code>#export JAVA_HOME=</code> 行的注释，并设置为Java安装路径。</p>
<p>先查找 Java 安装位置(如果你知道可以忽略)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查找 Java 安装位置</span></span><br><span class="line">whereis java</span><br></pre></td></tr></table></figure>

<p>这里我们找到了不止一个路径，我们需要自行进行判断，我的是 <code>/usr/local/jdk1.8.0_162</code></p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/%E6%9F%A5%E6%89%BEJava%E5%AE%89%E8%A3%85%E4%BD%8D%E7%BD%AE.png"></p>
<p>1、使用 vim 编辑器打开 hbase-env.sh 文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /usr/local/hbase-2.2.2/conf/hbase-env.sh</span><br></pre></td></tr></table></figure>

<p>2、配置 <code>JAVA_HOME</code>，具体作用是告诉 HBase 使用哪一个 jdk，我这里 Java 的安装目录是 <code>/usr/local/jdk1.8.0_162</code>；<code>HBASE_MANAGES_ZK</code> 配置令 ZooKeeper 由 HBase 自己管理，不需要单独的 ZooKeeper。<code>HBASE_CLASSPATH</code> 变量可用于确定运行自定义 HBase 操作所需的其他 JAR 文件和目录的优先级。最后是具体需要添加的内容如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置 Java 的环境变量</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/local/jdk1.8.0_162</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置 ZooKeeper 的管理者</span></span><br><span class="line"><span class="built_in">export</span> HBASE_MANAGES_ZK=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置为本机 HBase 安装目录下的 conf 目录</span></span><br><span class="line"><span class="built_in">export</span> HBASE_CLASSPATH=/usr/local/hbase-2.2.2/conf</span><br></pre></td></tr></table></figure>

<p>因为在 <code>hbase-env.sh</code> 文件中已经存在有 <code>JAVA_HOME</code>、<code>HBASE_MANAGES_ZK</code>、<code>HBASE_CLASSPATH</code> 这三个变量，只是被注释掉了，也就是前面带了 <code>#</code> 号，所以大家可以直接寻找到对应的变量，将前面起注释作用的 <code>#</code> 号删去，然后修改后面的值即可。</p>
<p><strong>PS：vim 编辑器怎样搜索字符串？</strong></p>
<ul>
<li>普通模式下，按下 <code>/</code> 键，然后输入你想要搜索的字符串，按下 <code>Enter</code> 键开始搜索。</li>
<li>要查找下一个匹配的字符串，按 <code>n</code>。</li>
<li>要查找上一个匹配的字符串，按 <code>N</code>。</li>
</ul>
<p>但是我很懒不想去找🙄，所以我就直接写在文件顶部了，这个是不影响运行操作的，具体图示如下：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/%E4%BC%AA%E5%88%86%E5%B8%83%E5%BC%8F%E9%85%8D%E7%BD%AEhbase-env.sh.png"></p>
<blockquote>
<p>配置 hbase-site.xml</p>
</blockquote>
<p>这里我们需要修改文件中的 <code>hbase.rootdir</code>、<code>hbase.cluster.distributed</code>、<code>hbase.unsafe.stream.capability.enforce</code> 三个参数。</p>
<p><code>hbase.rootdir</code>：举个例子，如果要指定 HDFS 实例的 Namenode 在 <code>nameenode.example.org</code> 上运行的 HDFS 目录 <code>/hbase-2.2.2</code>，端口为 <code>9000</code>，则需要将此值设置为：<code>hdfs://namenode.example.org:9000/hbase-2.2.2</code>，因为我们做的是伪分布，所以这里我们就将它设置在本机的 <code>9000</code> 端口号上。</p>
<p><code>hbase.cluster.distributed</code>：这个参数用于设置群集将处于的模式。对于分布式模式，值设置为 <code>true</code>，因为我们做的是伪分布模式，所以我们将其值设置为 <code>true</code>。</p>
<p><code>hbase.unsafe.stream.capability.enforce</code>：这个配置项用于启用或禁用 <code>TFramedTransport</code>或者<code>TLowDelayTransport</code>的帧大小检查，在默认情况下会启用帧大小检查，用于保证网络连接和数据传输的稳定性，也就是把他的值设置为 <code>true</code>，因为我们现在是伪分布模式，所以不需要保证稳定性，可以选择禁用帧大小检查，从而提升数据传输性能，就是将它的值设置为 <code>flase</code>，另外，此属性可能会减少故障切换选项，所以在启用的时候需要谨慎，所以我们这里禁用它也有这一层原因。</p>
<p>1、使用 <code>gedit</code> 编辑器修改其文件内容，具体命令如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gedit /usr/local/hbase-2.2.2/conf/hbase-site.xml</span><br></pre></td></tr></table></figure>

<p>将当中的</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>修改为下面配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.rootdir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://localhost:9000/hbase-2.2.2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.cluster.distributed<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.unsafe.stream.capability.enforce<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2、接下来测试运行 HBase</p>
<p>第一步：首先登陆 ssh，之前设置了无密码登陆，因此这里不需要密码；再启动 Hadoop(如果已经启动 Hadoop请跳过此步骤)，</p>
<p>命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 登陆 ssh</span></span><br><span class="line">ssh localhost</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 Hadoop</span></span><br><span class="line">start-dfs.sh</span><br></pre></td></tr></table></figure>

<p>输入命令 <code>jps</code>，能看到 NameNode,DataNode 和 SecondaryNameNode 都已经成功启动，表示 hadoop 启动成功：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/hbase%E4%BC%AA%E5%88%86%E5%B8%83%E5%BC%8F%E5%90%AF%E5%8A%A8%E6%88%90%E5%8A%9F.png"></p>
<p>第二步：再启动 HBase 命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动 HBase </span></span><br><span class="line">start-hbase.sh</span><br></pre></td></tr></table></figure>

<p>启动成功，输入 <code>jps</code> 后就可以看见有 <code>HQuorumPeer</code>、<code>HRegionServer</code>、<code>HMaster</code>，说明都已经成功启动。</p>
<ul>
<li><strong>HQuorumPeer</strong>：ZooKeeper 中的同步和选主线程，确保集群节点同步并处理领导选举。</li>
<li><strong>HRegionServer</strong>：HBase 中负责处理用户 I&#x2F;O 请求、管理HRegion和存储数据的节点。</li>
<li><strong>HMaster</strong>：HBase 集群的主服务器，监控 RegionServer、管理元数据更改和负责表的增删改查操作。</li>
</ul>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/hbase%E5%90%AF%E5%8A%A8%E6%88%90%E5%8A%9F.png"></p>
<p>第三步：进入 shell 界面：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hbase shell</span><br></pre></td></tr></table></figure>

<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/hbase%E4%BC%AA%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9Fshell%E5%91%BD%E4%BB%A4%E6%88%90%E5%8A%9F%E6%89%93%E5%BC%80.png"></p>
<p>输入 <code>exit</code>或者 <code>Ctrl + d</code> 就可以退出该模式，返回终端控制台。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">exit   # 或者 Ctrl + d</span><br></pre></td></tr></table></figure>

<p>3、停止 HBase 运行，在终端输入下面命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 停止 HBase 运行</span></span><br><span class="line">stop-hbase.sh</span><br></pre></td></tr></table></figure>

<p><strong>PS：如果在操作HBase的过程中发生错误，可以通过{HBASE_HOME}目录(&#x2F;usr&#x2F;local&#x2F;hbase-2.2.2)下的logs子目录中的日志文件查看错误原因。</strong></p>
<h2 id="4-4-编程实践"><a href="#4-4-编程实践" class="headerlink" title="4.4 编程实践"></a>4.4 编程实践</h2><h3 id="4-4-1-利用Shell命令"><a href="#4-4-1-利用Shell命令" class="headerlink" title="4.4.1 利用Shell命令"></a>4.4.1 利用Shell命令</h3><p>先启动 Hadoop 再启动 HBase ，再输入 <code>jps</code> 进行查看。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动 Hadoop 分布式文件系统(HDFS)的守护进程</span></span><br><span class="line">start-dfs.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 HBase 的所有必要守护进程</span></span><br><span class="line">start-hbase.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证是否已经成功启动了相应的守护进程</span></span><br><span class="line">jps</span><br></pre></td></tr></table></figure>

<p>出现以下信息说明启动成功：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HMaster</span><br><span class="line">DataNode</span><br><span class="line">Jps</span><br><span class="line">SecondaryNameNode</span><br><span class="line">HRegionServer</span><br><span class="line">HQuorumPeer</span><br><span class="line">NameNode</span><br></pre></td></tr></table></figure>

<p>然后进入 shell 界面</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hbase shell</span><br></pre></td></tr></table></figure>

<blockquote>
<p>HBase中创建表</p>
</blockquote>
<p>HBase 中用 <code>create</code> 命令创建表，具体如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">create &#x27;student&#x27;,&#x27;Sname&#x27;,&#x27;Ssex&#x27;,&#x27;Sage&#x27;,&#x27;Sdept&#x27;,&#x27;course&#x27;</span><br></pre></td></tr></table></figure>

<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/HBase%E7%94%A8create%E5%91%BD%E4%BB%A4%E5%88%9B%E5%BB%BA%E8%A1%A8.png"></p>
<p>此时，即创建了一个 student 表，属性有：Sname，Ssex，Sage，Sdept，course。因为 HBase 的表中会有一个系统默认的属性作为行键，无需自行创建，默认为 <code>put</code> 命令操作中表名后第一个数据。创建完 student 表后，可通过 <code>describe</code> 命令查看 student 表的基本信息。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看 “student” 表的基本信息</span></span><br><span class="line">describe &#x27;student&#x27;</span><br></pre></td></tr></table></figure>

<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/student%E8%A1%A8%E5%9F%BA%E6%9C%AC%E4%BF%A1%E6%81%AF.png" style="zoom:67%;">

<blockquote>
<p>HBase数据库基本操作</p>
</blockquote>
<p>本小节主要介绍 HBase 的增、删、改、查操作。在添加数据时，HBase 会自动为添加的数据添加一个时间戳，故在需要修改数据时，只需直接添加数据，HBase 即会生成一个新的版本，从而完成 “改” 操作，旧的版本依旧保留，系统会定时回收垃圾数据，只留下最新的几个版本，保存的版本数可以在创建表的时候指定。</p>
<p><strong>添加数据</strong></p>
<p>HBase 中用 <code>put</code> 命令添加数据。</p>
<p><font color="red">PS：一次只能为一个表的一行数据的一个列，也就是一个单元格添加一个数据，所以直接用 shell 命令插入数据效率很低，在实际应用中，一般都是利用编程操作数据。</font></p>
<p>向 student 表中添加数据：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">为 student 表添加了学号为 95001，名字为 LiYing 的一行数据，其行键为 95001</span></span><br><span class="line">put &#x27;student&#x27;,&#x27;95001&#x27;,&#x27;Sname&#x27;,&#x27;LiYing&#x27;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">为 95001 行下的 course:math 列添加一个数据</span></span><br><span class="line">put &#x27;student&#x27;,&#x27;95001&#x27;,&#x27;course:math&#x27;,&#x27;80&#x27;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">为 95001 行下的 Ssex 列添加一个数据</span></span><br><span class="line">put &#x27;student&#x27;,&#x27;95001&#x27;,&#x27;Ssex&#x27;,&#x27;Male&#x27;</span><br></pre></td></tr></table></figure>

<p>每条命令执行后如添加成功，均返回以下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Took 0.0548 seconds</span><br></pre></td></tr></table></figure>

<p>添加后执行使用如下命令可以看到刚才添加的 3 条数据：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检索 student 表中键为 95001 的行的所有数据</span></span><br><span class="line">get &#x27;student&#x27;,&#x27;95001&#x27;</span><br></pre></td></tr></table></figure>

<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/%E6%B7%BB%E5%8A%A0%E7%9A%843%E6%9D%A1%E6%95%B0%E6%8D%AE.png"></p>
<p><strong>查看数据</strong></p>
<p>HBase 中有两个用于查看数据的命令：</p>
<ul>
<li><code>get</code> 命令，用于查看表的某一行数据。</li>
<li><code>scan</code> 命令用于查看某个表的全部数据。</li>
</ul>
<p><code>get</code> 命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 检索 student 表中键为 95001 的行的所有数据</span></span><br><span class="line">get <span class="string">&#x27;student&#x27;</span>,<span class="string">&#x27;95001&#x27;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/%E6%B7%BB%E5%8A%A0%E7%9A%843%E6%9D%A1%E6%95%B0%E6%8D%AE.png"></p>
<p><code>scan</code> 命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检索 student 表中所有数据</span></span><br><span class="line">scan &#x27;student&#x27;</span><br></pre></td></tr></table></figure>

<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/%E6%A3%80%E7%B4%A2student%E8%A1%A8%E4%B8%AD%E6%89%80%E6%9C%89%E6%95%B0%E6%8D%AE.png"></p>
<p><strong>删除数据</strong></p>
<p>在 HBase中 用 <code>delete</code> 以及 <code>deleteall</code> 命令进行删除数据操作，它们的区别是：</p>
<ul>
<li><code>delete</code> 用于删除一个数据，是 <code>put</code> 的反向操作；</li>
<li><code>deleteall</code> 操作用于删除一行数据。</li>
</ul>
<p><code>delete</code> 命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除 student 表中行键为 95001 的行的 Ssex 列的数据。</span></span><br><span class="line">delete &#x27;student&#x27;,&#x27;95001&#x27;,&#x27;Ssex&#x27;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Took 0.0091 seconds</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检索 student 表中键为 95001 的行的所有数据</span></span><br><span class="line">get &#x27;student&#x27;,&#x27;95001&#x27;</span><br></pre></td></tr></table></figure>

<p>可以看到 Ssex 列的不见了，删除了 student 表中 95001 行下的 Ssex 列的所有数据。</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/%E5%88%A0%E9%99%A4Ssex%E5%88%97%E7%9A%84%E6%89%80%E6%9C%89%E6%95%B0%E6%8D%AE.png"></p>
<p><code>deleteall</code> 命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除 student 表中的 95001 行的全部数据。</span></span><br><span class="line">deleteall &#x27;student&#x27;,&#x27;95001&#x27;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Took 0.0052 seconds</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检索 student 表中键为 95001 的行的所有数据</span></span><br><span class="line">get &#x27;student&#x27;,&#x27;95001&#x27;</span><br></pre></td></tr></table></figure>

<p>可以看到所有列不见了，即删除了 student 表中的 95001 行的全部数据。</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/%E5%88%A0%E9%99%A495001%E8%A1%8C%E7%9A%84%E5%85%A8%E9%83%A8%E6%95%B0%E6%8D%AE%E3%80%82.png"></p>
<p><strong>删除表</strong></p>
<p>删除表有两步：</p>
<ol>
<li>先让该表不可用。</li>
<li>删除表。</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">让该表不可用</span></span><br><span class="line">disable &#x27;student&#x27;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除表</span></span><br><span class="line">drop &#x27;student&#x27;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出所有的表</span></span><br><span class="line">list</span><br></pre></td></tr></table></figure>

<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/hbase%E5%88%97%E5%87%BA%E6%89%80%E6%9C%89%E7%9A%84%E8%A1%A8.png"></p>
<blockquote>
<p>查询表历史数据</p>
</blockquote>
<p>查询表的历史版本，需要两步：</p>
<ol>
<li>创建表并插入&#x2F;更新数据。</li>
<li>查询指定版本的数据。</li>
</ol>
<p>1、创建表指定保存的版本数(假设指定为5)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">create &#x27;teacher&#x27;,&#123;NAME=&gt;&#x27;username&#x27;,VERSIONS=&gt;5&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Created table teacher</span><br><span class="line">Took 0.7303 seconds                                                                                                 </span><br><span class="line">=&gt; Hbase::Table - teacher</span><br></pre></td></tr></table></figure>

<p>2、插入数据然后更新数据，使其产生历史版本数据。<strong>PS：这里插入数据和更新数据都是用 <code>put</code> 命令</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">put &#x27;teacher&#x27;,&#x27;91001&#x27;,&#x27;username&#x27;,&#x27;Mary&#x27;</span><br><span class="line">put &#x27;teacher&#x27;,&#x27;91001&#x27;,&#x27;username&#x27;,&#x27;Mary1&#x27;</span><br><span class="line">put &#x27;teacher&#x27;,&#x27;91001&#x27;,&#x27;username&#x27;,&#x27;Mary2&#x27;</span><br><span class="line">put &#x27;teacher&#x27;,&#x27;91001&#x27;,&#x27;username&#x27;,&#x27;Mary3&#x27;</span><br><span class="line">put &#x27;teacher&#x27;,&#x27;91001&#x27;,&#x27;username&#x27;,&#x27;Mary4&#x27;  </span><br><span class="line">put &#x27;teacher&#x27;,&#x27;91001&#x27;,&#x27;username&#x27;,&#x27;Mary5&#x27;</span><br></pre></td></tr></table></figure>

<p>3、查询时，指定查询的历史版本数。默认会查询出最新的数据。(有效取值为1到5)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">get &#x27;teacher&#x27;,&#x27;91001&#x27;,&#123;COLUMN=&gt;&#x27;username&#x27;,VERSIONS=&gt;5&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/%E6%9F%A5%E8%AF%A2%E8%A1%A8%E6%8C%87%E5%AE%9A%E7%89%88%E6%9C%AC%E7%9A%84%E6%95%B0%E6%8D%AE.png"></p>
<blockquote>
<p>退出HBase数据库表操作</p>
</blockquote>
<p>最后退出数据库操作，输入 <code>exit</code> 命令即可退出。</p>
<p><strong>PS：这里退出 HBase 数据库是退出对数据库表的操作，而不是停止启动 HBase 数据库后台运行。</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">exit   # 或者 Ctrl + d</span><br></pre></td></tr></table></figure>

<h3 id="4-4-2-Java-API-编程实践"><a href="#4-4-2-Java-API-编程实践" class="headerlink" title="4.4.2 Java API 编程实践"></a>4.4.2 Java API 编程实践</h3><p>本实例采用 IDEA 开发工具。版本：2023.3.6</p>
<p>关于在 Linux 安装使用 IDEA 可以参考下文 <strong>Linux 安装使用 IDEA</strong>。</p>
<p>关于在 IDEA 中使用 Maven 可以参考下文 <strong>IDEA 中使用 Maven</strong>。</p>
<p><font color="red">PS：在开始运行程序之前，需要启动 HDFS 和 HBase 。这很重要！！千万不要忘记了。</font>😓</p>
<p>1、创建一个 Maven 项目，项目名为 HBaseExample</p>
<p>修改 <code>pom.xml</code> 文件，导入 HBase 的 Java API 的依赖包。<strong>PS：记得刷新依赖</strong>。😄</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hbase<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hbase-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/%E5%AF%BC%E5%85%A5HBase%E4%BE%9D%E8%B5%96%E5%8C%85.png" style="zoom: 50%;">

<p>2、操作之前请确保没有 student 表：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#打开 shell 命令行模式</span></span><br><span class="line">hbase shell </span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有的表，查看是否已经有 student 表</span></span><br><span class="line">list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果有请先删除 student 表</span></span><br><span class="line"><span class="comment"># 让该表不可用</span></span><br><span class="line"><span class="built_in">disable</span> <span class="string">&#x27;student&#x27;</span></span><br><span class="line"><span class="comment"># 删除表</span></span><br><span class="line">drop <span class="string">&#x27;student&#x27;</span></span><br></pre></td></tr></table></figure>

<p>3、编写 <code>ExampleForHBase.java</code> </p>
<p><font color="red">PS：注意修改一下 <code>configuration.set(&quot;hbase.rootdir&quot;, &quot;hdfs://localhost:9000/hbase-2.2.2&quot;)</code> 与 Hbase 配置文件的内容一致。</font>😀</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.muyoukule;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.HBaseConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.TableName;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.client.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.util.Bytes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExampleForHBase</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Configuration configuration;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection connection;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Admin admin;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        init();</span><br><span class="line">        createTable(<span class="string">&quot;student&quot;</span>, <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;score&quot;</span>&#125;);</span><br><span class="line">        insertData(<span class="string">&quot;student&quot;</span>, <span class="string">&quot;zhangsan&quot;</span>, <span class="string">&quot;score&quot;</span>, <span class="string">&quot;English&quot;</span>, <span class="string">&quot;69&quot;</span>);</span><br><span class="line">        insertData(<span class="string">&quot;student&quot;</span>, <span class="string">&quot;zhangsan&quot;</span>, <span class="string">&quot;score&quot;</span>, <span class="string">&quot;Math&quot;</span>, <span class="string">&quot;86&quot;</span>);</span><br><span class="line">        insertData(<span class="string">&quot;student&quot;</span>, <span class="string">&quot;zhangsan&quot;</span>, <span class="string">&quot;score&quot;</span>, <span class="string">&quot;Computer&quot;</span>, <span class="string">&quot;77&quot;</span>);</span><br><span class="line">        getData(<span class="string">&quot;student&quot;</span>, <span class="string">&quot;zhangsan&quot;</span>, <span class="string">&quot;score&quot;</span>, <span class="string">&quot;English&quot;</span>);</span><br><span class="line">        close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        configuration = HBaseConfiguration.create();</span><br><span class="line">        <span class="comment">//注意修改这里，需要与 Hbase 配置文件保持一致</span></span><br><span class="line">        configuration.set(<span class="string">&quot;hbase.rootdir&quot;</span>, <span class="string">&quot;hdfs://localhost:9000/hbase-2.2.2&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = ConnectionFactory.createConnection(configuration);</span><br><span class="line">            admin = connection.getAdmin();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (admin != <span class="literal">null</span>) &#123;</span><br><span class="line">                admin.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">null</span> != connection) &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">createTable</span><span class="params">(String myTableName, String[] colFamily)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">TableName</span> <span class="variable">tableName</span> <span class="operator">=</span> TableName.valueOf(myTableName);</span><br><span class="line">        <span class="keyword">if</span> (admin.tableExists(tableName)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;talbe is exists!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">TableDescriptorBuilder</span> <span class="variable">tableDescriptor</span> <span class="operator">=</span> TableDescriptorBuilder.newBuilder(tableName);</span><br><span class="line">            <span class="keyword">for</span> (String str : colFamily) &#123;</span><br><span class="line">                <span class="type">ColumnFamilyDescriptor</span> <span class="variable">family</span> <span class="operator">=</span></span><br><span class="line">                        ColumnFamilyDescriptorBuilder.newBuilder(Bytes.toBytes(str)).build();</span><br><span class="line">                tableDescriptor.setColumnFamily(family);</span><br><span class="line">            &#125;</span><br><span class="line">            admin.createTable(tableDescriptor.build());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">insertData</span><span class="params">(String tableName, String rowKey, String colFamily, String col, String val)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Table</span> <span class="variable">table</span> <span class="operator">=</span> connection.getTable(TableName.valueOf(tableName));</span><br><span class="line">        <span class="type">Put</span> <span class="variable">put</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Put</span>(rowKey.getBytes());</span><br><span class="line">        put.addColumn(colFamily.getBytes(), col.getBytes(), val.getBytes());</span><br><span class="line">        table.put(put);</span><br><span class="line">        table.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">getData</span><span class="params">(String tableName, String rowKey, String colFamily, String col)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Table</span> <span class="variable">table</span> <span class="operator">=</span> connection.getTable(TableName.valueOf(tableName));</span><br><span class="line">        <span class="type">Get</span> <span class="variable">get</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Get</span>(rowKey.getBytes());</span><br><span class="line">        get.addColumn(colFamily.getBytes(), col.getBytes());</span><br><span class="line">        <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> table.get(get);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(result.getValue(colFamily.getBytes(), col == <span class="literal">null</span> ? <span class="literal">null</span> : col.getBytes())));</span><br><span class="line">        table.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最终编写好的项目结构和代码如下：</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/%E7%BC%96%E5%86%99%E4%BB%A3%E7%A0%81(1).png" style="zoom: 67%;">

<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/%E7%BC%96%E5%86%99%E4%BB%A3%E7%A0%81(2).png" style="zoom: 67%;">

<p>项目空白处右键 <code>Run</code> 开始运行程序，程序运行成功以后，会在运行结果中出现  <code>69</code>：</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C69.png" style="zoom: 67%;">

<p>打印出来的 <code>69</code> 上面是日志的警告信息，可以忽略。</p>
<p>这时，可以到 HBase Shell 交互式环境中，使用如下命令查看 student 表是否创建成功：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出所有的表</span></span><br><span class="line">list</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看 student 表的全部数据</span></span><br><span class="line">scan &#x27;student&#x27;</span><br></pre></td></tr></table></figure>

<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/%E6%9F%A5%E7%9C%8Bjava%E5%88%9B%E5%BB%BAstudent%E8%A1%A8%E7%BB%93%E6%9E%9C.png"></p>
<p>至此使用 Java 代码操作 HBase 成功！！！！</p>
<h1 id="5-Hive"><a href="#5-Hive" class="headerlink" title="5. Hive"></a>5. Hive</h1><p>官方介绍：Apache Hive is a distributed, fault-tolerant data warehouse system that enables analytics at a massive scale. Hive Metastore(HMS) provides a central repository of metadata that can easily be analyzed to make informed, data driven decisions, and therefore it is a critical component of many data lake architectures. Hive is built on top of Apache Hadoop and supports storage on S3, adls, gs etc though hdfs. Hive allows users to read, write, and manage petabytes of data using SQL.</p>
<h2 id="5-1-Hive-下载与安装"><a href="#5-1-Hive-下载与安装" class="headerlink" title="5.1 Hive 下载与安装"></a>5.1 Hive 下载与安装</h2><p><a href="https://downloads.apache.org/hive/">官网下载</a></p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/Hive%E5%AE%98%E7%BD%91%E4%B8%8B%E8%BD%BD(1).png" style="zoom: 67%;">

<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/Hive%E5%AE%98%E7%BD%91%E4%B8%8B%E8%BD%BD(2).png" style="zoom: 80%;">

<p>打不开官网？试试清<a href="https://mirrors.tuna.tsinghua.edu.cn/apache/hive/">华大学开源软件镜像站下载</a>😀</p>
<p>下载好之后就可以开始安装了：</p>
<p>1、执行以下命令，选择文件上传到 Linux 的 &#x2F; 目录(具体请参考上文 <strong>FinalShell 文件上传</strong>)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /</span><br><span class="line"></span><br><span class="line">sudo rz</span><br></pre></td></tr></table></figure>

<p>2、解压缩 Hive 安装文件到 &#x2F;usr&#x2F;local 目录，并对解压缩之后的文件进行重命名，授权</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 解压缩 Hive  安装文件到 /usr/local 目录</span></span><br><span class="line">sudo tar -zxvf apache-hive-3.1.2-bin.tar.gz -C /usr/local</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入到 /usr/local 目录</span></span><br><span class="line"><span class="built_in">cd</span> /usr/local</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重命名文件</span></span><br><span class="line">sudo <span class="built_in">mv</span> ./apache-hive-3.1.2-bin ./hive-3.1.2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改文件权限</span></span><br><span class="line"><span class="comment"># muyoukule:muyoukule 是用户组和用户名，记得换成当前登录用户的用户名</span></span><br><span class="line">sudo <span class="built_in">chown</span> -R muyoukule:muyoukule hive-3.1.2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看文件</span></span><br><span class="line">ll</span><br></pre></td></tr></table></figure>

<p>3、配置环境变量，使用 vim 编辑器修改 &#x2F;etc&#x2F;profile 文件，在文件最后添加环境变量。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改 /etc/profile 文件</span></span><br><span class="line">sudo vim /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment"># Hive 环境变量</span></span><br><span class="line"><span class="built_in">export</span> HIVE_HOME=/usr/local/hive-3.1.2</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$HIVE_HOME</span>/bin</span><br></pre></td></tr></table></figure>

<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/%E9%85%8D%E7%BD%AEHive%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F.png" style="zoom:67%;">

<p>4、重启环境变量配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure>

<p>5、修改<code>/usr/local/hive-3.1.2/conf</code>下的 hive-site.xml(<strong>注意自己的路径</strong>)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/hive-3.1.2/conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 hive-default.xml.template 重命名为 hive-default.xml</span></span><br><span class="line"><span class="built_in">mv</span> hive-default.xml.template hive-default.xml</span><br></pre></td></tr></table></figure>

<p>6、使用 gedit 编辑器新建一个配置文件 <code>hive-site.xml</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 直接操作虚拟机使用 gedit 修改配置文件</span></span><br><span class="line">sudo gedit /usr/local/hive-3.1.2/conf/hive-site.xml</span><br></pre></td></tr></table></figure>

<p>7、在 <code>hive-site.xml</code> 中添加如下配置信息：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> standalone=<span class="string">&quot;no&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml-stylesheet type=<span class="string">&quot;text/xsl&quot;</span> href=<span class="string">&quot;configuration.xsl&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- jdbc 连接的 URL：hive 是数据库名称，名称随意但要与后面创建的数据库名称相对应--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionURL<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>jdbc:mysql://localhost:3306/hive?createDatabaseIfNotExist=true<span class="symbol">&amp;amp;</span>useSSL=false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>JDBC connect string for a JDBC metastore<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- jdbc 连接的 Driver：根据自己MySQL 的版本选择对应的Driver，--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionDriverName<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Driver class name for a JDBC metastore<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- jdbc 连接的 username--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionUserName<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>root<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>username to use against metastore database<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- jdbc 连接的 password--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionPassword<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>root<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>password to use against metastore database<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>添加后保存并退出即可。</p>
<h2 id="5-2-配置-MySQL"><a href="#5-2-配置-MySQL" class="headerlink" title="5.2 配置 MySQL"></a>5.2 配置 MySQL</h2><p>这里我们采用 MySQL 数据库保存 Hive 的元数据，而不是采用 Hive 自带的 derby 来存储元数据。</p>
<p><strong>下载 mysql jdbc 包</strong></p>
<p><a href="https://dev.mysql.com/downloads/connector/j/">官网下载</a></p>
<p>打开默认是最新版，也可以点击 <code>Archives</code> 选择历史版本。</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/mysql%20jdbc%E5%AE%98%E7%BD%91%E4%B8%8B%E8%BD%BD.png" style="zoom: 50%;">

<p>选择历史版本后点击 <code>Download</code> 进行下载：</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/mysql%20jdbc%E5%8E%86%E5%8F%B2%E7%89%88%E6%9C%AC%E4%B8%8B%E8%BD%BD.png" style="zoom: 50%;">

<p>1、执行以下命令，选择文件上传到 Linux 的 &#x2F; 目录(具体请参考上文 <strong>FinalShell 文件上传</strong>)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /</span><br><span class="line"></span><br><span class="line">sudo rz</span><br></pre></td></tr></table></figure>

<p>2、解压缩文件到 &#x2F;usr&#x2F;local 目录，并对将 <code>mysql-connector-java-5.1.40-bin.jar</code> 拷贝到 hive 的 lib 目录下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 解压缩文件到 /usr/local 目录</span></span><br><span class="line">sudo tar -zxvf mysql-connector-java-5.1.48.tar.gz -C /usr/local</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入到 /usr/local 目录</span></span><br><span class="line"><span class="built_in">cd</span> /usr/local</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 mysql-connector-java-5.1.48-bin.jar 拷贝到 /usr/local/hive-3.1.2/lib 目录下</span></span><br><span class="line"><span class="built_in">cp</span> mysql-connector-java-5.1.48/mysql-connector-java-5.1.48-bin.jar  /usr/local/hive-3.1.2/lib </span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝后可以查看是否拷贝成功</span></span><br><span class="line">find ./hive-3.1.2/lib -<span class="built_in">type</span> f -name <span class="string">&quot;mysql-connector-java-5.1.48-bin.jar&quot;</span></span><br></pre></td></tr></table></figure>

<p>3、启动并登陆 mysql shell</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动mysql服务</span></span><br><span class="line">systemctl status mysqld</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 登陆 shell 界面</span></span><br><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure>

<p>4、新建 Hive 数据库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 这个 hive 数据库与 hive-site.xml 中localhost:3306/hive的 hive 对应，用来保存 hive 元数据</span><br><span class="line">create database hive;    </span><br></pre></td></tr></table></figure>

<p>5、配置 MySQL 允许 Hive 接入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 将所有数据库的所有表的所有权限赋给hive用户，后面的 hive 是配置 hive-site.xml 中配置的连接密码</span><br><span class="line">grant all on *.* to root@localhost identified by &#x27;root&#x27;;</span><br><span class="line"></span><br><span class="line"># 刷新 mysql 系统权限关系表</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>

<p>6、启动 Hive(启动 Hive 之前，请先启动 Hadoop )</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#启动hadoop</span></span><br><span class="line">start-all.sh</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动hive</span></span><br><span class="line">hive</span><br></pre></td></tr></table></figure>

<p>假如在启动时报错：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">org.datanucleus.store.rdbms.exceptions.MissingTableException: Required table missing : &quot;`VERSION`&quot; in Catalog &quot;&quot; Schema &quot;&quot;. DataNucleus requires this table to perform its persistence operations. Either your MetaData is incorrect, or you need to enable &quot;datanucleus.schema.autoCreateTables&quot;</span><br></pre></td></tr></table></figure>

<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/Hive%E5%90%AF%E5%8A%A8%E6%8A%A5%E9%94%99.png"></p>
<p>解决方法：</p>
<p>先退出 Hive，再执行命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 退出 Hive</span></span><br><span class="line"><span class="built_in">exit</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化 Hive 的元数据存储的 schema</span></span><br><span class="line">schematool -dbType mysql -initSchema</span><br></pre></td></tr></table></figure>

<p>看到如下内容即代表初始化完毕：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/%E6%88%90%E5%8A%9F%E5%88%9D%E5%A7%8B%E5%8C%96%E5%85%83%E6%95%B0%E6%8D%AE%E5%BA%93.png"></p>
<p>初始化后再次使用 <code>hive</code> 启动 Hive，可以看到成功启动：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/%E6%88%90%E5%8A%9F%E5%90%AF%E5%8A%A8Hive.png"></p>
<p>启动进入 Hive 的交互式执行环境以后，会出现如下命令提示符：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hive&gt;</span><br></pre></td></tr></table></figure>

<p>可以在里面输入 SQL 语句，如果要退出 Hive 交互式执行环境，可以输入如下命令：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">exit;	# 或者 Ctrl <span class="operator">+</span> d</span><br></pre></td></tr></table></figure>

<h1 id="6-Sqoop"><a href="#6-Sqoop" class="headerlink" title="6. Sqoop"></a>6. Sqoop</h1><p>Sqoop 是一款开源工具，专注于在 Hadoop(Hive)与传统数据库(如 MySQL、PostgreSQL 等)之间高效传输大批量数据。它可以将关系型数据库中的数据导入到 Hadoop 的 HDFS、Hive、HBase 等数据存储系统中，也可以从 Hadoop 的文件系统中导出数据到关系型数据库中。Sqoop 的核心设计思想是利用MapReduce加快数据传输速度，实现批处理方式进行数据传输。</p>
<h2 id="6-1-Sqoop下载与安装"><a href="#6-1-Sqoop下载与安装" class="headerlink" title="6.1 Sqoop下载与安装"></a>6.1 Sqoop下载与安装</h2><p><a href="https://archive.apache.org/dist/sqoop/">官网下载</a></p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/sqoop%E5%AE%98%E7%BD%91%E4%B8%8B%E8%BD%BD1.png" style="zoom: 67%;">

<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/sqoop%E5%AE%98%E7%BD%91%E4%B8%8B%E8%BD%BD2.png" style="zoom:67%;">

<p>下载好之后就可以开始安装了：</p>
<p>1、执行以下命令，选择文件上传到 Linux 的 &#x2F; 目录(具体请参考上文 <strong>FinalShell 文件上传</strong>)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /</span><br><span class="line"></span><br><span class="line">sudo rz</span><br></pre></td></tr></table></figure>

<p>2、解压缩 Sqoop 安装文件到 &#x2F;usr&#x2F;local 目录，并对解压缩之后的文件进行重命名，授权</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 解压缩 Sqoop 安装文件到 /usr/local 目录</span></span><br><span class="line">sudo tar -zxvf sqoop-1.4.7.bin__hadoop-2.6.0.tar.gz -C /usr/local</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入到 /usr/local 目录</span></span><br><span class="line"><span class="built_in">cd</span> /usr/local</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重命名文件</span></span><br><span class="line">sudo <span class="built_in">mv</span> ./sqoop-1.4.7.bin__hadoop-2.6.0 ./sqoop-1.4.7</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改文件权限</span></span><br><span class="line"><span class="comment"># muyoukule:muyoukule 是用户组和用户名，记得换成当前登录用户的用户名</span></span><br><span class="line">sudo <span class="built_in">chown</span> -R muyoukule:muyoukule sqoop-1.4.7</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看文件</span></span><br><span class="line">ll</span><br></pre></td></tr></table></figure>

<p>3、修改配置文件 <code>sqoop-env.sh</code></p>
<p>进入到 conf 文件夹，找到 <code>sqoop-env-template.sh</code>，修改其名称为 <code>sqoop-env.sh</code> 。然后编辑 <code>sqoop-env.sh</code> 文件，设置<code>HADOOP_COMMON_HOME</code>，<code>HADOOP_MAPRED_HOME</code>，<code>HIVE_HOME</code> 等环境变量。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将 sqoop-env-template.sh 复制一份并命名为 sqoop-env.sh</span></span><br><span class="line"><span class="built_in">cp</span> ./sqoop-1.4.7/conf/sqoop-env-template.sh ./sqoop-1.4.7/conf/sqoop-env.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑 sqoop-env.sh</span></span><br><span class="line">vim ./sqoop-1.4.7/conf/sqoop-env.sh</span><br></pre></td></tr></table></figure>

<p>修改 <code>sqoop-env.sh</code> 的如下信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置 Hadoop 的环境变量</span></span><br><span class="line"><span class="built_in">export</span> HADOOP_COMMON_HOME=/usr/local/hadoop-3.1.3</span><br><span class="line"><span class="built_in">export</span> HADOOP_MAPRED_HOME=/usr/local/hadoop-3.1.3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置 HBase 的环境变量</span></span><br><span class="line"><span class="built_in">export</span> HBASE_HOME=/usr/local/hbase-2.2.2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置 Hive 的环境变量</span></span><br><span class="line"><span class="built_in">export</span> HIVE_HOME=/usr/local/hive-3.1.2</span><br><span class="line"></span><br><span class="line"><span class="comment">#如果配置了 ZooKeeper,也需要在此配置 ZooKeeper 的路径</span></span><br><span class="line"><span class="comment">#export ZOOCFGDIR= </span></span><br></pre></td></tr></table></figure>

<p>因为在 <code>sqoop-env.sh</code> 文件中已经存在有如上这几个变量，只是被注释掉了，也就是前面带了 <code>#</code> 号，所以大家可以直接寻找到对应的变量，将前面起注释作用的 <code>#</code> 号删去，然后修改后面的值即可。</p>
<p><strong>PS：vim 编辑器怎样搜索字符串？</strong></p>
<ul>
<li>普通模式下，按下 <code>/</code> 键，然后输入你想要搜索的字符串，按下 <code>Enter</code> 键开始搜索。</li>
<li>要查找下一个匹配的字符串，按 <code>n</code>。</li>
<li>要查找上一个匹配的字符串，按 <code>N</code>。</li>
</ul>
<p>但是我很懒不想去找🙄，所以我就直接写在文件顶部了，这个是不影响运行操作的，具体图示如下：</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/sqoop-env.sh.png" style="zoom: 67%;">

<p>4、配置环境变量，使用 vim 编辑器修改 &#x2F;etc&#x2F;profile 文件，在文件最后添加环境变量。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改 /etc/profile 文件</span></span><br><span class="line">sudo vim /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment"># Sqoop 环境变量</span></span><br><span class="line"><span class="built_in">export</span> SQOOP_HOME=/usr/local/sqoop-1.4.7</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$SQOOP_HOME</span>/bin</span><br></pre></td></tr></table></figure>

<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/%E9%85%8D%E7%BD%AESqoop%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F.png" style="zoom:67%;">

<p>5、重启环境变量配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure>

<p>6、检查安装结果，出现下面信息代表安装成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看 Sqoop 版本信息</span></span><br><span class="line">sqoop version</span><br></pre></td></tr></table></figure>

<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/%E6%A3%80%E6%9F%A5Sqoop%E5%AE%89%E8%A3%85%E7%BB%93%E6%9E%9C.png"></p>
<p>上面的警告是因为一些组件(HCatalog、Accumulo和Zookeeper)导致的，我们后续不会用到这些组件所以不用管它。</p>
<p>这样，Sqoop 就安装好了。</p>
<h2 id="6-2-配置-MySQL"><a href="#6-2-配置-MySQL" class="headerlink" title="6.2 配置 MySQL"></a>6.2 配置 MySQL</h2><p>1、添加 MySQL 驱动</p>
<p>将 MySQL 的 JDBC 驱动包(例如 <code>mysql-connector-java-5.1.40-bin.jar</code> )添加到 Sqoop 的 lib 目录下。<strong>PS：你的 MySQL 驱动要和你的数据库版本兼容。</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入到 /usr/local 目录</span></span><br><span class="line"><span class="built_in">cd</span> /usr/local</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 mysql-connector-java-5.1.48-bin.jar 拷贝到 /usr/local/sqoop-1.4.7/lib 目录下</span></span><br><span class="line"><span class="built_in">cp</span> ./mysql-connector-java-5.1.48/mysql-connector-java-5.1.48-bin.jar /usr/local/sqoop-1.4.7/lib</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝后可以查看是否拷贝成功</span></span><br><span class="line">find ./sqoop-1.4.7/lib -<span class="built_in">type</span> f -name <span class="string">&quot;mysql-connector-java-5.1.48-bin.jar&quot;</span></span><br></pre></td></tr></table></figure>

<p>2、测试与 MySQL 的连接</p>
<p>首先请确保 MySQL 服务已经启动了，如果没有启动，请执行下面命令启动：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#检查 MySQL 服务状态</span></span><br><span class="line">systemctl status mysqld</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 MySQL</span></span><br><span class="line">sudo systemctl start mysqld   </span><br></pre></td></tr></table></figure>

<p>3、然后就可以测试 Sqoop 与 MySQL 之间的连接是否成功：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqoop list-databases --connect jdbc:mysql://127.0.0.1:3306/ --username root -P</span><br></pre></td></tr></table></figure>

<p>如果出现错误：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">WARN: Establishing SSL connection without server&#x27;s identity verification is not recommended. According to MySQL 5.5.45+, 5.6.26+ and 5.7.6+ requirements SSL connection must be established by default if explicit option isn&#x27;t set. For compliance with existing applications not using SSL the verifyServerCertificate property is set to &#x27;false&#x27;. You need either to explicitly disable SSL by setting useSSL=false, or set useSSL=true and provide truststore for server certificate verification.</span><br><span class="line">2024-03-23 21:20:32,889 ERROR manager.CatalogQueryManager: Failed to list databases</span><br></pre></td></tr></table></figure>

<p>首先检查在配置 jdbc 连接的 URL是是否加了 <code>useSSL=false</code> 参数。如果没加，将它加上后再次测试；如果加了也报这个错误则依次：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">登入数据库</span></span><br><span class="line">mysql -uroot -p</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看是否开启SSL</span></span><br><span class="line">SHOW VARIABLES LIKE &#x27;%ssl%&#x27;;</span><br></pre></td></tr></table></figure>

<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/%E6%9F%A5%E7%9C%8B%E6%98%AF%E5%90%A6%E5%BC%80%E5%90%AFSSL.png" style="zoom: 80%;">

<p>看到 <code>have_ssl</code> 的值为 <code>YES</code>，表示已开启 SSL。( <code>have_openssl</code>  表示是否支持SSL)。需要将 SSL 关闭：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改 MySQL 配置文件，目录根据安装时自行查找</span></span><br><span class="line">sudo vim /etc/my.cnf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在配置文件中添加 disable_ssl 和 skip_ssl 参数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加完后重启 MySQL 服务</span></span><br><span class="line">sudo systemctl restart mysqld</span><br></pre></td></tr></table></figure>

<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/%E4%BF%AE%E6%94%B9MySQL%E9%85%8D%E7%BD%AE.png" style="zoom: 67%;">

<p>重启后再次测试 ，MySQL 的数据库列表显示在屏幕上表示连接成功：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqoop list-databases --connect jdbc:mysql://127.0.0.1:3306/ --username root -P</span><br></pre></td></tr></table></figure>

<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%88%97%E8%A1%A8.png"></p>
<h1 id="Linux-安装使用-IDEA"><a href="#Linux-安装使用-IDEA" class="headerlink" title="Linux 安装使用 IDEA"></a>Linux 安装使用 IDEA</h1><p>我这里使用的是 <strong>IDEA 2023.3.6 版本和 CentOS7 系统</strong>	其他版本和系统仅作参考。</p>
<p><font color="red">PS：Linux 中安装使用 IDEA 必须直接操作虚拟机，不能在远程连接工具操作，否则会打不开 IDEA。</font>😅</p>
<p>我这里下载的是<del>免费</del>社区版，社区版功能少虽然少，但是在这里够用。但是如果你有特定需求，需要更多的高级功能和定制选项，建议选择<del>收费</del>企业版😐，当然破解码网上都可以找到，安装步骤是一样的，大家有需求可以自行去网上查找相关教程。</p>
<h2 id="IDEA-的下载"><a href="#IDEA-的下载" class="headerlink" title="IDEA 的下载"></a>IDEA 的下载</h2><p>我这里是在本机上下载安装包然后上传到虚拟机，当然你也可以直接在 Linux 中打开 Firefox 浏览器进行下载。</p>
<p><a href="https://www.jetbrains.com/zh-cn/idea/download/other.html">下载官网</a></p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/%E5%AE%98%E7%BD%91%E4%B8%8B%E8%BD%BDidea.png">

<h2 id="IDEA-的安装"><a href="#IDEA-的安装" class="headerlink" title="IDEA 的安装"></a>IDEA 的安装</h2><p>1、执行以下命令，选择文件上传到 Linux 的 &#x2F; 目录(具体请参考上文 <strong>FinalShell 文件上传</strong>)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /</span><br><span class="line"></span><br><span class="line">sudo rz</span><br></pre></td></tr></table></figure>

<p>2、解压缩 IDEA 安装文件到 &#x2F;usr&#x2F;local 目录，并对解压缩之后的文件进行重命名</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 解压缩 IDEA 安装文件到 /usr/local 目录</span></span><br><span class="line">sudo tar -zxvf ideaIC-2023.3.6.tar.gz -C /usr/local</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入到 /usr/local 目录</span></span><br><span class="line"><span class="built_in">cd</span> /usr/local</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重命名文件</span></span><br><span class="line">sudo <span class="built_in">mv</span> ./idea-IC-233.15026.9 ./idea-2023.3.6</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入文件 idea-2023.3.6 的 bin 目录</span></span><br><span class="line"><span class="built_in">cd</span> idea-2023.3.6/bin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看文件</span></span><br><span class="line">ll</span><br></pre></td></tr></table></figure>

<p>可以看到 bin 目录下有个 idea.sh 文件：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/%E6%9F%A5%E7%9C%8Bidea%E7%9A%84bin%E7%9B%AE%E5%BD%95.png"></p>
<p>3、运行 idea.sh 文件进行安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./idea.sh</span><br></pre></td></tr></table></figure>

<p>假如你觉得每次通过 <code>./idea.sh</code> 指令启动 IDEA 要进入到 IDEA 的环境目录很麻烦，你也可以为 IDEA 配置环境变量(不觉得麻烦的可以跳过此步骤😄)：</p>
<p>1、使用 vim 编辑器修改 &#x2F;etc&#x2F;profile 文件，在文件最后添加环境变量。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改 /etc/profile 文件</span></span><br><span class="line">sudo vim /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment"># IDEA 环境变量</span></span><br><span class="line"><span class="built_in">export</span> IDEA_HOME=/usr/local/idea-2023.3.6</span><br><span class="line"><span class="built_in">export</span> PATH=:<span class="variable">$PATH</span>:<span class="variable">$&#123;IDEA_HOME&#125;</span>/bin</span><br></pre></td></tr></table></figure>

<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/%E9%85%8D%E7%BD%AEIDEA%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F.png" style="zoom: 67%;">

<p>2、重启环境变量配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure>

<p>3、之后我们就可以在任意目录下输入 <code>idea.sh</code> 启动 IDEA 图形化界面了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动 IDEA 图形化界面</span></span><br><span class="line">idea.sh</span><br></pre></td></tr></table></figure>

<p>第一次启动 IDEA 图形化界面后会依次弹出以下界面，按照如下步骤操作即可：</p>
<p>1、打钩并点击 <code>Continue</code> </p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/IDEA%E5%90%AF%E5%8A%A8(1).png" style="zoom: 67%;">

<p>2、出现 “Date Sharing”  窗口，点击 <code>Don&#39;t Send</code> </p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/IDEA%E5%90%AF%E5%8A%A8(2).png" style="zoom:67%;">

<p>3、前面步骤操作完后，会出现 IDEA 界面</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/IDEA%E5%90%AF%E5%8A%A8(3).png" style="zoom: 50%;">

<p>至此 IDEA 安装完成！！是不是超级简单！！!😀</p>
<h2 id="IDEA-的使用"><a href="#IDEA-的使用" class="headerlink" title="IDEA 的使用"></a>IDEA 的使用</h2><p>1、点击 <code>New Project</code> 新建项目</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/IDEA%E7%9A%84%E4%BD%BF%E7%94%A8(1).png" style="zoom:50%;">

<p>2、修改项目名称，选择 JDK( IDEA 会识别到系统下安装过的 JDK 作为默认项)，如果没有 JDK，需要点击 <code>Download JDK</code> 进行下载</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/IDEA%E7%9A%84%E4%BD%BF%E7%94%A8(2).png" style="zoom:50%;">

<p>2、IDEA 提示 Untrusted Server’s certificate ，证书不可用( Server’s certificate is not trusted )，不用管，点击  <code>Accept</code></p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/IDEA%E7%9A%84%E4%BD%BF%E7%94%A8(3).png" style="zoom:50%;">

<p>4、IDEA 默认会创建一个示例项目，等待右下角 JDK 加载完成后在项目空白处右键点击 <code>Run</code></p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/IDEA%E7%9A%84%E4%BD%BF%E7%94%A8(4).png" style="zoom:50%;">

<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/IDEA%E7%9A%84%E4%BD%BF%E7%94%A8(5).png" style="zoom:50%;">

<p>5、之后看见控制台成功输出结果，成功！！！</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/IDEA%E7%9A%84%E4%BD%BF%E7%94%A8(6).png" style="zoom:50%;">

<p> 至此，IDEA 新建项目成功！就可以进行 Java 代码的编写了！！！</p>
<h1 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h1><p>Maven是一个强大的项目管理工具，主要服务于Java项目。它通过对项目构建过程的标准化和自动化，实现了依赖管理的简化，从而极大地提升了开发效率，并确保了项目的高质量输出。Maven的核心功能包括项目构建、依赖管理和项目信息管理，为开发者提供了一个统一、高效的平台来管理复杂的Java项目。如果你想了解更多关于 Maven 的知识请上网查阅，这里只做简单介绍。</p>
<p>这里我们主要使用到了依赖管理功能：采用 <code>pom.xml</code> 来导入依赖，可以自动下载 jar，以及其所依赖 jar，无需手动下载，拷贝 jar 到项目中。简单理解就是找 jar 包太麻烦了，我懒得自己找，让 Maven 帮我找。😏</p>
<h2 id="Maven-下载"><a href="#Maven-下载" class="headerlink" title="Maven 下载"></a>Maven 下载</h2><p><a href="https://maven.apache.org/download.cgi">下载官网</a></p>
<p>直接点击下载最新版或者下载以前的版本</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/Maven%E4%B8%8B%E8%BD%BD%E5%AE%98%E7%BD%91%20.png"></p>
<p>点击 <code>legacy archives</code> 进入页面自行选择相应版本即可。</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/maven%E5%8E%86%E5%8F%B2%E7%89%88%E6%9C%AC.png" style="zoom: 67%;">

<p>打不开官网？试试<a href="https://mirrors.tuna.tsinghua.edu.cn/apache/maven/">清华大学开源软件镜像站下载</a>。</p>
<h2 id="Maven-安装"><a href="#Maven-安装" class="headerlink" title="Maven 安装"></a>Maven 安装</h2><p>1、执行以下命令，选择文件上传到 Linux 的 &#x2F; 目录(具体请参考上文 <strong>FinalShell 文件上传</strong>)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /</span><br><span class="line"></span><br><span class="line">sudo rz</span><br></pre></td></tr></table></figure>

<p>2、解压缩 Maven 安装文件到 &#x2F;usr&#x2F;local 目录，并对解压缩之后的文件进行重命名</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 解压缩 Maven 安装文件到 /usr/local 目录</span></span><br><span class="line">sudo tar -zxvf apache-maven-3.9.6-bin.tar.gz -C /usr/local</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入到 /usr/local 目录</span></span><br><span class="line"><span class="built_in">cd</span> /usr/local</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重命名文件</span></span><br><span class="line">sudo <span class="built_in">mv</span> ./apache-maven-3.9.6 ./maven-3.9.6</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看文件</span></span><br><span class="line">ll</span><br></pre></td></tr></table></figure>

<p>3、配置环境变量，使用 vim 编辑器修改 &#x2F;etc&#x2F;profile 文件，在文件最后添加环境变量。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改 /etc/profile 文件</span></span><br><span class="line">sudo vim /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment"># Maven 环境变量</span></span><br><span class="line"><span class="built_in">export</span> MAVEN_HOME=/usr/local/maven-3.9.6</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$MAVEN_HOME</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure>

<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/%E9%85%8D%E7%BD%AEMaven%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F.png" style="zoom:67%;">

<p>4、重启环境变量配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure>

<p>5、检查安装结果，出现下面信息代表安装成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看 Maven 版本信息</span></span><br><span class="line">mvn -version</span><br></pre></td></tr></table></figure>

<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/%E6%9F%A5%E7%9C%8BMaven%E7%89%88%E6%9C%AC%E4%BF%A1%E6%81%AF.png"></p>
<p>这样，Maven 就安装好了。</p>
<h2 id="Maven-仓库配置"><a href="#Maven-仓库配置" class="headerlink" title="Maven 仓库配置"></a>Maven 仓库配置</h2><blockquote>
<p>怎么理解 Maven 仓库？</p>
</blockquote>
<p>Maven 仓库主要用于管理项目的依赖和插件。它是 Maven 的核心概念之一，对于 Maven 项目的构建和管理起着至关重要的作用。</p>
<p>具体来说，Maven 仓库可以分为本地仓库、中央仓库和远程仓库。本地仓库位于用户的本地机器上，用于存储项目所需的依赖(jar包)和插件。当 Maven 构建项目时，它首先会在本地仓库中查找所需的依赖和插件。如果本地仓库中没有，Maven 会尝试从中央仓库或远程仓库中下载。</p>
<p>中央仓库是 Maven 的官方仓库，其中包含了大量开源的 Java 库和插件。它位于 Maven 的服务器上，是 Maven 社区共享资源的地方。通过中央仓库，Maven用户可以方便地获取到各种开源项目的依赖和插件。</p>
<p>除了中央仓库外，还有一些其他的远程仓库，它们可能由第三方提供，用于存储特定的依赖和插件。这些远程仓库可以作为中央仓库的补充，使得Maven用户可以获取到更多的资源。</p>
<blockquote>
<p>配置本地仓库</p>
</blockquote>
<p>1、新建存放仓库的文件夹(本地仓库)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在 /usr/local/ 下创建 名为 maven_repo 的本地仓库</span></span><br><span class="line">sudo <span class="built_in">mkdir</span> /usr/local/maven_repo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把 Maven 本地仓库目录权限赋予给 muyoukule 用户(当前登陆用户)</span></span><br><span class="line">sudo <span class="built_in">chown</span> -R muyoukule /usr/local/maven_repo</span><br></pre></td></tr></table></figure>

<p>2、打开 <code>setting.xml</code> 文件(<strong>注意自己存放的路径</strong>)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 直接操作虚拟机使用 gedit 修改 maven 配置文件</span></span><br><span class="line">sudo gedit /usr/local/maven-3.9.6/conf/settings.xml</span><br></pre></td></tr></table></figure>

<p>3、添加路径(<strong>注意自己存放的路径</strong>)</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>/usr/local/maven_repo<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure>

<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/Maven%E9%85%8D%E7%BD%AE%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93.png" style="zoom: 80%;">

<blockquote>
<p>配置远程仓库</p>
</blockquote>
<p>也可以不配置，但是下载依赖速度就会很慢。😂</p>
<p>在 <code>settings.xml</code> 中添加阿里云的镜像资源。(注意添加的位置)</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus aliyun<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure>

<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/Maven%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%A4%AE%E4%BB%93%E5%BA%93.png" style="zoom: 50%;">

<h2 id="Maven-命令"><a href="#Maven-命令" class="headerlink" title="Maven 命令"></a>Maven 命令</h2><p>以下是 Maven 的常用命令：</p>
<ul>
<li><code>mvn clean</code>：清理构建产生的文件。</li>
<li><code>mvn compile</code>：编译项目的源代码。</li>
<li><code>mvn test</code>：运行项目的单元测试。</li>
<li><code>mvn package</code>：打包项目，生成 JAR 或 WAR 文件。</li>
<li><code>mvn install</code>：将项目安装到本地 Maven 仓库。</li>
<li><code>mvn deploy</code>：将项目发布到远程仓库。</li>
<li><code>mvn site</code>：生成项目文档和报告。</li>
<li><code>mvn archetype:generate</code> 或 <code>mvn archetype:create</code>：基于原型创建新的 Maven 项目。</li>
<li><code>mvn version</code> 或 <code>mvn -v</code>：显示 Maven 版本信息和环境配置。</li>
</ul>
<h2 id="IDEA-中使用-Maven"><a href="#IDEA-中使用-Maven" class="headerlink" title="IDEA 中使用 Maven"></a>IDEA 中使用 Maven</h2><p><strong>PS：IDEA 中自带 Maven，如果你没有下载Apache Maven，直接创建 Maven 项目也行。</strong></p>
<blockquote>
<p>IDEA 中自带的 Maven</p>
</blockquote>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/IDEA%E8%87%AA%E5%B8%A6%E7%9A%84Maven.png" style="zoom:50%;">

<blockquote>
<p>配置自己下载的 Maven</p>
</blockquote>
<p><font color="red"><strong>PS：配置 Maven 之前一定要做的设置！！这很重要！这很重要！这很重要 * 3 ！！！！否则 Maven 下载依赖会失败，会爆红！！！！</strong></font> 😣😣😣</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 把 Maven 本地仓库目录权限赋予给 muyoukule 用户</span></span><br><span class="line">sudo <span class="built_in">chown</span> -R muyoukule /usr/local/maven_repo</span><br></pre></td></tr></table></figure>

<p>如果你打开有项目先将它关闭，在 <code>Customize</code> 下点击 <code>All settings</code></p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/All%20settings.png" style="zoom: 50%;">

<p>在左上角搜索 <code>maven</code>，找到如下界面进行配置</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/IDEA%E4%B8%AD%E8%AE%BE%E7%BD%AEMaven.png" style="zoom: 50%;">

<p>配置好了就可以创建 Maven 项目了。</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/IDEA%E5%88%9B%E5%BB%BAMaven%E9%A1%B9%E7%9B%AE.png" style="zoom:50%;">

<p>第一次创建 Maven 项目需要耐心等待，因为第一次创建 Maven 项目本地仓库为空，所有依赖都要去远程仓库下载。</p>
<p><font color="red"><strong>PS：每次创建完项目后记得要再次检查一下 Maven 配置是否成功！！！！</strong></font>😫😫😫</p>
<p>IDEA 左上角点击 <code>File</code> –&gt; <code>Settings</code> 进行检查。因为有些 IDEA 版本<del>很垃圾</del>有 BUG，在 <code>Customize</code> 点击 <code>All settings</code> 下配置 Maven 时失效。<font color="red"><strong>所以每次创建完项目一定要对 Maven 配置进行检查！！</strong></font></p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/Maven%E9%A1%B9%E7%9B%AE%E5%8A%A0%E8%BD%BD%E4%BE%9D%E8%B5%96.png" style="zoom: 50%;">

<p>出现 <code>BUILE SUCCESS</code> 表示依赖加载成功，默认打开的 <code>pom.xml</code> 就是管理 jar 包的地方，以后项目所有的依赖都写在这里面，无需手动导入。</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/Maven%E9%A1%B9%E7%9B%AE%E5%8A%A0%E8%BD%BD%E4%BE%9D%E8%B5%96%E6%88%90%E5%8A%9F.png" style="zoom: 50%;">

<p>创建的 Maven 项目在右侧会出现 Maven 按钮，点开后会看到有 <code>Lifecycle</code>(生命周期)、<code>Plugins</code>(插件)和 <code>Dependencies</code>(依赖)。其中在 <code>Dependencies</code> 里看到已经有一个 <code>junit</code> 依赖，这是创建项目时自动添加，用来做单元测试的，其中不难发现它与 <code>pom.xml</code> 文件里 <code>&lt;dependencies&gt;&lt;/dependencies&gt;</code> 下的：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>相对应，这是 Maven 引入外部依赖的方式，后续我们使用到的其他依赖也是使用这种形式引入项目。</p>
<p>需要注意的是引入依赖后需要点击以下刷新按钮，在 <code>Dependencies</code> 中看到了相应的依赖才可以进行使用。</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/%E6%9F%A5%E7%9C%8B%E4%BE%9D%E8%B5%96.png" style="zoom: 80%;">

<p> 至此，IDEA 新建 Maven 项目成功！就可以进行代码的编写了！！！</p>
]]></content>
      <categories>
        <category>BigData</category>
      </categories>
      <tags>
        <tag>Hadoop</tag>
        <tag>Hive</tag>
        <tag>MySQL</tag>
        <tag>HBase</tag>
        <tag>Sqoop</tag>
        <tag>IDEA</tag>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>【步骤二】Hive数据分析</title>
    <url>/posts/BigData-Case-Volume-Two/</url>
    <content><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>简介：本文章基于厦门大学提供的<a href="https://dblab.xmu.edu.cn/post/7499/">大数据课程实验案例：网站用户行为分析</a>，通过使用 CentOS 操作编写而来。具体介绍请打开链接进行阅读。</p>
<p><font color="red">这里介绍几点值得特别注意的事项：</font></p>
<p>1、对于案例所涉及的系统及软件此文档使用的是以下版本，其他软件版本随意：</p>
<ul>
<li>Linux系统（CentOS7）</li>
<li>MySQL（5.7）</li>
<li>Hadoop（3.1.3）</li>
<li>HBase（2.2.2，HBase版本需要和Hadoop版本兼容）</li>
<li>Hive（3.1.2，Hive需要和Hadoop版本兼容）</li>
<li>Sqoop（1.4.7）</li>
<li>R（3.6.0）</li>
<li>IDEA（ 2023.3.6 社区版）</li>
</ul>
<p><font color="red"><strong>PS：Hadoop 与 HBase、Hive 版本一定要兼容！！！版本一定要兼容！！！这很重要！！！</strong></font>😃😃😃其他软件随意。</p>
<p>2、本文章所有<strong>下载</strong>的所有软件均在 <code>/</code> 目录下。所有<strong>安装</strong>的所有软件均在 <code>/usr/local/</code> 目录下以 <code>软件名-版本号</code> 方式命名。在进行每个软件的安装操作之前请先<strong>整体阅读</strong>整个软件安装流程的文章有个整体思路，<strong>了解到安装此软件需要做哪些设置再进行操作</strong>，这样可以避免很多不必要的麻烦。</p>
<p>3、<font color="red"><strong>此案例分为五个步骤，请按照步骤顺序进行阅读！！</strong>🙂🙂</font></p>
<h1 id="1-操作Hive"><a href="#1-操作Hive" class="headerlink" title="1. 操作Hive"></a>1. 操作Hive</h1><p>1、启动 MySQL 数据库</p>
<p>因为需要借助于 MySQL 保存 Hive 的元数据，所以，请首先启动 MySQL 数据库，请在终端中输入下面命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看 MySQL 状态</span></span><br><span class="line">systemctl status mysqld</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动 MySQL</span></span><br><span class="line">sudo systemctl start mysqld</span><br></pre></td></tr></table></figure>

<p>2、启动 Hadoop</p>
<p>由于 Hive 是基于 Hadoop 的数据仓库，使用 HiveQL 语言撰写的查询语句，最终都会被 Hive 自动解析成 MapReduce 任务由 Hadoop 去具体执行，因此，需要启动 Hadoop，然后再启动 Hive。</p>
<p>请执行下面命令启动 Hadoop(如果你已经启动了 Hadoop 就不用再次启动了)：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动 Hadoop</span></span><br><span class="line">start-all.sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看当前运行的进程</span></span><br><span class="line">jps</span><br></pre></td></tr></table></figure>

<p>如果出现下面这些进程，说明Hadoop启动成功了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">NameNode</span><br><span class="line">DataNode</span><br><span class="line">NodeManager</span><br><span class="line">Jps</span><br><span class="line">SecondaryNameNode</span><br><span class="line">ResourceManager</span><br></pre></td></tr></table></figure>

<p>3、启动进入 Hive：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hive</span><br></pre></td></tr></table></figure>

<p>通过上述过程，我们就完成了 MySQL、Hadoop 和 Hive 三者的启动。</p>
<p>启动成功以后，就进入了 <code>hive&gt;</code> 命令提示符状态，可以输入类似 SQL 语句的 HiveQL 语句。</p>
<p>4、在 <code>hive&gt;</code> 命令提示符状态下执行下面命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 使用dblab数据库</span><br><span class="line">use dblab;</span><br><span class="line"></span><br><span class="line"># 显示数据库中所有表。</span><br><span class="line">show tables;</span><br><span class="line"></span><br><span class="line"># 查看 bigdata_user 表的各种属性；</span><br><span class="line">show create table bigdata_user;</span><br></pre></td></tr></table></figure>

<p>执行结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">OK</span><br><span class="line">CREATE EXTERNAL TABLE `bigdata_user`(</span><br><span class="line">  `id` int, </span><br><span class="line">  `uid` string, </span><br><span class="line">  `item_id` string, </span><br><span class="line">  `behavior_type` int, </span><br><span class="line">  `item_category` string, </span><br><span class="line">  `visit_date` date, </span><br><span class="line">  `province` string)</span><br><span class="line">COMMENT &#x27;Welcome to xmu dblab!&#x27;</span><br><span class="line">ROW FORMAT SERDE </span><br><span class="line">  &#x27;org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe&#x27; </span><br><span class="line">WITH SERDEPROPERTIES ( </span><br><span class="line">  &#x27;field.delim&#x27;=&#x27;\t&#x27;, </span><br><span class="line">  &#x27;serialization.format&#x27;=&#x27;\t&#x27;) </span><br><span class="line">STORED AS INPUTFORMAT </span><br><span class="line">  &#x27;org.apache.hadoop.mapred.TextInputFormat&#x27; </span><br><span class="line">OUTPUTFORMAT </span><br><span class="line">  &#x27;org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat&#x27;</span><br><span class="line">LOCATION</span><br><span class="line">  &#x27;hdfs://localhost:9000/bigdatacase/dataset&#x27;</span><br><span class="line">TBLPROPERTIES (</span><br><span class="line">  &#x27;bucketing_version&#x27;=&#x27;2&#x27;, </span><br><span class="line">  &#x27;transient_lastDdlTime&#x27;=&#x27;1711268943&#x27;)</span><br><span class="line">Time taken: 0.124 seconds, Fetched: 23 row(s)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>5、执行下面命令查看表的简单结构：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">desc bigdata_user;</span><br></pre></td></tr></table></figure>

<p>执行结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">OK</span><br><span class="line">id                      int                                         </span><br><span class="line">uid                     string                                      </span><br><span class="line">item_id                 string                                      </span><br><span class="line">behavior_type           int                                         </span><br><span class="line">item_category           string                                      </span><br><span class="line">visit_date              date                                        </span><br><span class="line">province                string                                      </span><br><span class="line">Time taken: 0.041 seconds, Fetched: 7 row(s)</span><br></pre></td></tr></table></figure>

<h1 id="2-简单查询分析"><a href="#2-简单查询分析" class="headerlink" title="2. 简单查询分析"></a>2. 简单查询分析</h1><p>1、先测试一下简单的指令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 看前10位用户对商品的行为</span><br><span class="line">select behavior_type from bigdata_user limit 10;</span><br></pre></td></tr></table></figure>

<p>执行结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">OK</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">4</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">Time taken: 0.929 seconds, Fetched: 10 row(s)</span><br></pre></td></tr></table></figure>

<p>2、如果要查出每位用户购买商品时的多种信息，输出语句格式为 <code>select 列1，列2，….，列n from</code> 表名；比如我们现在查询前20位用户购买商品时的时间和商品的种类</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select visit_date,item_category from bigdata_user limit 20;</span><br></pre></td></tr></table></figure>

<p>执行结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">OK</span><br><span class="line">2014-12-08      4076</span><br><span class="line">2014-12-12      5503</span><br><span class="line">2014-12-12      5503</span><br><span class="line">2014-12-02      9762</span><br><span class="line">2014-12-12      5232</span><br><span class="line">2014-12-02      9762</span><br><span class="line">2014-12-12      5503</span><br><span class="line">2014-12-12      10894</span><br><span class="line">2014-12-12      6513</span><br><span class="line">2014-12-12      10894</span><br><span class="line">2014-12-12      2825</span><br><span class="line">2014-11-28      2825</span><br><span class="line">2014-12-15      3200</span><br><span class="line">2014-12-03      10576</span><br><span class="line">2014-11-20      10576</span><br><span class="line">2014-12-13      10576</span><br><span class="line">2014-12-08      10576</span><br><span class="line">2014-12-14      7079</span><br><span class="line">2014-12-02      6669</span><br><span class="line">2014-12-12      5232</span><br><span class="line">Time taken: 0.107 seconds, Fetched: 20 row(s)</span><br></pre></td></tr></table></figure>

<p>3、有时我们在表中查询可以利用嵌套语句，如果列名太复杂可以设置该列的别名，以简化我们操作的难度，以下我们可以举个例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select e.bh, e.it from (select behavior_type as bh, item_category as it from bigdata_user) as e limit 20;</span><br></pre></td></tr></table></figure>

<p>执行结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">OK</span><br><span class="line">1       4076</span><br><span class="line">1       5503</span><br><span class="line">1       5503</span><br><span class="line">1       9762</span><br><span class="line">1       5232</span><br><span class="line">4       9762</span><br><span class="line">1       5503</span><br><span class="line">1       10894</span><br><span class="line">1       6513</span><br><span class="line">1       10894</span><br><span class="line">1       2825</span><br><span class="line">1       2825</span><br><span class="line">1       3200</span><br><span class="line">1       10576</span><br><span class="line">1       10576</span><br><span class="line">1       10576</span><br><span class="line">1       10576</span><br><span class="line">1       7079</span><br><span class="line">1       6669</span><br><span class="line">1       5232</span><br><span class="line">Time taken: 0.107 seconds, Fetched: 20 row(s)</span><br></pre></td></tr></table></figure>

<p>这里简单的做个讲解，<code>behavior_type as bh</code> , <code>item_category as it</code> 就是把 <code>behavior_type</code> 设置别名 <code>bh</code> ,<code>item_category</code> 设置别名 <code>it</code>，<code>FROM</code> 的括号里的内容我们也设置了别名 <code>e</code>，这样调用时用 <code>e.bh</code>，<code>e.it</code>，可以简化代码。</p>
<h1 id="3-查询条数统计分析"><a href="#3-查询条数统计分析" class="headerlink" title="3. 查询条数统计分析"></a>3. 查询条数统计分析</h1><p>经过简单的查询后我们同样也可以在select后加入更多的条件对表进行查询,下面可以用函数来查找我们想要的内容。</p>
<p>1、用聚合函数 <code>count()</code> 计算出表内有多少条行数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 用聚合函数count()计算出表内有多少条行数据 </span><br><span class="line">select count(*) from bigdata_user;</span><br></pre></td></tr></table></figure>

<p>出现：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Ended Job = job_1711268571920_0001 with errors</span><br><span class="line">Error during job, obtaining debugging information...</span><br><span class="line">FAILED: Execution Error, return code 2 from org.apache.hadoop.hive.ql.exec.mr.MapRedTask</span><br><span class="line">MapReduce Jobs Launched: </span><br><span class="line">Stage-Stage-1:  HDFS Read: 0 HDFS Write: 0 FAIL</span><br><span class="line">Total MapReduce CPU Time Spent: 0 msec</span><br></pre></td></tr></table></figure>

<p>原因：namenode 内存空间不够，jvm 剩余空间不够新的 job 运行；</p>
<p>解决方法：将 Hive 设置成本地模式来执行任务。</p>
<p><strong>临时设置</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set hive.exec.mode.local.auto=true;</span><br></pre></td></tr></table></figure>

<p>这样设置比较麻烦，需要每次执行语句的时候输入这条命令，而且输一次命令只能执行一次语句，再次执行其他语句的时候就会提示进程被杀死。需要从新启动 Hive 。每次都要重新启动一次 Hive 然后在输一次这条语句比较麻烦。</p>
<p><strong>长远设置</strong></p>
<p>在 <code>hive-site.xml</code> 文件添加配置，设置了之后从新启动 Hive 就可以了。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.exec.mode.local.auto<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br></pre></td></tr></table></figure>

<p>设置好后重新查询：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select count(*) from bigdata_user;</span><br></pre></td></tr></table></figure>

<p>执行结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Automatically selecting local only mode for query</span><br><span class="line">Query ID = muyoukule_20240324015155_7ae1692b-c09d-4234-9d4d-3404a61fb05c</span><br><span class="line">Total jobs = 1</span><br><span class="line">Launching Job 1 out of 1</span><br><span class="line">Number of reduce tasks determined at compile time: 1</span><br><span class="line">In order to change the average load for a reducer (in bytes):</span><br><span class="line">  set hive.exec.reducers.bytes.per.reducer=&lt;number&gt;</span><br><span class="line">In order to limit the maximum number of reducers:</span><br><span class="line">  set hive.exec.reducers.max=&lt;number&gt;</span><br><span class="line">In order to set a constant number of reducers:</span><br><span class="line">  set mapreduce.job.reduces=&lt;number&gt;</span><br><span class="line">Job running in-process (local Hadoop)</span><br><span class="line">2024-03-24 01:51:57,388 Stage-1 map = 100%,  reduce = 100%</span><br><span class="line">Ended Job = job_local2145470938_0001</span><br><span class="line">MapReduce Jobs Launched: </span><br><span class="line">Stage-Stage-1:  HDFS Read: 31204930 HDFS Write: 81922062 SUCCESS</span><br><span class="line">Total MapReduce CPU Time Spent: 0 msec</span><br><span class="line">OK</span><br><span class="line">300000</span><br><span class="line">Time taken: 1.461 seconds, Fetched: 1 row(s)</span><br></pre></td></tr></table></figure>

<p>我们可以看到，得出的结果为 OK 下的那个数字 <code>300000</code>(因为我们的 <code>small_user.csv</code> 中包含了 300000 条记录，导入到 Hive 中)。</p>
<p>2、在函数内部加上 <code>distinct</code>，查出 <code>uid</code> 不重复的数据有多少条</p>
<p>下面继续执行操作：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 在函数内部加上 distinct，查出 uid 不重复的数据有多少条</span><br><span class="line">select count(distinct uid) from bigdata_user;</span><br></pre></td></tr></table></figure>

<p>执行结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Automatically selecting local only mode for query</span><br><span class="line">Query ID = muyoukule_20240324015507_77989e78-51e4-45c1-9eb1-200c0787c3ec</span><br><span class="line">Total jobs = 1</span><br><span class="line">Launching Job 1 out of 1</span><br><span class="line">Number of reduce tasks determined at compile time: 1</span><br><span class="line">In order to change the average load for a reducer (in bytes):</span><br><span class="line">  set hive.exec.reducers.bytes.per.reducer=&lt;number&gt;</span><br><span class="line">In order to limit the maximum number of reducers:</span><br><span class="line">  set hive.exec.reducers.max=&lt;number&gt;</span><br><span class="line">In order to set a constant number of reducers:</span><br><span class="line">  set mapreduce.job.reduces=&lt;number&gt;</span><br><span class="line">Job running in-process (local Hadoop)</span><br><span class="line">2024-03-24 01:55:09,012 Stage-1 map = 100%,  reduce = 100%</span><br><span class="line">Ended Job = job_local1035121157_0002</span><br><span class="line">MapReduce Jobs Launched: </span><br><span class="line">Stage-Stage-1:  HDFS Read: 62385496 HDFS Write: 81922271 SUCCESS</span><br><span class="line">Total MapReduce CPU Time Spent: 0 msec</span><br><span class="line">OK</span><br><span class="line">270</span><br><span class="line">Time taken: 1.346 seconds, Fetched: 1 row(s)</span><br></pre></td></tr></table></figure>

<p>3、查询不重复的数据有多少条(为了排除客户刷单情况) </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select count(*) from (select uid,item_id,behavior_type,item_category,visit_date,province from bigdata_user group by uid,item_id,behavior_type,item_category,visit_date,province having count(*)=1)a;</span><br></pre></td></tr></table></figure>

<p>执行结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Automatically selecting local only mode for query</span><br><span class="line">Query ID = muyoukule_20240324015553_0c5051e4-2030-4be3-b27a-f981274e056d</span><br><span class="line">Total jobs = 2</span><br><span class="line">Launching Job 1 out of 2</span><br><span class="line">Number of reduce tasks not specified. Estimated from input data size: 1</span><br><span class="line">In order to change the average load for a reducer (in bytes):</span><br><span class="line">  set hive.exec.reducers.bytes.per.reducer=&lt;number&gt;</span><br><span class="line">In order to limit the maximum number of reducers:</span><br><span class="line">  set hive.exec.reducers.max=&lt;number&gt;</span><br><span class="line">In order to set a constant number of reducers:</span><br><span class="line">  set mapreduce.job.reduces=&lt;number&gt;</span><br><span class="line">Job running in-process (local Hadoop)</span><br><span class="line">2024-03-24 01:55:55,036 Stage-1 map = 0%,  reduce = 0%</span><br><span class="line">2024-03-24 01:55:57,044 Stage-1 map = 100%,  reduce = 0%</span><br><span class="line">2024-03-24 01:55:58,049 Stage-1 map = 100%,  reduce = 100%</span><br><span class="line">Ended Job = job_local1915786213_0003</span><br><span class="line">Launching Job 2 out of 2</span><br><span class="line">Number of reduce tasks determined at compile time: 1</span><br><span class="line">In order to change the average load for a reducer (in bytes):</span><br><span class="line">  set hive.exec.reducers.bytes.per.reducer=&lt;number&gt;</span><br><span class="line">In order to limit the maximum number of reducers:</span><br><span class="line">  set hive.exec.reducers.max=&lt;number&gt;</span><br><span class="line">In order to set a constant number of reducers:</span><br><span class="line">  set mapreduce.job.reduces=&lt;number&gt;</span><br><span class="line">Selecting local mode for task: Stage-2</span><br><span class="line">Job running in-process (local Hadoop)</span><br><span class="line">2024-03-24 01:56:00,021 Stage-2 map = 100%,  reduce = 100%</span><br><span class="line">Ended Job = job_local1303362696_0004</span><br><span class="line">MapReduce Jobs Launched: </span><br><span class="line">Stage-Stage-1:  HDFS Read: 93566056 HDFS Write: 81927009 SUCCESS</span><br><span class="line">Stage-Stage-2:  HDFS Read: 93584837 HDFS Write: 81944726 SUCCESS</span><br><span class="line">Total MapReduce CPU Time Spent: 0 msec</span><br><span class="line">OK</span><br><span class="line">284047</span><br><span class="line">Time taken: 6.41 seconds, Fetched: 1 row(s)</span><br></pre></td></tr></table></figure>

<p>可以看出，排除掉重复信息以后，只有 284047 条记录。</p>
<p><strong>PS：嵌套语句最好取别名，就是上面的 a，否则很容易出现如下错误。</strong></p>
<h1 id="4-关键字条件查询分析"><a href="#4-关键字条件查询分析" class="headerlink" title="4. 关键字条件查询分析"></a>4. 关键字条件查询分析</h1><p>1、以关键字的存在区间为条件的查询</p>
<p>使用 <code>where</code> 可以缩小查询分析的范围和精确度，下面用实例来测试一下。</p>
<p>(1) 查询 2014年12月10日 到 2014年12月13日 有多少人浏览了商品</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select count(*) from bigdata_user where behavior_type=&#x27;1&#x27; and visit_date&lt;&#x27;2014-12-13&#x27; and visit_date&gt;&#x27;2014-12-10&#x27;;</span><br></pre></td></tr></table></figure>

<p>执行结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Automatically selecting local only mode for query</span><br><span class="line">Query ID = muyoukule_20240324015825_ec7ac2f7-57a2-48cb-bda7-729a69bf164c</span><br><span class="line">Total jobs = 1</span><br><span class="line">Launching Job 1 out of 1</span><br><span class="line">Number of reduce tasks determined at compile time: 1</span><br><span class="line">In order to change the average load for a reducer (in bytes):</span><br><span class="line">  set hive.exec.reducers.bytes.per.reducer=&lt;number&gt;</span><br><span class="line">In order to limit the maximum number of reducers:</span><br><span class="line">  set hive.exec.reducers.max=&lt;number&gt;</span><br><span class="line">In order to set a constant number of reducers:</span><br><span class="line">  set mapreduce.job.reduces=&lt;number&gt;</span><br><span class="line">Job running in-process (local Hadoop)</span><br><span class="line">2024-03-24 01:58:27,122 Stage-1 map = 100%,  reduce = 100%</span><br><span class="line">Ended Job = job_local803845934_0007</span><br><span class="line">MapReduce Jobs Launched: </span><br><span class="line">Stage-Stage-1:  HDFS Read: 155963028 HDFS Write: 81958359 SUCCESS</span><br><span class="line">Total MapReduce CPU Time Spent: 0 msec</span><br><span class="line">OK</span><br><span class="line">26329</span><br><span class="line">Time taken: 1.395 seconds, Fetched: 1 row(s)</span><br></pre></td></tr></table></figure>

<p>(2) 以月的第n天为统计单位，依次显示第n天网站卖出去的商品的个数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select count(distinct uid), day(visit_date) from bigdata_user where behavior_type=&#x27;4&#x27; group by day(visit_date);</span><br></pre></td></tr></table></figure>

<p>执行结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Automatically selecting local only mode for query</span><br><span class="line">Query ID = muyoukule_20240324015901_e5a2dc9f-ba6e-4c3b-918e-47ad98ff9bb7</span><br><span class="line">Total jobs = 1</span><br><span class="line">Launching Job 1 out of 1</span><br><span class="line">Number of reduce tasks not specified. Estimated from input data size: 1</span><br><span class="line">In order to change the average load for a reducer (in bytes):</span><br><span class="line">  set hive.exec.reducers.bytes.per.reducer=&lt;number&gt;</span><br><span class="line">In order to limit the maximum number of reducers:</span><br><span class="line">  set hive.exec.reducers.max=&lt;number&gt;</span><br><span class="line">In order to set a constant number of reducers:</span><br><span class="line">  set mapreduce.job.reduces=&lt;number&gt;</span><br><span class="line">Job running in-process (local Hadoop)</span><br><span class="line">2024-03-24 01:59:02,325 Stage-1 map = 100%,  reduce = 100%</span><br><span class="line">Ended Job = job_local1221129954_0008</span><br><span class="line">MapReduce Jobs Launched: </span><br><span class="line">Stage-Stage-1:  HDFS Read: 187143592 HDFS Write: 81959082 SUCCESS</span><br><span class="line">Total MapReduce CPU Time Spent: 0 msec</span><br><span class="line">OK</span><br><span class="line">37      1</span><br><span class="line">48      2</span><br><span class="line">42      3</span><br><span class="line">38      4</span><br><span class="line">42      5</span><br><span class="line">33      6</span><br><span class="line">42      7</span><br><span class="line">36      8</span><br><span class="line">34      9</span><br><span class="line">40      10</span><br><span class="line">43      11</span><br><span class="line">98      12</span><br><span class="line">39      13</span><br><span class="line">43      14</span><br><span class="line">42      15</span><br><span class="line">44      16</span><br><span class="line">42      17</span><br><span class="line">66      18</span><br><span class="line">38      19</span><br><span class="line">50      20</span><br><span class="line">33      21</span><br><span class="line">34      22</span><br><span class="line">32      23</span><br><span class="line">47      24</span><br><span class="line">34      25</span><br><span class="line">31      26</span><br><span class="line">30      27</span><br><span class="line">34      28</span><br><span class="line">39      29</span><br><span class="line">38      30</span><br><span class="line">Time taken: 1.31 seconds, Fetched: 30 row(s)</span><br></pre></td></tr></table></figure>

<p>2、关键字赋予给定值为条件，对其他数据进行分析</p>
<p>取给定时间和给定地点，求当天发出到该地点的货物的数量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select count(*) from bigdata_user where province=&#x27;江西&#x27; and visit_date=&#x27;2014-12-12&#x27; and behavior_type=&#x27;4&#x27;;</span><br></pre></td></tr></table></figure>

<p>执行结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Automatically selecting local only mode for query</span><br><span class="line">Query ID = muyoukule_20240324015952_f881672f-70ca-4303-b128-dd3f8c552945</span><br><span class="line">Total jobs = 1</span><br><span class="line">Launching Job 1 out of 1</span><br><span class="line">Number of reduce tasks determined at compile time: 1</span><br><span class="line">In order to change the average load for a reducer (in bytes):</span><br><span class="line">  set hive.exec.reducers.bytes.per.reducer=&lt;number&gt;</span><br><span class="line">In order to limit the maximum number of reducers:</span><br><span class="line">  set hive.exec.reducers.max=&lt;number&gt;</span><br><span class="line">In order to set a constant number of reducers:</span><br><span class="line">  set mapreduce.job.reduces=&lt;number&gt;</span><br><span class="line">Job running in-process (local Hadoop)</span><br><span class="line">2024-03-24 01:59:53,388 Stage-1 map = 100%,  reduce = 100%</span><br><span class="line">Ended Job = job_local479466284_0009</span><br><span class="line">MapReduce Jobs Launched: </span><br><span class="line">Stage-Stage-1:  HDFS Read: 218325182 HDFS Write: 81959801 SUCCESS</span><br><span class="line">Total MapReduce CPU Time Spent: 0 msec</span><br><span class="line">OK</span><br><span class="line">8</span><br><span class="line">Time taken: 1.264 seconds, Fetched: 1 row(s)</span><br></pre></td></tr></table></figure>

<h1 id="5-根据用户行为分析"><a href="#5-根据用户行为分析" class="headerlink" title="5. 根据用户行为分析"></a>5. 根据用户行为分析</h1><p>从现在开始，我们只给出查询语句，将不再给出执行结果。</p>
<p>1、查询一件商品在某天的购买比例或浏览比例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查询有多少用户在 2014-12-11 购买了商品</span><br><span class="line">select count(*) from bigdata_user where visit_date=&#x27;2014-12-11&#x27;and behavior_type=&#x27;4&#x27;;</span><br></pre></td></tr></table></figure>

<p>执行结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Automatically selecting local only mode for query</span><br><span class="line">Query ID = muyoukule_20240324020118_47a9bc8d-2397-42c8-a4ec-8d4ffc46674c</span><br><span class="line">Total jobs = 1</span><br><span class="line">Launching Job 1 out of 1</span><br><span class="line">Number of reduce tasks determined at compile time: 1</span><br><span class="line">In order to change the average load for a reducer (in bytes):</span><br><span class="line">  set hive.exec.reducers.bytes.per.reducer=&lt;number&gt;</span><br><span class="line">In order to limit the maximum number of reducers:</span><br><span class="line">  set hive.exec.reducers.max=&lt;number&gt;</span><br><span class="line">In order to set a constant number of reducers:</span><br><span class="line">  set mapreduce.job.reduces=&lt;number&gt;</span><br><span class="line">Job running in-process (local Hadoop)</span><br><span class="line">2024-03-24 02:01:20,097 Stage-1 map = 100%,  reduce = 0%</span><br><span class="line">2024-03-24 02:01:21,099 Stage-1 map = 100%,  reduce = 100%</span><br><span class="line">Ended Job = job_local1882990576_0010</span><br><span class="line">MapReduce Jobs Launched: </span><br><span class="line">Stage-Stage-1:  HDFS Read: 249505738 HDFS Write: 81960004 SUCCESS</span><br><span class="line">Total MapReduce CPU Time Spent: 0 msec</span><br><span class="line">OK</span><br><span class="line">69</span><br><span class="line">Time taken: 2.335 seconds, Fetched: 1 row(s)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查询有多少用户在 2014-12-11 点击了该店</span><br><span class="line">select count(*) from bigdata_user where visit_date =&#x27;2014-12-11&#x27;;</span><br></pre></td></tr></table></figure>

<p>执行结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Automatically selecting local only mode for query</span><br><span class="line">Query ID = muyoukule_20240324020155_4f1a4baf-b338-4ab9-8d05-a0064474caa7</span><br><span class="line">Total jobs = 1</span><br><span class="line">Launching Job 1 out of 1</span><br><span class="line">Number of reduce tasks determined at compile time: 1</span><br><span class="line">In order to change the average load for a reducer (in bytes):</span><br><span class="line">  set hive.exec.reducers.bytes.per.reducer=&lt;number&gt;</span><br><span class="line">In order to limit the maximum number of reducers:</span><br><span class="line">  set hive.exec.reducers.max=&lt;number&gt;</span><br><span class="line">In order to set a constant number of reducers:</span><br><span class="line">  set mapreduce.job.reduces=&lt;number&gt;</span><br><span class="line">Job running in-process (local Hadoop)</span><br><span class="line">2024-03-24 02:01:56,329 Stage-1 map = 100%,  reduce = 100%</span><br><span class="line">Ended Job = job_local1753478999_0011</span><br><span class="line">MapReduce Jobs Launched: </span><br><span class="line">Stage-Stage-1:  HDFS Read: 280686296 HDFS Write: 81960211 SUCCESS</span><br><span class="line">Total MapReduce CPU Time Spent: 0 msec</span><br><span class="line">OK</span><br><span class="line">10649</span><br><span class="line">Time taken: 1.313 seconds, Fetched: 1 row(s)</span><br></pre></td></tr></table></figure>

<p>根据上面语句得到购买数量和点击数量，两个数相除即可得出当天该商品的购买率。</p>
<p>2、查询某个用户在某一天点击网站占该天所有点击行为的比例(点击行为包括浏览，加入购物车，收藏，购买)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查询用户 10001082 在 2014-12-12 点击网站的次数</span><br><span class="line">select count(*) from bigdata_user where uid=10001082 and visit_date=&#x27;2014-12-12&#x27;;</span><br></pre></td></tr></table></figure>

<p>执行结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Automatically selecting local only mode for query</span><br><span class="line">Query ID = muyoukule_20240324020405_c0631a79-6d8d-4029-812c-6592d727a478</span><br><span class="line">Total jobs = 1</span><br><span class="line">Launching Job 1 out of 1</span><br><span class="line">Number of reduce tasks determined at compile time: 1</span><br><span class="line">In order to change the average load for a reducer (in bytes):</span><br><span class="line">  set hive.exec.reducers.bytes.per.reducer=&lt;number&gt;</span><br><span class="line">In order to limit the maximum number of reducers:</span><br><span class="line">  set hive.exec.reducers.max=&lt;number&gt;</span><br><span class="line">In order to set a constant number of reducers:</span><br><span class="line">  set mapreduce.job.reduces=&lt;number&gt;</span><br><span class="line">Job running in-process (local Hadoop)</span><br><span class="line">2024-03-24 02:04:06,828 Stage-1 map = 100%,  reduce = 100%</span><br><span class="line">Ended Job = job_local877196646_0012</span><br><span class="line">MapReduce Jobs Launched: </span><br><span class="line">Stage-Stage-1:  HDFS Read: 311866860 HDFS Write: 81960418 SUCCESS</span><br><span class="line">Total MapReduce CPU Time Spent: 0 msec</span><br><span class="line">OK</span><br><span class="line">69</span><br><span class="line">Time taken: 1.307 seconds, Fetched: 1 row(s)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查询所有用户在这一天点击该网站的次数</span><br><span class="line">select count(*) from bigdata_user where visit_date=&#x27;2014-12-12&#x27;;</span><br></pre></td></tr></table></figure>

<p>执行结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Automatically selecting local only mode for query</span><br><span class="line">Query ID = muyoukule_20240324020425_b2082f31-ead2-4901-bd90-e24610fc4891</span><br><span class="line">Total jobs = 1</span><br><span class="line">Launching Job 1 out of 1</span><br><span class="line">Number of reduce tasks determined at compile time: 1</span><br><span class="line">In order to change the average load for a reducer (in bytes):</span><br><span class="line">  set hive.exec.reducers.bytes.per.reducer=&lt;number&gt;</span><br><span class="line">In order to limit the maximum number of reducers:</span><br><span class="line">  set hive.exec.reducers.max=&lt;number&gt;</span><br><span class="line">In order to set a constant number of reducers:</span><br><span class="line">  set mapreduce.job.reduces=&lt;number&gt;</span><br><span class="line">Job running in-process (local Hadoop)</span><br><span class="line">2024-03-24 02:04:26,393 Stage-1 map = 100%,  reduce = 100%</span><br><span class="line">Ended Job = job_local783450845_0013</span><br><span class="line">MapReduce Jobs Launched: </span><br><span class="line">Stage-Stage-1:  HDFS Read: 343047418 HDFS Write: 81960625 SUCCESS</span><br><span class="line">Total MapReduce CPU Time Spent: 0 msec</span><br><span class="line">OK</span><br><span class="line">17494</span><br><span class="line">Time taken: 1.332 seconds, Fetched: 1 row(s)</span><br></pre></td></tr></table></figure>

<p>上面两条语句的结果相除，就得到了要要求的比例。</p>
<p>3、给定购买商品的数量范围，查询某一天在该网站的购买该数量商品的用户id</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查询某一天在该网站购买商品超过 5 次的用户 id</span><br><span class="line">select uid from bigdata_user where behavior_type=&#x27;4&#x27; and visit_date=&#x27;2014-12-12&#x27; group by uid having count(behavior_type=&#x27;4&#x27;)&gt;5;</span><br></pre></td></tr></table></figure>

<p>执行结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Automatically selecting local only mode for query</span><br><span class="line">Query ID = muyoukule_20240324020454_4841d58d-313e-4319-87b3-01d8836606ca</span><br><span class="line">Total jobs = 1</span><br><span class="line">Launching Job 1 out of 1</span><br><span class="line">Number of reduce tasks not specified. Estimated from input data size: 1</span><br><span class="line">In order to change the average load for a reducer (in bytes):</span><br><span class="line">  set hive.exec.reducers.bytes.per.reducer=&lt;number&gt;</span><br><span class="line">In order to limit the maximum number of reducers:</span><br><span class="line">  set hive.exec.reducers.max=&lt;number&gt;</span><br><span class="line">In order to set a constant number of reducers:</span><br><span class="line">  set mapreduce.job.reduces=&lt;number&gt;</span><br><span class="line">Job running in-process (local Hadoop)</span><br><span class="line">2024-03-24 02:04:55,645 Stage-1 map = 100%,  reduce = 100%</span><br><span class="line">Ended Job = job_local1954605595_0014</span><br><span class="line">MapReduce Jobs Launched: </span><br><span class="line">Stage-Stage-1:  HDFS Read: 374227982 HDFS Write: 81961208 SUCCESS</span><br><span class="line">Total MapReduce CPU Time Spent: 0 msec</span><br><span class="line">OK</span><br><span class="line">100226515</span><br><span class="line">100300684</span><br><span class="line">100555417</span><br><span class="line">100605</span><br><span class="line">10095384</span><br><span class="line">10142625</span><br><span class="line">101490976</span><br><span class="line">101982646</span><br><span class="line">102011320</span><br><span class="line">102030700</span><br><span class="line">102079825</span><br><span class="line">102349447</span><br><span class="line">102612580</span><br><span class="line">102650143</span><br><span class="line">103082347</span><br><span class="line">103139791</span><br><span class="line">103794013</span><br><span class="line">103995979</span><br><span class="line">Time taken: 1.298 seconds, Fetched: 18 row(s)</span><br></pre></td></tr></table></figure>

<h1 id="6-用户实时查询分析"><a href="#6-用户实时查询分析" class="headerlink" title="6. 用户实时查询分析"></a>6. 用户实时查询分析</h1><p>某个地区的用户当天浏览网站的次数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 创建新的数据表进行存储</span><br><span class="line">create table scan(province STRING,scan INT) COMMENT &#x27;This is the search of bigdataday&#x27; ROW FORMAT DELIMITED FIELDS TERMINATED BY &#x27;\t&#x27; STORED AS TEXTFILE;</span><br><span class="line"></span><br><span class="line"># 导入数据</span><br><span class="line">insert overwrite table scan select province,count(behavior_type) from bigdata_user where behavior_type=&#x27;1&#x27; group by province;</span><br><span class="line"></span><br><span class="line"># 显示结果</span><br><span class="line">select * from scan;</span><br></pre></td></tr></table></figure>

<p>执行结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">OK</span><br><span class="line">上海市  8372</span><br><span class="line">云南    8220</span><br><span class="line">内蒙古  8195</span><br><span class="line">北京市  8348</span><br><span class="line">台湾    8327</span><br><span class="line">吉林    8242</span><br><span class="line">四川    8234</span><br><span class="line">天津市  8454</span><br><span class="line">宁夏    8429</span><br><span class="line">安徽    8340</span><br><span class="line">山东    8449</span><br><span class="line">山西    8347</span><br><span class="line">广东    8305</span><br><span class="line">广西    8378</span><br><span class="line">新疆    8446</span><br><span class="line">江苏    8400</span><br><span class="line">江西    8395</span><br><span class="line">河北    8437</span><br><span class="line">河南    8277</span><br><span class="line">浙江    8319</span><br><span class="line">海南    8389</span><br><span class="line">湖北    8399</span><br><span class="line">湖南    8173</span><br><span class="line">澳门    8360</span><br><span class="line">甘肃    8283</span><br><span class="line">福建    8459</span><br><span class="line">西藏    8424</span><br><span class="line">贵州    8282</span><br><span class="line">辽宁    8333</span><br><span class="line">重庆市  8256</span><br><span class="line">陕西    8379</span><br><span class="line">青海    8266</span><br><span class="line">香港    8242</span><br><span class="line">黑龙江  8357</span><br><span class="line">Time taken: 0.07 seconds, Fetched: 34 row(s)</span><br></pre></td></tr></table></figure>

<p>到这里，Hive 数据分析实验顺利结束。</p>
]]></content>
      <categories>
        <category>BigData</category>
      </categories>
      <tags>
        <tag>Hadoop</tag>
        <tag>Hive</tag>
      </tags>
  </entry>
  <entry>
    <title>Git教程</title>
    <url>/posts/Git/</url>
    <content><![CDATA[<p>Git官网：<a href="https://git-scm.com/">https://git-scm.com/</a></p>
<p>学习视频：<a href="https://www.bilibili.com/video/BV1MU4y1Y7h5/">黑马程序员Git全套教程，完整的Git项目管理工具教程，一套精通Git</a></p>
<h1 id="1-版本控制"><a href="#1-版本控制" class="headerlink" title="1. 版本控制"></a>1. 版本控制</h1><blockquote>
<p>版本管理概念</p>
</blockquote>
<p>版本控制是指对软件开发过程中各种程序代码、<a href="https://baike.baidu.com/item/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/286550?fromModule=lemma_inlink">配置文件</a>及说明文档等文件变更的管理，是<a href="https://baike.baidu.com/item/%E8%BD%AF%E4%BB%B6%E9%85%8D%E7%BD%AE%E7%AE%A1%E7%90%86/3765602?fromModule=lemma_inlink">软件配置管理</a>的核心思想之一。</p>
<blockquote>
<p>版本管理工具概念</p>
</blockquote>
<p>版本管理工具，也被称为版本控制工具，是一个用于记录文件内容变化，以便将来查阅特定版本修订情况的系统。它主要用于管理软件开发中的源代码、配置文件和文档等文件的变更。</p>
<p>具体来说，版本管理工具具备以下核心功能：</p>
<ul>
<li><strong>备份文件</strong>：每一次的文件变更都会被保存下来，形成一个新的版本，这样即使出现错误或需要回溯，也可以轻松地恢复到之前的版本。</li>
<li><strong>记录历史</strong>：工具会详细记录每次变更的内容、时间以及执行变更的人员等信息，为团队提供完整的版本历史记录。</li>
<li><strong>回到过去</strong>：通过版本管理工具，用户可以轻松地恢复到过去的任何一个版本，这对于错误排查、功能回滚等场景非常有用。</li>
<li><strong>多端共享</strong>：版本管理工具支持在多个设备或平台上访问和更新代码库，使得团队成员可以在不同的工作环境中无缝协作。</li>
<li><strong>团队协作</strong>：它支持多人同时处理同一份文件，通过合并和冲突解决机制，确保团队成员之间的协作更加高效和准确。</li>
</ul>
<blockquote>
<p>版本管理工具</p>
</blockquote>
<p>主流的版本控制软件有：</p>
<ul>
<li><p>Git</p>
</li>
<li><p>SVN(Subversion)</p>
</li>
<li><p>CVS(Concurrent Versions System)</p>
</li>
<li><p>VSS(Micorosoft Visual SourceSafe)</p>
</li>
<li><p>TFS(Team Foundation Server)</p>
</li>
<li><p>Visual Studio Online</p>
</li>
</ul>
<p>使用最广泛的是 Git 与 SVN。</p>
<blockquote>
<p>版本管理发展简史(维基百科)</p>
</blockquote>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/ToolsIMG/Git/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E8%BD%AF%E4%BB%B6.png"></p>
<p><strong>1、SVN(SubVersion)</strong></p>
<p>SVN 是集中式版本控制系统，版本库是集中放在中央服务器的。</p>
<p>工作流程如下:</p>
<ol>
<li>从中央服务器远程仓库下载代码</li>
<li>修改后将代码提交到中央服务器远程仓库</li>
</ol>
<p> 优点：简单，易操作。</p>
<p> 缺点：所有代码必须放在中央服务器。</p>
<ul>
<li>服务器一旦宕机无法提交代码,即容错性较差。</li>
<li>离线无法提交代码,无法及时记录我们的提交行为。</li>
</ul>
<p>SVN 流程图</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/ToolsIMG/Git/SVN.jpg"></p>
<p><strong>2、Git</strong></p>
<p>Git 是分布式版本控制系统(Distributed Version Control System，简称 DVCS)，分为两种类型的仓库：<code>本地仓库</code> 和 <code>远程仓库</code></p>
<p>工作流程如下：</p>
<ol>
<li>从远程仓库中克隆或拉取代码到本地仓库 (clone&#x2F;pull) 。</li>
<li>从本地进行代码修改。</li>
<li>在提交前先将代码提交到暂存区。</li>
<li>提交到本地仓库。本地仓库中保存修改的各个历史版本。</li>
<li>修改完成后，需要和团队成员共享代码时，将代码 push 到远程仓库。</li>
</ol>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/ToolsIMG/Git/Git.png"></p>
<p><strong>总结：Git 和 SVN 的区别</strong></p>
<ol>
<li>SVN 是集中式版本控制工具，Git 是分布式版本控制工具</li>
<li>SVN 不支持离线提交，Git 支持离线提交代码</li>
</ol>
<h1 id="2-Git-发展简史"><a href="#2-Git-发展简史" class="headerlink" title="2. Git 发展简史"></a>2. Git 发展简史</h1><p>Git 起源于2005年，由 Linux 内核的缔造者 <a href="https://baike.baidu.com/item/%E6%9E%97%E7%BA%B3%E6%96%AF%C2%B7%E6%9C%AC%E7%BA%B3%E7%AC%AC%E5%85%8B%E7%89%B9%C2%B7%E6%89%98%E7%93%A6%E5%85%B9/1034429?fr=ge_ala">Linus Benedict Torvalds</a> 创建。在之前，Linux 内核的维护主要依赖于补丁和存档文件，但随着参与者的增多，这种方式变得低效。尽管当时存在其他版本控制工具，但它们要么是收费的，要么是采用集中式管理方式，无法满足 Linux 内核社区的需求。</p>
<p>2002年，Linux 内核项目开始使用 BitKeeper 这一专有分布式版本控制系统，但2005年，由于商业合作关系的破裂，Linux 内核社区失去了免费使用 BitKeeper 的权力。</p>
<p>这一事件促使 Linus Benedict Torvalds和Linux 开源社区开始开发自己的版本控制系统。他们基于使用 BitKeeper 时的经验，设定了新系统的目标：高速、简单设计、支持非线性开发(允许成千上万个并行分支)、完全分布式，并能有效管理大型项目。</p>
<p>经过两周的开发，Linus Torvalds 用 C 语言写出了 Git 这一分布式版本控制系统。Git自诞生以来，不断发展和完善，成为高度易用且功能强大的版本控制工具，广泛应用于各类软件开发项目中。</p>
<p>Git 的成功不仅在于其技术上的优越性，更在于它符合开源文化和协作精神，为全球开发者提供了一个共同学习和进步的平台，推动了整个软件开发行业的进步。</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/ToolsIMG/Git/%E6%9D%8E%E7%BA%B3%E6%96%AF%E3%83%BB%E6%89%98%E6%B2%83%E5%85%B9.jpg"></p>
<center>Linux 和 Git 之父 林纳斯·本纳第克特·托瓦兹(Linus Benedict Torvalds)</center>

<h1 id="3-Git-快速入门"><a href="#3-Git-快速入门" class="headerlink" title="3. Git 快速入门"></a>3. Git 快速入门</h1><h2 id="3-1-Git概述"><a href="#3-1-Git概述" class="headerlink" title="3.1 Git概述"></a>3.1 Git概述</h2><p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/ToolsIMG/Git/Git%E6%A6%82%E8%BF%B0.png"></p>
<p>Git 是一个免费的，开源的分布式版本控制系统，可以快速高效地处理从小型或大型的各种项目。Git 易于学习，占用空间小，性能快得惊人。</p>
<h2 id="3-2-Git下载与安装"><a href="#3-2-Git下载与安装" class="headerlink" title="3.2 Git下载与安装"></a>3.2 Git下载与安装</h2><blockquote>
<p>Git 下载</p>
</blockquote>
<p>一、<a href="https://git-scm.com/downloads">Git 下载官网</a></p>
<p>进入官网后根据自己操作系统的情况下载并进行安装：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/ToolsIMG/Git/Git%E5%AE%98%E7%BD%91%E4%B8%8B%E8%BD%BD.png"></p>
<p>二、 如果官网下载太慢，可以使用淘宝镜像下载：<a href="https://registry.npmmirror.com/binary.html?path=git-for-windows/">Git 镜像下载</a></p>
<p>进入镜像后，拖至最下方，进入稳定版的下载，然后根据自己操作系统的情况下载并进行安装。</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/ToolsIMG/Git/Git%E9%95%9C%E5%83%8F%E4%B8%8B%E8%BD%BD.png"></p>
<center>上方不带 rc 的才是稳定版</center>

<p>最早 Git 是在 Linux 上开发的，很长一段时间内，Git 也只能在 Linux 和 Unix 系统上跑。不过，慢慢地有人把它移植到了 Windows 上。现在，Git 可以在 Linux、Unix、Mac 和 Windows 这几大平台上正常运行了。由于开发机大多数情况都是 Windows，所以本教程选择相对简单的 Windows 系统软件版本进行下载，此处我们下载 Windows 系统的 2.44.0 版本软件。</p>
<blockquote>
<p>Git 安装</p>
</blockquote>
<p>安装时使用 <font color="red">“傻瓜式”</font> 安装，无脑下一步即可。<font color="red">PS：注意按自己需求修改安装路径！</font>😏</p>
<p>安装时还可以修改默认编辑器，默认是 Vim 编辑器。比如将默认编辑器修改为 NotePad3，找到 NotePad3 的 exe 文件并选择即可。</p>
<p>如果在安装完成后想要修改默认编辑器，可以使用命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将默认编辑器修改为 vim</span></span><br><span class="line">git config --global core.editor vim</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改为 NotePad3(安装路径自行修改)</span></span><br><span class="line">git config --global core.editor &quot;D:\\Notepad3\\Notepad3.exe&quot;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Git 启动测试</p>
</blockquote>
<p>安装成功后在开始菜单中会有如下信息：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/ToolsIMG/Git/%E5%BC%80%E5%A7%8B%E8%8F%9C%E5%8D%95Git.png"></p>
<ul>
<li><p>Git Bash： Unix 与 Linux 风格的命令行(使用最多，推荐使用)</p>
</li>
<li><p>Git CMD： Windows 风格的命令行</p>
</li>
<li><p>Git GUI： 图形界面的 Git，不建议初学者使用，尽量先熟悉常用命令</p>
</li>
</ul>
<p>可以在某一目录中点击右键，点击 “Git Bash Here” 就可以再当前目录下打开 Git Bash。</p>
<p>在Windows桌面空白处，点击鼠标右键，弹出右键菜单：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/ToolsIMG/Git/%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95Git.png"></p>
<p>Git软件安装后，会在右键菜单中增加两个菜单</p>
<ul>
<li>Open Git GUI Here</li>
<li>Open Git Bash Here</li>
</ul>
<p>此处仅仅是为了验证 Git 软件安装的效果，所以选择 <code>Git Bash Here</code> 菜单, 选择后，Windows 系统弹出 Git 软件的命令行黑窗口：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/ToolsIMG/Git/Git%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C%E9%BB%91%E7%AA%97%E5%8F%A3.png"></p>
<p>窗口弹出后，可以输入 Git 软件的操作指令。此时我们使用键盘输入操作指令：<code>git -v</code> 或 <code>git --version</code>，查看当前 Git 软件的安装版本。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git -v</span><br><span class="line">git --version</span><br></pre></td></tr></table></figure>

<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/ToolsIMG/Git/Git%E7%9A%84%E5%AE%89%E8%A3%85%E7%89%88%E6%9C%AC.png"></p>
<p>输入指令回车后，如果黑窗口中打印出咱们安装的软件版本 2.44.0，Git 软件安装成功了。</p>
<h2 id="3-3-Git基础指令"><a href="#3-3-Git基础指令" class="headerlink" title="3.3 Git基础指令"></a>3.3 Git基础指令</h2><p>Git 软件是免费、开源的。最初 Git 软件是为辅助 Linux 内核开发的一套软件，所以在使用时，简单常用的 Linux 系统操作指令是可以直接使用的：</p>
<table>
<thead>
<tr>
<th align="center"><strong>指令</strong></th>
<th align="center"><strong>含义</strong></th>
<th align="center"><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center">cd 目录</td>
<td align="center">change directory</td>
<td align="center">改变操作目录</td>
</tr>
<tr>
<td align="center">cd ..</td>
<td align="center"></td>
<td align="center">退回到上一级目录</td>
</tr>
<tr>
<td align="center">pwd</td>
<td align="center">Print work  directory</td>
<td align="center">打印工作目录</td>
</tr>
<tr>
<td align="center">ls</td>
<td align="center">list directory  contents</td>
<td align="center">显示当前目录的文件及子文件目录</td>
</tr>
<tr>
<td align="center">ll</td>
<td align="center">ls -l 简化版本</td>
<td align="center">更详细地显示当前目录的文件及子文件目录</td>
</tr>
<tr>
<td align="center">mkdir 文件夹名称</td>
<td align="center">make directory</td>
<td align="center">新建一个文件夹</td>
</tr>
<tr>
<td align="center">rm 文件</td>
<td align="center">remove</td>
<td align="center">删除文件</td>
</tr>
<tr>
<td align="center">rm -r 文件夹</td>
<td align="center">Remove</td>
<td align="center">删除文件目录</td>
</tr>
<tr>
<td align="center">touch 文件</td>
<td align="center"></td>
<td align="center">如果创建的文件不存在，那么创建一个空文件</td>
</tr>
<tr>
<td align="center">reset</td>
<td align="center"></td>
<td align="center">清屏</td>
</tr>
<tr>
<td align="center">clear</td>
<td align="center"></td>
<td align="center">清屏</td>
</tr>
<tr>
<td align="center">exit</td>
<td align="center"></td>
<td align="center">退出终端窗口</td>
</tr>
</tbody></table>
<h2 id="3-4-Git配置"><a href="#3-4-Git配置" class="headerlink" title="3.4 Git配置"></a>3.4 Git配置</h2><blockquote>
<p>配置信息</p>
</blockquote>
<p>Git 安装目录下的 <code>gitconfig --system</code> 系统级配置文件：<code>Git 安装目录 \etc\gitconfig</code></p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/ToolsIMG/Git/Git%E7%B3%BB%E7%BB%9F%E7%BA%A7%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.png" style="zoom:67%;">

<p>只适用于当前登录用户的配置 <code>--global</code> 全局配置文件：<code>C:\Users\ 你的用户名 \ .gitconfig</code></p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/ToolsIMG/Git/Git%E5%BD%93%E5%89%8D%E7%99%BB%E5%BD%95%E7%94%A8%E6%88%B7%E7%9A%84%E5%85%A8%E5%B1%80%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.png" style="zoom:67%;">

<p>默认情况下，我们可以通过使用以下命令，查看不同级别的配置信息：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看系统 config</span></span><br><span class="line">git config --system --list</span><br><span class="line"><span class="meta prompt_">　　</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看当前用户(global)配置</span></span><br><span class="line">git config --global  --list</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>设置名称和邮箱</strong>   <font color="red"><strong>这很重要！！！</strong></font></p>
</blockquote>
<p>安装完 Git 后首先要做的事情是设置用户名和 email 地址。这 非常重要，因为每次 Git 提交都会使用该信息，它被永远的嵌入到了提交中。<font color="red"><strong>所以！！！是一定要配置的！！！</strong></font></p>
<p>否则就会出现如下提示：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/ToolsIMG/Git/Git%E6%9C%AA%E8%AE%BE%E7%BD%AE%E5%90%8D%E7%A7%B0%E5%92%8C%E9%82%AE%E7%AE%B1.png"></p>
<p>此时需要按照下面两个命令来设置用户名🏃和邮箱📧( muyoukule 是我的用户名，<a href="mailto:&#121;&#x6f;&#x75;&#114;&#95;&#101;&#x6d;&#x61;&#x69;&#108;&#64;&#x65;&#120;&#x61;&#109;&#112;&#x6c;&#x65;&#x2e;&#x63;&#111;&#x6d;">&#121;&#x6f;&#x75;&#114;&#95;&#101;&#x6d;&#x61;&#x69;&#108;&#64;&#x65;&#120;&#x61;&#109;&#112;&#x6c;&#x65;&#x2e;&#x63;&#111;&#x6d;</a> 是邮箱，你需要设置属于你自己的用户名和邮箱)。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global user.name muyoukule</span><br><span class="line">git config --global user.email your_email@example.com</span><br></pre></td></tr></table></figure>

<p>如果使用了 <code>--global</code> 选项，表示设置了全局的用户名和邮箱。如果希望在一个特定的项目中使用不同的用户名和邮箱，可以在该项目中运行该命令而不添加 –global 选项。总之 <code>--global</code> 为全局配置，不加为某个项目的特定配置。</p>
<p>设置好用户名和邮箱后，此时在操作系统的用户目录 <code>C:\Users\你的用户名</code> 下会产生新的配置文件 <code>.gitconfig</code>，可以运行 <code>git config --global --list</code>，就会显示设置的用户名和邮箱，也可以在 <code>C:\Users\你的用户名\.gitconfig</code> 文件中看到设置的信息。</p>
<p>也可以使用命令查看：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global user.name</span><br><span class="line">git config --global user.email</span><br></pre></td></tr></table></figure>

<blockquote>
<p>为常用指令配置别名(可选)</p>
</blockquote>
<p>有些常用的指令参数非常多，每次都要输入好多参数，我们可以使用别名。</p>
<p>1、打开用户目录，创建 .bashrc 文件</p>
<p>部分windows系统不允许用户创建点号开头的文件，可以打开 GitBash，执行 touch ~&#x2F;.bashrc</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">新建 .bashrc 文件</span></span><br><span class="line">touch ~/.bashrc</span><br></pre></td></tr></table></figure>

<p>执行完成后会在 <code>C:\Users\你的用户名</code> 路径下多出 .bashrc 文件</p>
<p>2、在 <code>.bashrc</code> 文件中输入如下内容：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">用于输出git提交日志</span></span><br><span class="line">alias git-log=&#x27;git log --pretty=oneline --all --graph --abbrev-commit&#x27;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">用于输出当前目录所有文件及基本信息</span></span><br><span class="line">alias ll=&#x27;ls -al&#x27;</span><br></pre></td></tr></table></figure>

<p>3、打开 GitBash，执行 source ~&#x2F;.bashrc</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启变量配置</span></span><br><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure>

<h1 id="4-Git-基本理论"><a href="#4-Git-基本理论" class="headerlink" title="4. Git 基本理论"></a>4. Git 基本理论</h1><blockquote>
<p>三大区域</p>
</blockquote>
<p>Git 本地有三个工作区域：工作目录(Working Directory)、暂存区(Stage 或 Index)、资源库(历史记录区、版本库、本地仓库、History、Repository 或 Git Directory)。如果在加上远程的 Git 仓库(Remote Directory)也可以分为四个工作区域。</p>
<p>文件在这四个区域之间的转换关系如下：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/ToolsIMG/Git/Git%E4%B8%89%E5%A4%A7%E5%8C%BA%E5%9F%9F.png"></p>
<ul>
<li>Working Directory：工作区，平时存放项目代码的地方。</li>
<li>Stage(Index)：暂存区，用于临时存放改动，事实上它只是一个文件，保存即将提交到文件列表信息。</li>
<li>History：历史记录区，安全存放数据的位置，里面有项目所有版本的数据。</li>
<li>Remote Directory：远程仓库，托管代码的服务器，可以简单的认为是项目组中用于远程数据交换的一台电脑。</li>
</ul>
<blockquote>
<p>三大区域的另一种图示</p>
</blockquote>
<p>本地的三个区域确切的说应该是 Git 仓库中 HEAD 指向的版本：</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/ToolsIMG/Git/%E5%9B%BE%E8%A7%A3%E4%B8%89%E5%A4%A7%E5%8C%BA%E5%9F%9F.png" style="zoom:67%;">

<ul>
<li><p>Directory：使用 Git 管理的一个目录，也就是一个仓库，包含我们的工作空间和 Git 的管理空间。</p>
</li>
<li><p>WorkSpace：需要通过 Git 进行版本控制的目录和文件，这些目录和文件组成了工作空间。</p>
</li>
<li><p>.git：存放 Git 管理信息的目录，初始化仓库的时候自动创建。(<strong>一个隐藏文件夹</strong>)</p>
</li>
<li><p>Index&#x2F;Stage：暂存区，或者叫待提交更新区，在提交进入 repo 之前，可以把所有的更新放在暂存区。</p>
</li>
<li><p>Local Repo：本地仓库，一个存放在本地的版本库；HEAD 会只是当前的开发分支(branch)。</p>
</li>
<li><p>Stash：隐藏，是一个工作状态保存栈，用于保存 &#x2F; 恢复 WorkSpace 中的临时状态。</p>
</li>
</ul>
<blockquote>
<p>工作流程</p>
</blockquote>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/ToolsIMG/Git/Git%E6%B5%81%E7%A8%8B.png" style="zoom:67%;">

<p><strong>本地仓库</strong>：是在开发人员自己电脑上的 Git 仓库,存放我们的代码(<strong>.git 隐藏文件夹就是我们的本地仓库</strong>)。</p>
<p><strong>远程仓库</strong>：是在远程服务器上的 Git 仓库,存放代码(可以是 github.com 或者 gitee.com 上的仓库,或者自己该公司的服务器)。</p>
<p><strong>工作区</strong>：我们自己写代码(文档)的地方。</p>
<p><strong>暂存区</strong>：在本地仓库中的一个特殊的文件 (index) 叫做暂存区,临时存储我们即将要提交的文件。</p>
<p><strong>Clone</strong>：克隆，就是将远程仓库复制到本地仓库。</p>
<p><strong>Push</strong>：推送，就是将本地仓库代码上传到远程仓库。</p>
<p><strong>Pull</strong>：拉取，就是将远程仓库代码下载到本地仓库，并将代码克隆到本地工作区。</p>
<h1 id="5-Git-本地仓库"><a href="#5-Git-本地仓库" class="headerlink" title="5. Git 本地仓库"></a>5. Git 本地仓库</h1><p>要使用 Git 对我们的代码进行版本控制，首先需要获得本地仓库。</p>
<blockquote>
<p>获得本地仓库</p>
</blockquote>
<p>创建本地仓库的方法有两种：一种是创建全新的仓库，另一种是克隆远程仓库。</p>
<p><strong>创建全新的仓库</strong></p>
<ol>
<li><p>在电脑任意位置创建一个空目录(例如在桌面新建 repository 文件夹)作为本地 Git 仓库。</p>
</li>
<li><p>进入这个目录，点击右键点击 <code>Git Bash here</code> 打开窗口</p>
</li>
<li><p>在目录执行以下命令创建全新的仓库：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在当前目录新建一个 Git 代码库</span></span><br><span class="line">git init</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行后在当前目录下新增了一个 <code>.git</code> 隐藏目录，当前项目的版本信息和配置信息都会存放在这个目录里。</p>
</li>
</ol>
<p><strong>克隆远程仓库</strong></p>
<p>可以使用以下命令将某个项目克隆(下载)到本地：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">克隆一个项目和它的整个代码历史(版本信息)</span></span><br><span class="line">git clone [url]</span><br></pre></td></tr></table></figure>

<p>在 GitHub 上选定一个项目进行测试：</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/ToolsIMG/Git/GitHub%E9%80%89%E5%AE%9A%E9%A1%B9%E7%9B%AE.png" style="zoom:67%;">

<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/ToolsIMG/Git/Git%E6%8B%89%E5%8F%96%E9%A1%B9%E7%9B%AE%E5%88%B0%E6%9C%AC%E5%9C%B0.png" style="zoom:67%;">

<h1 id="6-Git-文件操作"><a href="#6-Git-文件操作" class="headerlink" title="6. Git 文件操作"></a>6. Git 文件操作</h1><p>Git 工作目录下对于文件的修改(增加、删除、更新)会存在几个状态，这些修改的状态会随着我们执行 Git 的命令而发生变化。</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/ToolsIMG/Git/Git%E6%96%87%E4%BB%B6%E7%8A%B6%E6%80%81.png"></p>
<blockquote>
<p>查看修改的状态(status)</p>
</blockquote>
<p>作用：查看的修改的状态(暂存区、工作区) </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看指定文件状态</span></span><br><span class="line">git status [filename]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看所有文件状态</span></span><br><span class="line">git status</span><br></pre></td></tr></table></figure>

<blockquote>
<p>添加工作区到暂存区(add)</p>
</blockquote>
<p>作用：添加工作区一个或多个文件的修改到暂存区</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加所有文件到暂存区</span></span><br><span class="line">git add .     </span><br></pre></td></tr></table></figure>

<blockquote>
<p>提交暂存区到本地仓库(commit)</p>
</blockquote>
<p>作用：提交暂存区内容到本地仓库的当前分支</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">提交暂存区中的内容到本地仓库 -m 提交信息</span></span><br><span class="line">git commit -m &quot;消息内容&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将跟踪的文件直接添加到本地仓库(如果有新增文件，还是得先执行 git add .)</span></span><br><span class="line">git commit -am &quot;消息内容&quot;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>查看提交日志(log)</p>
</blockquote>
<p>作用：查看提交记录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git log [option]</span><br></pre></td></tr></table></figure>

<p>options</p>
<ul>
<li><p>空：查看当前分支版本信息</p>
</li>
<li><p>–all：显示所有分支</p>
</li>
<li><p>–pretty&#x3D;oneline：将提交信息显示为一行</p>
</li>
<li><p>–abbrev-commit：使得输出的commited更简短</p>
</li>
<li><p>–graph：以图的形式显示</p>
</li>
</ul>
<blockquote>
<p>版本回退</p>
</blockquote>
<p>作用：版本切换</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git reset --hard commitID	# commitID 可以使 git log 指令查看</span><br></pre></td></tr></table></figure>

<blockquote>
<p>查看已经删除的记录</p>
</blockquote>
<p><code>git reflog</code> 可以查看所有分支的所有操作记录(包括已经被删除的 commit 记录和 reset 的操作)。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git reflog</span><br></pre></td></tr></table></figure>

<p>提交记录过多时，按下 q 可结束浏览。</p>
<blockquote>
<p>添加文件至忽略列表</p>
</blockquote>
<p>有时不想把某些文件纳入版本控制中，比如数据库文件，临时文件，设计文件等，要求忽略这些文件的修改。</p>
<p>在根目录下建立 <code>.gitignore</code> 文件，将需要被忽略的文件名添加到此文件中。</p>
<p><code>.gitignore</code> 文件内容解析：</p>
<ul>
<li><p>以井号 <code>#</code> 开始的行表示注释；</p>
</li>
<li><p>可以使用 Linux 通配符。例如：星号 <code>*</code> 代表任意多个字符，问号 <code>?</code> 代表一个字符，方括号 <code>[]</code> 代表可选字符范围，大括号 <code>&#123;&#125;</code> 代表可选的字符串等；</p>
</li>
<li><p>如果名称的最前面有一个感叹号 <code>!</code>，表示例外规则，满足条件的文件不会被忽略；</p>
</li>
<li><p>如果名称的最前面是一个路径分隔符 <code>/</code>，表示要忽略的文件在根目录下；</p>
</li>
<li><p>如果名称的最后面是一个路径分隔符 <code>/</code>，表示要忽略的是此目录下的文件。</p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">*.txt        # 忽略所有 .txt 结尾的文件</span><br><span class="line">!lib.txt     # lib.txt 除外</span><br><span class="line">/temp        # 忽略项目根目录下的 temp 文件</span><br><span class="line">build/       # 忽略 build 目录下的所有文件</span><br><span class="line">doc/*.txt    # 忽略 doc 目录下的所有 txt 文件，不包括子目录下</span><br></pre></td></tr></table></figure>


<p>IDEA 中常用的 <code>.gitignore</code> 文件内容：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Compiled class file</span></span><br><span class="line">*.class</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Log file</span></span><br><span class="line">*.log</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">BlueJ files</span></span><br><span class="line">*.ctxt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Mobile Tools <span class="keyword">for</span> Java (J2ME)</span></span><br><span class="line">.mtj.tmp/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Package Files <span class="comment">#</span></span></span><br><span class="line">*.jar</span><br><span class="line">*.war</span><br><span class="line">*.nar</span><br><span class="line">*.ear</span><br><span class="line">*.zip</span><br><span class="line">*.tar.gz</span><br><span class="line">*.rar</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">virtual machine crash logs</span></span><br><span class="line">hs_err_pid*</span><br><span class="line">.classpath</span><br><span class="line">.project</span><br><span class="line">.settings</span><br><span class="line">target</span><br><span class="line">.idea</span><br><span class="line">*.iml</span><br></pre></td></tr></table></figure>

<h1 id="7-分支"><a href="#7-分支" class="headerlink" title="7. 分支"></a>7. 分支</h1><p>几乎所有的版本控制系统都以某种形式支持分支。使用分支意味着你可以把你的工作从开发主线上分离开来进行重大的 Bug 修改、开发新的功能，以免影响开发主线。</p>
<blockquote>
<p>Git 中与分支相关的常用指令</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出所有本地分支。-a 表示列出所有分支，包括远程分支</span></span><br><span class="line">git branch [-a]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出所有远程分支</span></span><br><span class="line">git branch -r</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">新建一个分支，但依然停留在当前分支</span></span><br><span class="line">git branch [branch-name]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换到某个分支</span></span><br><span class="line">git checkout [branch-name]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">新建一个分支，并切换到该分支</span></span><br><span class="line">git checkout -b [branch]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">合并指定分支到当前分支</span></span><br><span class="line">git merge [branch]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除本地分支</span></span><br><span class="line">git branch -d [branch-name]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除未合并的本地分支</span></span><br><span class="line">git branch -D [branch-name]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除远程分支</span></span><br><span class="line">git push origin --delete [branch-name]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除远程分支(相当于使用一个空分支来覆盖原来的分支)</span></span><br><span class="line">git push origin :branch-name</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看本地分支和追踪情况</span></span><br><span class="line">git remote show origin</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除对分支的远程跟踪，但这个分支仍然在远程</span></span><br><span class="line">git branch -dr [remote/branch]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新本地 git 分支与远程分支同步(保留本地存在的分支)</span></span><br><span class="line">git remote update origin --prune</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除本地多余分支(即远程已经不存在的分支)</span></span><br><span class="line">git remote prune origin</span><br></pre></td></tr></table></figure>

<blockquote>
<p>开发中分支使用原则与流程</p>
</blockquote>
<p>几乎所有的版本控制系统都以某种形式支持分支。 使用分支意味着你可以把你的工作从开发主线上分离开来进行重大的 Bug 修改、开发新的功能，以免影响开发主线。</p>
<p>在开发中，一般有如下分支使用原则与流程：</p>
<ul>
<li>master (生产)分支：线上分支，主分支，中小规模项目作为线上运行的应用对应的分支；</li>
<li>develop (开发)分支：是从 master 创建的分支，一般作为开发部门的主要开发分支，如果没有其他并行开发不同期上线要求，都可以在此版本进行开发，阶段开发完成后，需要是合并到 master 分支，准备上线。 </li>
<li>feature&#x2F;xxxx 分支：从develop创建的分支，一般是同期并行开发，但不同期上线时创建的分支，分支上的研发任务完 成后合并到develop分支。 </li>
<li>hotfix&#x2F;xxxx 分支：从 master 派生的分支，一般作为线上 bug 修复使用，修复完成后需要合并到 master、test、 develop 分支。</li>
</ul>
<p>还有一些其他分支，在此不再详述，例如 test 分支(用于代码测试)、pre 分支(预上线分支)等等。</p>
<h1 id="8-Git远程仓库"><a href="#8-Git远程仓库" class="headerlink" title="8. Git远程仓库"></a>8. Git远程仓库</h1><blockquote>
<p> 常用的托管服务(远程仓库)</p>
</blockquote>
<p>前面我们已经知道了 Git 中存在两种类型的仓库，即本地仓库和远程仓库。那么我们如何搭建Git远程仓库呢？我们可以借助互联网上提供的一些代码托管服务来实现，其中比较常用的有 GitHub、码云(Gitee)、GitLab 等。</p>
<ul>
<li><p><a href="https://github.com/">GitHub</a> 是一个面向开源及私有软件项目的托管平台，因为只支持 Git 作为唯一的版本库格式进行托管，故名GitHub。</p>
</li>
<li><p><a href="https://gitee.com/">码云(Gitee)</a> 是国内的一个代码托管平台，由于服务器在国内，所以相比于 GitHub，码云速度会更快。</p>
</li>
<li><p><a href="https://about.gitlab.com/">GitLab</a> 是一个用于仓库管理系统的开源项目，使用 Git 作为代码管理工具，并在此基础上搭建起来的 Web 服务，一般用于在企业、学校等内部网络搭建 Git 私服。</p>
</li>
</ul>
<blockquote>
<p>GitHub 的使用</p>
</blockquote>
<p>可以使用 GitHub 作为代码托管平台，尽管 GitHub 的访问速度不佳，但也不选择 Gitee，而在公司中，还可能使用搭建的的 GitLab 服务器。</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/ToolsIMG/Git/GitHub%E5%AE%98%E7%BD%91.png"></p>
<ul>
<li><p>首先需要注册 GitHub；</p>
</li>
<li><p>为了方便使用，<strong>强烈建议</strong> 设置本机绑定 SSH 公钥，实现免密码登录；</p>
</li>
</ul>
<h2 id="8-1-配置-SSH-公钥"><a href="#8-1-配置-SSH-公钥" class="headerlink" title="8.1 配置 SSH 公钥"></a>8.1 配置 SSH 公钥</h2><ol>
<li><p>进入 <code>C:\Users(用户)\你的用户名</code> 目录</p>
</li>
<li><p>如果你是第一次设置，在这个目录下看不到.ssh目录</p>
</li>
<li><p>在上述目录下右键打开 <code>“Git Bash Here”</code> ，运行以下命令并生成公钥</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;邮箱或其他描述性文字&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">rsa是加密方式</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>运行后无脑下一步即可</p>
</li>
</ol>
<blockquote>
<p>对输入的命令以及执行命令后需要输出的情况进行解析</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;your_email@example.com&quot;</span><br></pre></td></tr></table></figure>

<p>以上代码省略了 -f 参数，因此运行上面那条命令后会要求输入一个文件名，用于保存刚才生成的 SSH key 代码，如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Generating public/private rsa key pair.</span><br><span class="line"># Enter file in which to save the key (/c/Users/you/.ssh/id_rsa): [Press enter]</span><br></pre></td></tr></table></figure>

<p>也可以不输入文件名，使用默认文件名(<strong>推荐</strong>)，那么就会生成 id_rsa 和 id_rsa.pub 两个秘钥文件。</p>
<p>接着又会提示输入两次密码(该密码是 push 文件的时候要输入的密码，而不是 GitHub 管理者的密码)，也可以不输入密码，直接按回车。那么 push 的时候就不需要输入密码，直接提交到 GitHub 上了，如：(我在此直接回车，不输入密码)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Enter passphrase (empty for no passphrase): </span><br><span class="line"># Enter same passphrase again:</span><br></pre></td></tr></table></figure>

<p>接下来将会显示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Your identification has been saved in /c/Users/you/.ssh/id_rsa.</span><br><span class="line"># Your public key has been saved in /c/Users/you/.ssh/id_rsa.pub.</span><br><span class="line"># The key fingerprint is:</span><br><span class="line"># 01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db your_email@example.com</span><br></pre></td></tr></table></figure>

<p>当看到上面这些信息时就说明 SSH key 已经创建成功，接下来将其添加到 GitHub 的 SSH key 上就可以了。</p>
<ul>
<li><p>打开 GitHub 并进行登录，点击右上角头像，选择 Settings，进入设置页面后，点击 Access 下的 SSH and GPG keys，之后点击 New SSH key；</p>
</li>
<li><p>打开目录 <code>C:\Users(用户)\你的用户名\.ssh</code>，将 id_rsa.pub 文件内的内容复制到公钥填写处，点击 “确定”，输入 GitHub 的密码即可添加成功！</p>
</li>
</ul>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/ToolsIMG/Git/%E5%85%AC%E9%92%A5%E5%A4%8D%E5%88%B6.png" style="zoom: 50%;">

<p>PS：id_rsa 存放的是私钥，id_rsa.pub 存放的是公钥，需要复制的是公钥 id_rsa.pub 的内容。</p>
<ul>
<li><p>运行 Git Bash，输入命令 <code>ssh -T git@github.com</code>(如果使用 Gitee，输入 <code>ssh -T git@gitee.com</code>)，然后输入 yes。出现以下内容则连接成功：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/ToolsIMG/Git/%E8%BF%9E%E6%8E%A5GitHub%E6%88%90%E5%8A%9F.png"></p>
</li>
<li><p>到此，完成 SSH 免密登录的配置。</p>
</li>
<li><p>如果需要新建仓库，点击主界面右上方头像旁的 “+” 然后选择 “New repository” 即可：</p>
</li>
</ul>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/ToolsIMG/Git/GitHub%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93.png">


<h2 id="8-2-操作远程仓库"><a href="#8-2-操作远程仓库" class="headerlink" title="8.2 操作远程仓库"></a>8.2 操作远程仓库</h2><p>执行操作之前要确保此文件夹为 Git 本地仓库。</p>
<blockquote>
<p>添加远程仓库</p>
</blockquote>
<p>此操作是先初始化本地库，然后与已创建的远程库进行对接。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git remote add &lt;远端名称&gt; &lt;仓库路径&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>远端名称，默认填写origin，取决于远端服务器设置 </li>
<li>仓库路径，从远端服务器获取此URL</li>
</ul>
<blockquote>
<p>查看远程仓库</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git remote</span><br></pre></td></tr></table></figure>

<blockquote>
<p>推送到远程仓库</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git push [-f] [--set-upstream] [远端名称 [本地分支名][:远端分支名] ]</span><br></pre></td></tr></table></figure>

<ul>
<li><p>如果远程分支名和本地分支名称相同，则可以只写本地分支 </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure>
</li>
<li><p>-f 表示强制覆盖</p>
</li>
<li><p><code>--set-upstream</code> 推送到远端的同时并且建立起和远端分支的关联关系。 </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git push --set-upstream origin master</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果当前分支已经和远端分支关联，则可以省略分支名和远端名。</p>
<p><code>git push</code> 将 <code>master</code> 分支推送到已关联的远端分支。</p>
</li>
</ul>
<h1 id="9-在-IDEA-中使用-Git"><a href="#9-在-IDEA-中使用-Git" class="headerlink" title="9. 在 IDEA 中使用 Git"></a>9. 在 IDEA 中使用 Git</h1><p><strong>以下内容适用于 IDEA 2022.2 版本，其他版本仅供参考。</strong></p>
<h2 id="9-1-IDEA-配置-Git"><a href="#9-1-IDEA-配置-Git" class="headerlink" title="9.1 IDEA 配置 Git"></a>9.1 IDEA 配置 Git</h2><p>安装好 IntelliJ IDEA 后，如果 Git 安装在默认路径下，那么 IDEA 会自动找到 Git 的位置，如果更改了 Git 的安装位置则需要手动配置下 Git 的路径。按照下面步骤：File — Settings — Version Control — Git — Path to Git executable，在此处配置 Git 安装目录下的 exe 文件。例如：D:\Git\cmd\git.exe，其中 D:\Git 是安装目录。然后可以点击 “Tset”，出现 5 则说明 IDEA 成功识别到 Git 。</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/ToolsIMG/Git/IDEA%E9%85%8D%E7%BD%AEGit.png" style="zoom:67%;">

<p>还可以选择 Settings — Version Control — GitHub，添加 GitHub 账号到 IDEA 中。</p>
<h2 id="9-2-在-IDEA-中操作-Git"><a href="#9-2-在-IDEA-中操作-Git" class="headerlink" title="9.2 在 IDEA 中操作 Git"></a>9.2 在 IDEA 中操作 Git</h2><p>可以使用右上角 IDEA 集成的 Git 按钮进行操作，也可以在 IDEA 中的 Terminal 执行 Git 命令完成操作。</p>
<blockquote>
<p>本地仓库与远程仓库绑定</p>
</blockquote>
<p>1、初始化本地仓库</p>
<p>右上角工具栏 VCS — Create Git Repository — 选择 Git 仓库目录，默认是当前项目目录 — OK</p>
<p>2、设置远程仓库</p>
<p>初始化本地仓库成功后右上角工具栏会出现 Git 选项，Git — Manage Remotes — 输入远程地址 URL — OK</p>
<p><strong>PS：设置远程仓库时远程仓库需要为空。</strong></p>
<p>3、提交到本地仓库</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/ToolsIMG/Git/IDEA%E4%B8%AD%E6%8F%90%E4%BA%A4%E5%88%B0%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93.png" style="zoom: 67%;">

<p>4、推送到远程仓库</p>
<p>右上角工具栏 Git — Push — Push (Push 的时候需要使用 GitHub 的 token)</p>
<p>6、创建分支</p>
<p>克隆远程仓库到本地成功后在 IDEA 右下角会出现 master 按钮，依次点击 master — New Branch — 输入新分支名 — Create，可以看到右下角的 master 分支名变成了输入的新分支名，即当前在新分支下。</p>
<p>7、切换分支及其他分支相关操作</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/ToolsIMG/Git/IEDEA%E4%B8%AD%E5%88%86%E6%94%AF%E5%85%B6%E4%BB%96%E6%93%8D%E4%BD%9C.png" style="zoom: 80%;">

<blockquote>
<p>克隆远程仓库到本地</p>
</blockquote>
<p>右上角工具栏 VCS — Get from Version Control — 根据需求自己选择(可以是 URL 地址或者直接将自己的远程仓库拉取下来)</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/ToolsIMG/Git/IDEA%E5%85%8B%E9%9A%86%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E5%88%B0%E6%9C%AC%E5%9C%B0.png" style="zoom:67%;">

<blockquote>
<p>IDEA 项目绑定 Git</p>
</blockquote>
<p>IDEA 绑定 Git 后可以在 IDEA 观察到 <strong>文件颜色的变化</strong>：</p>
<p><font color="#D06356">红色(或红褐色)</font></p>
<ul>
<li>表示文件尚未被添加到 Git 版本控制中，即文件还未被 <code>git add</code> 命令添加到暂存区。</li>
<li>通常这些文件是新创建的，或者虽然存在但尚未被 Git 跟踪。</li>
</ul>
<p><font color="#4E8854">绿色</font></p>
<ul>
<li>表示文件已经被 <code>git add</code> 命令添加到暂存区，但尚未被 <code>git commit</code> 命令提交。</li>
<li>换句话说，这些文件已经处于待提交状态。</li>
</ul>
<p><font color="#5F96A6">蓝色</font></p>
<ul>
<li>表示文件已经被 Git 跟踪，并且已经发生了修改，但这些修改尚未被提交(即未被 <code>git commit</code>)。</li>
<li>一旦这些修改被提交，文件颜色可能会变为白色(表示文件已提交且没有进一步修改)。</li>
</ul>
<p><font color="#B8AFAB">白色</font></p>
<ul>
<li>表示文件已经被 Git 跟踪，并且最近的修改已经被提交。</li>
<li>这些文件目前没有未提交的修改。</li>
</ul>
<p><font color="#87939A">灰色</font></p>
<ul>
<li>表示文件虽然存在于项目中，但已经被 <code>.gitignore</code> 文件忽略，因此不会被 Git 跟踪。</li>
</ul>
<blockquote>
<p>忽略文件创建</p>
</blockquote>
<p>不希望将 IDEA 的配置文件(.idea)push 到远程仓库，在 .gitignore 文件中添加 <code>.idea/</code> 即可。如果当前项目中没有 .gitignore 文件，就需要创建 .gitignore 文件。</p>
<p>两种方式：</p>
<ul>
<li><p>复制 .gitignore 文件到项目。</p>
<p>因为 .gitignore 比较固定，几乎很多项目都大差不差，所以可以直接去网上复制</p>
</li>
<li><p>安装使用 .ignore 插件。</p>
<p>点击 IDEA 中左上角 File– Settings，安装 .ignore 插件，安装好在项目右键添加 .gitignore ，使用默认模板即可。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>没有对象怎么办？——Java中创建对象的方法</title>
    <url>/posts/Java-Create-Object-Method/</url>
    <content><![CDATA[<h1 id="0-前言"><a href="#0-前言" class="headerlink" title="0. 前言"></a>0. 前言</h1><p>还在为没有对象而彷徨吗？😧还在为没有对象而迷茫吗？😫还在为没有对象而自我怀疑吗？😭还在担心没有对象怎么办？</p>
<p>简单啊，自己 <code>new</code> 一个啊！！众所周知，程序员是<del>不需要</del>不缺对象的，特别是 JAVA 程序员😲。那除了直接使用 <code>new</code> 关键字创建对象，还有什么其他方法创建对象吗？当然有了。接下来就简单介绍几种创建对象的方法。还是单身的程序员们别怕啦！！😜马上就可以精心挑选一个自己满意的<del>对象</del>方法了🎉🎉🎉</p>
<p>假设我们已经有一个女朋友类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GirlFriendFriend</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注解使用的是 Lombok 框架注解，方便快速开发。</p>
<h1 id="1-new-关键字"><a href="#1-new-关键字" class="headerlink" title="1.  new 关键字"></a>1.  new 关键字</h1><p>这是最常见的创建对象的方式，通过 <code>new</code> 关键字，Java 会在堆内存中为对象分配空间，并返回指向这个对象的引用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">GirlFriend</span> <span class="variable">girl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GirlFriend</span>(<span class="string">&quot;小诗诗&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        System.out.println(girl);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GirlFriend(name=小诗诗, age=18)</span><br></pre></td></tr></table></figure>

<h1 id="2-类派发-反射"><a href="#2-类派发-反射" class="headerlink" title="2.  类派发(反射)"></a>2.  类派发(反射)</h1><p>Class 的 <code>getDeclaredConstructor().newInstance()</code> 方法可以在运行时创建一个类的新实例。它等效于使用 <code>new</code> 操作符，但是语法更加动态。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">GirlFriend</span> <span class="variable">girlFriend</span> <span class="operator">=</span> GirlFriend.class.getDeclaredConstructor().newInstance();</span><br><span class="line">        girlFriend.setName(<span class="string">&quot;小诗诗&quot;</span>);</span><br><span class="line">        girlFriend.setAge(<span class="number">18</span>);</span><br><span class="line">        System.out.println(girlFriend);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GirlFriend&#123;name=&#x27;小诗诗&#x27;, age=18&#125;</span><br></pre></td></tr></table></figure>

<h1 id="3-构造器-反射"><a href="#3-构造器-反射" class="headerlink" title="3.  构造器(反射)"></a>3.  构造器(反射)</h1><p>Constructor 的 <code>newInstance()</code> 方法可以在运行时创建一个类的新实例，并且可以传入构造函数的参数。这种方式比 Class 的 <code>newInstance()</code> 方法更加灵活，因为可以选择不同的构造函数。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Constructor&lt;GirlFriend&gt; constructor = GirlFriend.class.getConstructor(String.class, Integer.class);</span><br><span class="line">        <span class="type">GirlFriend</span> <span class="variable">girlFriend</span> <span class="operator">=</span> constructor.newInstance(<span class="string">&quot;小诗诗&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        System.out.println(girlFriend);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GirlFriend(name=小诗诗, age=18)</span><br></pre></td></tr></table></figure>

<h1 id="4-动态加载-反射"><a href="#4-动态加载-反射" class="headerlink" title="4. 动态加载(反射)"></a>4. 动态加载(反射)</h1><p>知道类全路径，使用 <code>Class.forName()</code> 获取类的 <code>Class</code> 对象，然后调用其 <code>newInstance()</code> 方法创建对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">GirlFriend</span> <span class="variable">girlFriend</span> <span class="operator">=</span> (GirlFriend) Class.forName(<span class="string">&quot;com.muyoukule.GirlFriend&quot;</span>)</span><br><span class="line">                .getDeclaredConstructor().newInstance();</span><br><span class="line">        girlFriend.setName(<span class="string">&quot;小诗诗&quot;</span>);</span><br><span class="line">        girlFriend.setAge(<span class="number">18</span>);</span><br><span class="line">        System.out.println(girlFriend);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GirlFriend(name=小诗诗, age=18)</span><br></pre></td></tr></table></figure>

<h1 id="5-clone-方法"><a href="#5-clone-方法" class="headerlink" title="5. clone()方法"></a>5. clone()方法</h1><p>如果一个类实现了 <code>Cloneable</code> 接口并重写了 <code>Object</code> 类中的 <code>clone()</code> 方法，那么可以通过调用已有对象的 <code>clone()</code> 方法来创建该对象的一个副本。</p>
<p><strong>PS：<code>clone()</code> 方法默认是受保护的，并且可能抛出 <code>CloneNotSupportedException</code> 异常。</strong>😅</p>
<p>因此如果要在类外部使用它，通常需要将其声明为公共的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GirlFriend</span> <span class="keyword">implements</span> <span class="title class_">Cloneable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 访问权限为 public，并且返回值写为 girl</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> GirlFriend <span class="title function_">clone</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (GirlFriend) <span class="built_in">super</span>.clone();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AssertionError</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">GirlFriend</span> <span class="variable">girlFriend1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GirlFriend</span>(<span class="string">&quot;小诗诗&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        <span class="type">GirlFriend</span> <span class="variable">girlFriend2</span> <span class="operator">=</span> girlFriend1.clone();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;girlFriend1===&gt;&quot;</span> + girlFriend1);</span><br><span class="line">        System.out.println(<span class="string">&quot;girlFriend2===&gt;&quot;</span> + girlFriend2);</span><br><span class="line">        System.out.println(girlFriend1 == girlFriend2); <span class="comment">//false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">girlFriend1===&gt;GirlFriend(name=小诗诗, age=18)</span><br><span class="line">girlFriend2===&gt;GirlFriend(name=小诗诗, age=18)</span><br><span class="line">false</span><br></pre></td></tr></table></figure>

<h1 id="6-反序列化"><a href="#6-反序列化" class="headerlink" title="6. 反序列化"></a>6. 反序列化</h1><p>如果你有一个对象的序列化表示(例如一个文件或一个字节流)，你可以使用反序列化来重新创建该对象。这通常通过 <code>ObjectInputStream</code>类完成。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GirlFriend</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">GirlFriend</span> <span class="variable">girlFriend1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GirlFriend</span>(<span class="string">&quot;小诗诗&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        <span class="type">Path</span> <span class="variable">path</span> <span class="operator">=</span> Paths.get(<span class="string">&quot;girlFriend.txt&quot;</span>);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(Files.newOutputStream(path));</span><br><span class="line">        oos.writeObject(girlFriend1);</span><br><span class="line">        oos.close();</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(Files.newInputStream(path));</span><br><span class="line">        <span class="type">GirlFriend</span> <span class="variable">girlFriend2</span> <span class="operator">=</span> (GirlFriend) ois.readObject();</span><br><span class="line">        ois.close();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;girlFriend1===&gt;&quot;</span> + girlFriend1);</span><br><span class="line">        System.out.println(<span class="string">&quot;girlFriend2===&gt;&quot;</span> + girlFriend2);</span><br><span class="line">        System.out.println(girlFriend1 == girlFriend2); <span class="comment">//false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">girlFriend1===&gt;GirlFriend(name=小诗诗, age=18)</span><br><span class="line">girlFriend2===&gt;GirlFriend(name=小诗诗, age=18)</span><br><span class="line">false</span><br></pre></td></tr></table></figure>

<h1 id="7-工厂模式"><a href="#7-工厂模式" class="headerlink" title="7. 工厂模式"></a>7. 工厂模式</h1><p>工厂方法是一种设计模式，用于创建对象而不直接使用 <code>new</code> 关键字。工厂方法通常封装了对象的创建逻辑，并且可以根据不同的参数返回不同类型的对象。</p>
<p>1、定义一个 Girl 接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Girl</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2、让 GirlFriend 继承 Girl接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GirlFriend</span> <span class="keyword">implements</span> <span class="title class_">Girl</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3、创建一个 GirlFactory 工厂</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GirlFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Girl <span class="title function_">createGirl</span><span class="params">(String type)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (type == <span class="literal">null</span> || type.trim().length() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Girl</span> <span class="variable">girl</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;GirlFriend&quot;</span>.equals(type)) &#123;</span><br><span class="line">            girl = <span class="keyword">new</span> <span class="title class_">GirlFriend</span>(<span class="string">&quot;小诗诗&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Unsupported type: &quot;</span> + type);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> girl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">GirlFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GirlFactory</span>();</span><br><span class="line">        <span class="type">GirlFriend</span> <span class="variable">girlFriend</span> <span class="operator">=</span> (GirlFriend) factory.createGirl(<span class="string">&quot;GirlFriend&quot;</span>);</span><br><span class="line">        System.out.println(girlFriend);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GirlFriend(name=小诗诗, age=18)</span><br></pre></td></tr></table></figure>

<h1 id="8-Builder模式"><a href="#8-Builder模式" class="headerlink" title="8. Builder模式"></a>8. Builder模式</h1><p>Builder 模式用于创建复杂的对象，允许用户以不同的方式构建对象。它通常涉及到一个 <code>Builder</code> 类，该类包含了一系列设置对象属性的方法，并最终返回一个构建好的对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GirlFriend</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">GirlFriend</span><span class="params">(Builder builder)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = builder.name;</span><br><span class="line">        <span class="built_in">this</span>.age = builder.age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Builder</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Builder <span class="title function_">withName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Builder <span class="title function_">withAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.age = age;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> GirlFriend <span class="title function_">build</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">GirlFriend</span>(<span class="built_in">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">GirlFriend</span> <span class="variable">girlFriend</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GirlFriend</span>.Builder()</span><br><span class="line">                .withName(<span class="string">&quot;小诗诗&quot;</span>)</span><br><span class="line">                .withAge(<span class="number">18</span>)</span><br><span class="line">                .build();</span><br><span class="line">        System.out.println(girlFriend);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GirlFriend(name=小诗诗, age=18)</span><br></pre></td></tr></table></figure>

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>没有对象不要彷徨、不要迷茫、不要自我怀疑。在上面的方法中精心挑选一个自己满意的方法去造对象吧！！😊</p>
<p><strong>PS：玩笑归玩笑，祝福大家在现实生活中都能找到一个令自己满意的对象！！</strong>😄</p>
<p>千万不要像我一样在这里研究怎么使用代码创造对象…😢</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>【步骤三】Hive、MySQL、HBase数据互导</title>
    <url>/posts/BigData-Case-Volume-Three/</url>
    <content><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>简介：本文章基于厦门大学提供的<a href="https://dblab.xmu.edu.cn/post/7499/">大数据课程实验案例：网站用户行为分析</a>，通过使用 CentOS 操作编写而来。具体介绍请打开链接进行阅读。</p>
<p><font color="red">这里介绍几点值得特别注意的事项：</font></p>
<p>1、对于案例所涉及的系统及软件此文档使用的是以下版本，其他软件版本随意：</p>
<ul>
<li>Linux系统（CentOS7）</li>
<li>MySQL（5.7）</li>
<li>Hadoop（3.1.3）</li>
<li>HBase（2.2.2，HBase版本需要和Hadoop版本兼容）</li>
<li>Hive（3.1.2，Hive需要和Hadoop版本兼容）</li>
<li>Sqoop（1.4.7）</li>
<li>R（3.6.0）</li>
<li>IDEA（ 2023.3.6 社区版）</li>
</ul>
<p><font color="red"><strong>PS：Hadoop 与 HBase、Hive 版本一定要兼容！！！版本一定要兼容！！！这很重要！！！</strong></font>😃😃😃其他软件随意。</p>
<p>2、本文章所有<strong>下载</strong>的所有软件均在 <code>/</code> 目录下。所有<strong>安装</strong>的所有软件均在 <code>/usr/local/</code> 目录下以 <code>软件名-版本号</code> 方式命名。在进行每个软件的安装操作之前请先<strong>整体阅读</strong>整个软件安装流程的文章有个整体思路，<strong>了解到安装此软件需要做哪些设置再进行操作</strong>，这样可以避免很多不必要的麻烦。</p>
<p>3、<font color="red"><strong>此案例分为五个步骤，请按照步骤顺序进行阅读！！</strong>🙂🙂</font></p>
<h1 id="1-Hive预操作"><a href="#1-Hive预操作" class="headerlink" title="1. Hive预操作"></a>1. Hive预操作</h1><p>1、启动 MySQL 数据库</p>
<p>因为需要借助于 MySQL 保存 Hive 的元数据，所以，请首先启动 MySQL 数据库，请在终端中输入下面命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看 MySQL 状态</span></span><br><span class="line">systemctl status mysqld</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动 MySQL</span></span><br><span class="line">sudo systemctl start mysqld</span><br></pre></td></tr></table></figure>

<p>2、启动 Hadoop</p>
<p>由于 Hive 是基于 Hadoop 的数据仓库，使用 HiveQL 语言撰写的查询语句，最终都会被 Hive 自动解析成 MapReduce 任务由 Hadoop 去具体执行，因此，需要启动 Hadoop，然后再启动 Hive。</p>
<p>请执行下面命令启动 Hadoop(如果你已经启动了 Hadoop 就不用再次启动了)：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动 Hadoop</span></span><br><span class="line">start-all.sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看当前运行的进程</span></span><br><span class="line">jps</span><br></pre></td></tr></table></figure>

<p>如果出现下面这些进程，说明Hadoop启动成功了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">NameNode</span><br><span class="line">DataNode</span><br><span class="line">NodeManager</span><br><span class="line">Jps</span><br><span class="line">SecondaryNameNode</span><br><span class="line">ResourceManager</span><br></pre></td></tr></table></figure>

<p>3、启动进入 Hive：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hive</span><br></pre></td></tr></table></figure>

<p>通过上述过程，我们就完成了 MySQL、Hadoop 和 Hive 三者的启动。启动成功以后，就进入了 <code>hive&gt;</code> 命令提示符状态，可以输入类似SQL 语句的 HiveQL 语句。</p>
<p>然后，在 <code>hive&gt;</code> 命令提示符状态下执行下面命令：</p>
<p>(1) 创建临时表 user_action</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table dblab.user_action(id STRING,uid STRING, item_id STRING, behavior_type STRING, item_category STRING, visit_date DATE, province STRING) COMMENT &#x27;Welcome to XMU dblab! &#x27; ROW FORMAT DELIMITED FIELDS TERMINATED BY &#x27;\t&#x27; STORED AS TEXTFILE;</span><br></pre></td></tr></table></figure>

<p>这个命令执行完以后，Hive 会自动在 HDFS 文件系统中创建对应的数据文件<code>/user/hive/warehouse/dblab.db/user_action</code><br>我们可以新建一个终端，执行命令查看一下，确认这个数据文件在 HDFS 中确实被创建了，请在新建的终端中执行下面命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hdfs dfs -ls /user/hive/warehouse/dblab.db</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">drwxr-xr-x   - muyoukule supergroup          0 2024-03-24 02:06 /user/hive/warehouse/dblab.db/scan</span><br><span class="line">drwxr-xr-x   - muyoukule supergroup          0 2024-03-24 02:15 /user/hive/warehouse/dblab.db/user_action</span><br></pre></td></tr></table></figure>

<p>这说明，这个数据文件在 HDFS 中确实被创建了。注意，这个 HDFS 中的数据文件，在我们后面的 “使用 HBase Java API 把数据从本地导入到 HBase 中” 操作中会使用到。</p>
<p>(2) 将 <code>bigdata_user</code> 表中的数据插入到 <code>user_action</code> (执行时间：10秒左右)</p>
<p>在第二个步骤—— Hive 数据分析中，我们已经在 Hive 中的 dblab 数据库中创建了一个外部表 <code>bigdata_user</code>。下面把<code>dblab.bigdata_user</code> 数据插入到 <code>dblab.user_action</code> 表中，命令如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT OVERWRITE TABLE dblab.user_action select * from dblab.bigdata_user;</span><br></pre></td></tr></table></figure>

<p>请执行下面命令查询上面的插入命令是否成功执行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from dblab.user_action limit 10;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">OK</span><br><span class="line">1       10001082        285259775       1       4076    2014-12-08      吉林</span><br><span class="line">2       10001082        4368907 1       5503    2014-12-12      贵州</span><br><span class="line">3       10001082        4368907 1       5503    2014-12-12      西藏</span><br><span class="line">4       10001082        53616768        1       9762    2014-12-02      江苏</span><br><span class="line">5       10001082        151466952       1       5232    2014-12-12      青海</span><br><span class="line">6       10001082        53616768        4       9762    2014-12-02      广西</span><br><span class="line">7       10001082        290088061       1       5503    2014-12-12      台湾</span><br><span class="line">8       10001082        298397524       1       10894   2014-12-12      辽宁</span><br><span class="line">9       10001082        32104252        1       6513    2014-12-12      内蒙古</span><br><span class="line">10      10001082        323339743       1       10894   2014-12-12      四川</span><br><span class="line">Time taken: 0.132 seconds, Fetched: 10 row(s)</span><br></pre></td></tr></table></figure>

<h1 id="2-使用-Sqoop-将数据从-Hive-导入-MySQL"><a href="#2-使用-Sqoop-将数据从-Hive-导入-MySQL" class="headerlink" title="2. 使用 Sqoop 将数据从 Hive 导入 MySQL"></a>2. 使用 Sqoop 将数据从 Hive 导入 MySQL</h1><p>1、启动Hadoop集群、MySQL服务</p>
<p>前面我们已经启动了Hadoop集群和MySQL服务。这里请确认已经按照前面操作启动成功。</p>
<p>2、将前面生成的临时表数据从Hive导入到 MySQL 中，包含如下四个步骤。</p>
<p>(1) 登录 MySQL</p>
<p>请在 Linux 系统中新建一个终端，执行下面命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure>

<p>为了简化操作，本教程直接使用 root 用户登录 MySQL 数据库。但是，在实际应用中，建议在 MySQL 中再另外创建一个用户。</p>
<p>执行上面命令以后，就进入了 <code>mysql&gt;</code> 命令提示符状态。</p>
<p>(2) 创建数据库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> #显示所有数据库</span><br><span class="line">show databases;</span><br><span class="line"></span><br><span class="line">#创建dblab数据库</span><br><span class="line">create database dblab;</span><br><span class="line"></span><br><span class="line">#使用数据库</span><br><span class="line">use dblab;</span><br></pre></td></tr></table></figure>

<p><strong>PS：请使用下面命令查看数据库的编码：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show variables like &quot;char%&quot;;</span><br></pre></td></tr></table></figure>

<p>会显示类似下面的结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+--------------------------+----------------------------+</span><br><span class="line">| Variable_name            | Value                      |</span><br><span class="line">+--------------------------+----------------------------+</span><br><span class="line">| character_set_client     | utf8                       |</span><br><span class="line">| character_set_connection | utf8                       |</span><br><span class="line">| character_set_database   | latin1                     |</span><br><span class="line">| character_set_filesystem | binary                     |</span><br><span class="line">| character_set_results    | utf8                       |</span><br><span class="line">| character_set_server     | latin1                     |</span><br><span class="line">| character_set_system     | utf8                       |</span><br><span class="line">| character_sets_dir       | /usr/share/mysql/charsets/ |</span><br><span class="line">+--------------------------+----------------------------+</span><br><span class="line">8 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure>

<p>请确认当前编码为 <code>utf8</code>，否则无法导入中文。如果不是 <code>utf8</code>则需要找到自己 MySQL 的配置文件(不同的安装方式对应的配置文件位置不同)，<code>yum</code> 方式安装的 MySQL 配置文件所在位置为 <code>/etc/my.cnf</code> 。找到之后使用 vim 编辑器打开：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改 MySQL 配置文件，目录根据安装时自行查找</span></span><br><span class="line">sudo vim /etc/my.cnf</span><br></pre></td></tr></table></figure>

<p>打开后在配置文件中添加 <code>character_set_server=utf8</code>：</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/MySQL%E9%85%8D%E7%BD%AE%E5%AD%97%E7%AC%A6%E9%9B%86.png" style="zoom: 50%;">

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改完后重启 MySQL 服务</span></span><br><span class="line">sudo systemctl restart mysqld</span><br></pre></td></tr></table></figure>

<p>下面是修改了编码格式后的结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+--------------------------+----------------------------+</span><br><span class="line">| Variable_name            | Value                      |</span><br><span class="line">+--------------------------+----------------------------+</span><br><span class="line">| character_set_client     | utf8                       |</span><br><span class="line">| character_set_connection | utf8                       |</span><br><span class="line">| character_set_database   | utf8                       |</span><br><span class="line">| character_set_filesystem | binary                     |</span><br><span class="line">| character_set_results    | utf8                       |</span><br><span class="line">| character_set_server     | utf8                       |</span><br><span class="line">| character_set_system     | utf8                       |</span><br><span class="line">| character_sets_dir       | /usr/share/mysql/charsets/ |</span><br><span class="line">+--------------------------+----------------------------+</span><br><span class="line">8 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>(3) 创建表</p>
<p>下面在 MySQL 的数据库 <code>dblab</code> 中创建一个新表 <code>user_action</code>，并设置其编码为 <code>utf-8</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE `dblab`.`user_action` (`id` varchar(50),`uid` varchar(50),`item_id` varchar(50),`behavior_type` varchar(10),`item_category` varchar(50), `visit_date` DATE,`province` varchar(20)) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br></pre></td></tr></table></figure>

<p>PS：语句中的引号是反引号 &#96;，不是单引号 ’ 。</p>
<p>创建成功后，输入下面命令退出 MySQL：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure>

<p>(4) 导入数据(执行时间：20秒左右)</p>
<p>注意，刚才已经退出 MySQL，回到了 Shell 命令提示符状态。下面就可以执行数据导入操作，</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">导入命令</span></span><br><span class="line">sqoop export --connect jdbc:mysql://localhost:3306/dblab?useSSL=false --username root --password root --table duser_action --export-dir &#x27;/user/hive/warehouse/dblab.db/user_action&#x27; --fields-terminated-by &#x27;\t&#x27;; </span><br></pre></td></tr></table></figure>

<p>字段解释：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqoop export			# 表示数据从 hive 复制到 mysql 中</span><br><span class="line">--connect jdbc:mysql://localhost:3306/dblab </span><br><span class="line">--username root			# mysql登陆用户名</span><br><span class="line">--password root			# 登录密码</span><br><span class="line">--table user_action		# mysql 中的表，即将被导入的表名称  </span><br><span class="line">--export-dir &#x27;/user/hive/warehouse/dblab.db/user_action &#x27;	#hive 中被导出的文件 </span><br><span class="line">--fields-terminated-by &#x27;\t&#x27;		#Hive 中被导出的文件字段的分隔符</span><br></pre></td></tr></table></figure>

<p>如果出现错误，找不到或无法加载主类 <code>org.apache.hadoop.mapreduce.v2.app.MRAppMaster</code>：</p>
<p>在命令行下输入如下命令，并将返回的内容复制。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hadoop classpath</span><br></pre></td></tr></table></figure>

<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/hadoop%20classpath.png" style="zoom:67%;">

<p>将如上信息全部复制，找到自己安装 Hadoop 的路径打开 <code>yarn-site.xml</code> 文件，在后面添加如下配置：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用 gedit 编辑器记得直接操作虚拟机</span></span><br><span class="line">gedit /usr/local/hadoop-3.1.3/etc/hadoop/yarn-site.xml</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.application.classpath<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>输入刚才返回的Hadoop classpath路径<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/yarn-site.xml%E6%B7%BB%E5%8A%A0%E9%85%8D%E7%BD%AE.png" style="zoom:50%;">

<p>在所有的 Master 和 Slave 节点进行如上设置，设置完毕后重启 Hadoop 集群，重新运行刚才的 MapReduce 程序，修改后运行成功：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2024-03-24 05:18:25,571 INFO mapreduce.Job: Job job_1711280620175_0004 completed successfully</span><br><span class="line">2024-03-24 05:18:25,655 INFO mapreduce.Job: Counters: 32</span><br><span class="line">        File System Counters</span><br><span class="line">                FILE: Number of bytes read=0</span><br><span class="line">                FILE: Number of bytes written=904948</span><br><span class="line">                FILE: Number of read operations=0</span><br><span class="line">                FILE: Number of large read operations=0</span><br><span class="line">                FILE: Number of write operations=0</span><br><span class="line">                HDFS: Number of bytes read=15607365</span><br><span class="line">                HDFS: Number of bytes written=0</span><br><span class="line">                HDFS: Number of read operations=19</span><br><span class="line">                HDFS: Number of large read operations=0</span><br><span class="line">                HDFS: Number of write operations=0</span><br><span class="line">        Job Counters </span><br><span class="line">                Launched map tasks=4</span><br><span class="line">                Data-local map tasks=4</span><br><span class="line">                Total time spent by all maps in occupied slots (ms)=37647</span><br><span class="line">                Total time spent by all reduces in occupied slots (ms)=0</span><br><span class="line">                Total time spent by all map tasks (ms)=37647</span><br><span class="line">                Total vcore-milliseconds taken by all map tasks=37647</span><br><span class="line">                Total megabyte-milliseconds taken by all map tasks=38550528</span><br><span class="line">        Map-Reduce Framework</span><br><span class="line">                Map input records=300000</span><br><span class="line">                Map output records=300000</span><br><span class="line">                Input split bytes=696</span><br><span class="line">                Spilled Records=0</span><br><span class="line">                Failed Shuffles=0</span><br><span class="line">                Merged Map outputs=0</span><br><span class="line">                GC time elapsed (ms)=1097</span><br><span class="line">                CPU time spent (ms)=14110</span><br><span class="line">                Physical memory (bytes) snapshot=1415909376</span><br><span class="line">                Virtual memory (bytes) snapshot=11207258112</span><br><span class="line">                Total committed heap usage (bytes)=1074266112</span><br><span class="line">                Peak Map Physical memory (bytes)=360275968</span><br><span class="line">                Peak Map Virtual memory (bytes)=2806079488</span><br><span class="line">        File Input Format Counters </span><br><span class="line">                Bytes Read=0</span><br><span class="line">        File Output Format Counters </span><br><span class="line">                Bytes Written=0</span><br><span class="line">2024-03-24 05:18:25,659 INFO mapreduce.ExportJobBase: Transferred 14.8843 MB in 31.3371 seconds (486.3743 KB/sec)</span><br><span class="line">2024-03-24 05:18:25,661 INFO mapreduce.ExportJobBase: Exported 300000 records.</span><br></pre></td></tr></table></figure>

<p>3、查看MySQL中user_action表数据</p>
<p>下面需要再次启动 MySQL，进入 <code>mysql&gt;</code> 命令提示符状态：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure>

<p>会提示你输入 MySQL 的 root 用户的密码，然后执行下面命令查询 <code>user_action</code> 表中的数据：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use dblab;</span><br><span class="line">select * from user_action limit 10;</span><br></pre></td></tr></table></figure>

<p>会得到类似下面的查询结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+--------+-----------+-----------+---------------+---------------+------------+-----------+</span><br><span class="line">| id     | uid       | item_id   | behavior_type | item_category | visit_date | province  |</span><br><span class="line">+--------+-----------+-----------+---------------+---------------+------------+-----------+</span><br><span class="line">| 225651 | 102865660 | 237147749 | 1             | 5689          | 2014-12-04 | 黑龙江    |</span><br><span class="line">| 225652 | 102865660 | 395294600 | 1             | 3099          | 2014-12-11 | 山西      |</span><br><span class="line">| 225653 | 102865660 | 164310319 | 1             | 5027          | 2014-12-08 | 江苏      |</span><br><span class="line">| 225654 | 102865660 | 72511722  | 1             | 1121          | 2014-12-13 | 西藏      |</span><br><span class="line">| 225655 | 102865660 | 334372932 | 1             | 5027          | 2014-11-30 | 甘肃      |</span><br><span class="line">| 225656 | 102865660 | 323237439 | 1             | 5027          | 2014-12-02 | 广东      |</span><br><span class="line">| 225657 | 102865660 | 323237439 | 1             | 5027          | 2014-12-07 | 重庆市    |</span><br><span class="line">| 225658 | 102865660 | 34102362  | 1             | 1863          | 2014-12-13 | 宁夏      |</span><br><span class="line">| 225659 | 102865660 | 373499226 | 1             | 12388         | 2014-11-26 | 黑龙江    |</span><br><span class="line">| 225660 | 102865660 | 271583890 | 1             | 5027          | 2014-12-06 | 福建      |</span><br><span class="line">+--------+-----------+-----------+---------------+---------------+------------+-----------+</span><br><span class="line">10 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>从Hive导入数据到MySQL中，成功！</p>
<h1 id="3-使用-Sqoop-将数据从-MySQL-导入-HBase"><a href="#3-使用-Sqoop-将数据从-MySQL-导入-HBase" class="headerlink" title="3. 使用 Sqoop 将数据从 MySQL 导入 HBase"></a>3. 使用 Sqoop 将数据从 MySQL 导入 HBase</h1><p>1、启动 Hadoop 集群、MySQL 服务、HBase 服务</p>
<p>之前我们已经启动了 Hadoop 集群、MySQL 服务，这里请确认已经按照前面操作启动成功。这里我们再启动 HBase 服务。本教程中，HBase的安装目录是 <code>/usr/local/hbase-2.2.2</code>，而且本教程中，HBase 配置为使用 HDFS 存储数据。</p>
<p>请新建一个终端，执行下面命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">start-hbase.sh</span><br><span class="line"></span><br><span class="line">jps</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HRegionServer</span><br><span class="line">Jps</span><br><span class="line">ResourceManager</span><br><span class="line">NameNode</span><br><span class="line">SecondaryNameNode</span><br><span class="line">NodeManager</span><br><span class="line">DataNode</span><br><span class="line">HQuorumPeer</span><br><span class="line">HMaster</span><br></pre></td></tr></table></figure>

<p>2、启动 HBase shell</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hbase shell</span><br></pre></td></tr></table></figure>

<p>启动成功后，就进入了 <code>hbase&gt;</code> 命令提示符状态。</p>
<p>3、创建表 <code>user_action</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">create &#x27;user_action&#x27;, &#123; NAME =&gt; &#x27;f1&#x27;, VERSIONS =&gt; 5&#125;</span><br></pre></td></tr></table></figure>

<p>上面命令在 HBase 中创建了一个 <code>user_action</code> 表，这个表中有一个列族 f1(你愿意把列族名称取为其他名称也可以，比如列族名称为<code>userinfo</code> )，历史版本保留数量为 5 。</p>
<p>4、导入数据(执行时间：30秒左右)</p>
<p>下面新建一个终端，执行下面命令导入数据：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sqoop import --connect jdbc:mysql://localhost:3306/dblab?useSSL=false --username root --password root --table user_action --hbase-table user_action --column-family f1 --hbase-row-key id --hbase-create-table -m 1</span><br></pre></td></tr></table></figure>

<p><font color="red">PS：IP部分改为本机IP地址或localhost。同时，HBase只支持十六进制存储中文。</font></p>
<p>命令解释如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqoop import --connect jdbc:mysql://localhost:3306/dblab</span><br><span class="line">--username  root</span><br><span class="line">--password  root </span><br><span class="line">--table user_action</span><br><span class="line">--hbase-table user_action 	#HBase中表名称</span><br><span class="line">--column-family f1		#列簇名称</span><br><span class="line">--hbase-row-key id		#HBase 行键</span><br><span class="line">--hbase-create-table	#是否在不存在情况下创建表</span><br><span class="line">-m 1	#启动 Map 数量</span><br></pre></td></tr></table></figure>

<p>如果出现 <code>Exception in thread “main“ java.lang.NoSuchMethodError: org.apache.hadoop.hbase.client.HBaseAdmin.</code> 的错误：根据报错信息提示，HBase 中没有对应的方法执行语句。查看错误，因为对应 HBase 版本太高导致。</p>
<p>解决方法：根据链接下载 <a href="http://archive.apache.org/dist/hbase/1.6.0/">HBase1.6 版本</a>，本地解压，将 lib 文件夹中所有 jar 包上传至虚拟机 <code>$SQOOP_HOME/lib</code> 文件夹中。</p>
<p>修改后再执行上面的 sqoop import 命令以后，会得到类似下面的结果(省略了很多非重要的屏幕信息)：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">        File System Counters</span><br><span class="line">                FILE: Number of bytes read=0</span><br><span class="line">                FILE: Number of bytes written=277341</span><br><span class="line">                FILE: Number of read operations=0</span><br><span class="line">                FILE: Number of large read operations=0</span><br><span class="line">                FILE: Number of write operations=0</span><br><span class="line">                HDFS: Number of bytes read=87</span><br><span class="line">                HDFS: Number of bytes written=0</span><br><span class="line">                HDFS: Number of read operations=1</span><br><span class="line">                HDFS: Number of large read operations=0</span><br><span class="line">                HDFS: Number of write operations=0</span><br><span class="line">        Job Counters </span><br><span class="line">                Launched map tasks=1</span><br><span class="line">                Other local map tasks=1</span><br><span class="line">                Total time spent by all maps in occupied slots (ms)=13618</span><br><span class="line">                Total time spent by all reduces in occupied slots (ms)=0</span><br><span class="line">                Total time spent by all map tasks (ms)=13618</span><br><span class="line">                Total vcore-milliseconds taken by all map tasks=13618</span><br><span class="line">                Total megabyte-milliseconds taken by all map tasks=13944832</span><br><span class="line">        Map-Reduce Framework</span><br><span class="line">                Map input records=300000</span><br><span class="line">                Map output records=300000</span><br><span class="line">                Input split bytes=87</span><br><span class="line">                Spilled Records=0</span><br><span class="line">                Failed Shuffles=0</span><br><span class="line">                Merged Map outputs=0</span><br><span class="line">                GC time elapsed (ms)=217</span><br><span class="line">                CPU time spent (ms)=8620</span><br><span class="line">                Physical memory (bytes) snapshot=425291776</span><br><span class="line">                Virtual memory (bytes) snapshot=2816741376</span><br><span class="line">                Total committed heap usage (bytes)=321388544</span><br><span class="line">                Peak Map Physical memory (bytes)=425291776</span><br><span class="line">                Peak Map Virtual memory (bytes)=2816741376</span><br><span class="line">        File Input Format Counters </span><br><span class="line">                Bytes Read=0</span><br><span class="line">        File Output Format Counters </span><br><span class="line">                Bytes Written=0</span><br><span class="line">2024-03-24 07:06:38,422 INFO mapreduce.ImportJobBase: Transferred 0 bytes in 69.6995 seconds (0 bytes/sec)</span><br><span class="line">2024-03-24 07:06:38,425 INFO mapreduce.ImportJobBase: Retrieved 300000 records.</span><br></pre></td></tr></table></figure>

<p>5、查看 HBase 中 <code>user_action</code> 表数据</p>
<p>现在，再次切换到 HBase Shell 运行的那个终端窗口，在 <code>hbase&gt;</code> 命令提示符下，执行下面命令查询刚才导入的数据：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">只查询前面10行</span></span><br><span class="line">scan &#x27;user_action&#x27;,&#123;LIMIT=&gt;10&#125;  </span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ROW                         COLUMN+CELL                                                                    </span><br><span class="line"> 1                          column=f1:behavior_type, timestamp=1711289186613, value=1                      </span><br><span class="line"> 1                          column=f1:item_category, timestamp=1711289186613, value=4076                   </span><br><span class="line"> 1                          column=f1:item_id, timestamp=1711289186613, value=285259775                    </span><br><span class="line"> 1                          column=f1:province, timestamp=1711289186613, value=\xE6\xB1\x9F\xE8\xA5\xBF    </span><br><span class="line"> 1                          column=f1:uid, timestamp=1711289186613, value=10001082                         </span><br><span class="line"> 1                          column=f1:visit_date, timestamp=1711289186613, value=2014-12-08                </span><br><span class="line"> 10                         column=f1:behavior_type, timestamp=1711289186613, value=1                      </span><br><span class="line"> 10                         column=f1:item_category, timestamp=1711289186613, value=10894                  </span><br><span class="line"> 10                         column=f1:item_id, timestamp=1711289186613, value=323339743                    </span><br><span class="line"> 10                         column=f1:province, timestamp=1711289186613, value=\xE6\xB5\x99\xE6\xB1\x9F    </span><br><span class="line"> 10                         column=f1:uid, timestamp=1711289186613, value=10001082                         </span><br><span class="line"> 10                         column=f1:visit_date, timestamp=1711289186613, value=2014-12-12                </span><br><span class="line"> 100                        column=f1:behavior_type, timestamp=1711289186613, value=1                      </span><br><span class="line"> 100                        column=f1:item_category, timestamp=1711289186613, value=10576                  </span><br><span class="line"> 100                        column=f1:item_id, timestamp=1711289186613, value=275221686                    </span><br><span class="line"> 100                        column=f1:province, timestamp=1711289186613, value=\xE9\xBB\x91\xE9\xBE\x99\xE6</span><br><span class="line">                            \xB1\x9F                                                                       </span><br><span class="line"> 100                        column=f1:uid, timestamp=1711289186613, value=10001082                         </span><br><span class="line"> 100                        column=f1:visit_date, timestamp=1711289186613, value=2014-12-02                </span><br><span class="line"> 1000                       column=f1:behavior_type, timestamp=1711289186910, value=1                      </span><br><span class="line"> 1000                       column=f1:item_category, timestamp=1711289186910, value=3381                   </span><br><span class="line"> 1000                       column=f1:item_id, timestamp=1711289186910, value=168463559                    </span><br><span class="line"> 1000                       column=f1:province, timestamp=1711289186910, value=\xE9\xA6\x99\xE6\xB8\xAF    </span><br><span class="line"> 1000                       column=f1:uid, timestamp=1711289186910, value=100068031                        </span><br><span class="line"> 1000                       column=f1:visit_date, timestamp=1711289186910, value=2014-12-02                </span><br><span class="line"> 10000                      column=f1:behavior_type, timestamp=1711289188323, value=1                      </span><br><span class="line"> 10000                      column=f1:item_category, timestamp=1711289188323, value=12488                  </span><br><span class="line"> 10000                      column=f1:item_id, timestamp=1711289188323, value=45571867                     </span><br><span class="line"> 10000                      column=f1:province, timestamp=1711289188323, value=\xE6\x96\xB0\xE7\x96\x86    </span><br><span class="line"> 10000                      column=f1:uid, timestamp=1711289188323, value=100198255                        </span><br><span class="line"> 10000                      column=f1:visit_date, timestamp=1711289188323, value=2014-12-05                </span><br><span class="line"> 100000                     column=f1:behavior_type, timestamp=1711289190040, value=1                      </span><br><span class="line"> 100000                     column=f1:item_category, timestamp=1711289190040, value=6580                   </span><br><span class="line"> 100000                     column=f1:item_id, timestamp=1711289190040, value=78973192                     </span><br><span class="line"> 100000                     column=f1:province, timestamp=1711289190040, value=\xE5\xA4\xA9\xE6\xB4\xA5\xE5</span><br><span class="line">                            \xB8\x82                                                                       </span><br><span class="line"> 100000                     column=f1:uid, timestamp=1711289190040, value=101480065                        </span><br><span class="line"> 100000                     column=f1:visit_date, timestamp=1711289190040, value=2014-11-29                </span><br><span class="line"> 100001                     column=f1:behavior_type, timestamp=1711289190040, value=1                      </span><br><span class="line"> 100001                     column=f1:item_category, timestamp=1711289190040, value=3472                   </span><br><span class="line"> 100001                     column=f1:item_id, timestamp=1711289190040, value=34929314                     </span><br><span class="line"> 100001                     column=f1:province, timestamp=1711289190040, value=\xE5\xB9\xBF\xE8\xA5\xBF    </span><br><span class="line"> 100001                     column=f1:uid, timestamp=1711289190040, value=101480065                        </span><br><span class="line"> 100001                     column=f1:visit_date, timestamp=1711289190040, value=2014-12-15                </span><br><span class="line"> 100002                     column=f1:behavior_type, timestamp=1711289190040, value=1                      </span><br><span class="line"> 100002                     column=f1:item_category, timestamp=1711289190040, value=10392                  </span><br><span class="line"> 100002                     column=f1:item_id, timestamp=1711289190040, value=401104894                    </span><br><span class="line"> 100002                     column=f1:province, timestamp=1711289190040, value=\xE5\x8C\x97\xE4\xBA\xAC\xE5</span><br><span class="line">                            \xB8\x82                                                                       </span><br><span class="line"> 100002                     column=f1:uid, timestamp=1711289190040, value=101480065                        </span><br><span class="line"> 100002                     column=f1:visit_date, timestamp=1711289190040, value=2014-11-29                </span><br><span class="line"> 100003                     column=f1:behavior_type, timestamp=1711289190040, value=1                      </span><br><span class="line"> 100003                     column=f1:item_category, timestamp=1711289190040, value=5894                   </span><br><span class="line"> 100003                     column=f1:item_id, timestamp=1711289190040, value=217913901                    </span><br><span class="line"> 100003                     column=f1:province, timestamp=1711289190040, value=\xE7\x94\x98\xE8\x82\x83    </span><br><span class="line"> 100003                     column=f1:uid, timestamp=1711289190040, value=101480065                        </span><br><span class="line"> 100003                     column=f1:visit_date, timestamp=1711289190040, value=2014-12-04                </span><br><span class="line"> 100004                     column=f1:behavior_type, timestamp=1711289190040, value=1                      </span><br><span class="line"> 100004                     column=f1:item_category, timestamp=1711289190040, value=12189                  </span><br><span class="line"> 100004                     column=f1:item_id, timestamp=1711289190040, value=295053167                    </span><br><span class="line"> 100004                     column=f1:province, timestamp=1711289190040, value=\xE6\xB9\x96\xE5\x8C\x97    </span><br><span class="line"> 100004                     column=f1:uid, timestamp=1711289190040, value=101480065                        </span><br><span class="line"> 100004                     column=f1:visit_date, timestamp=1711289190040, value=2014-11-26                </span><br><span class="line">10 row(s)</span><br><span class="line">Took 0.3723 seconds </span><br></pre></td></tr></table></figure>

<p>注意，我们用 <code>limit10</code> 是返回 HBase 表中的前面10行数据，但是，上面的结果，从 “行数” 来看，给人一种错误，似乎不是10行，要远远多于10行。这是因为，HBase 在显示数据的时候，和关系型数据库 MySQL 是不同的，每行显示的不是一行记录，而是一个 “单元格”。</p>
<h1 id="4-使用HBase-Java-API把数据从本地导入到HBase中"><a href="#4-使用HBase-Java-API把数据从本地导入到HBase中" class="headerlink" title="4. 使用HBase Java API把数据从本地导入到HBase中"></a>4. 使用HBase Java API把数据从本地导入到HBase中</h1><p>1、启动 Hadoop 集群、HBase 服务</p>
<p>请首先确保启动了 Hadoop 集群和 HBase 服务。如果还没有启动，请在Linux 系统中打开一个终端。</p>
<p>首先，按照下面命令启动 Hadoop、HBase：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动 Hadoop</span></span><br><span class="line">start-all.sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动 HBase</span></span><br><span class="line">start-hbase.sh</span><br></pre></td></tr></table></figure>

<p>2、数据准备</p>
<p>实际上，我们也可以编写 Java 程序，直接从 HDFS 中读取数据加载到 HBase。但是，这里我们展示的是如何用 JAVA 程序把本地数据导入到 HBase 中。你只要把程序做简单修改，就可以实现从 HDFS 中读取数据加载到 HBase。</p>
<p>首先，请将之前的 <code>user_action</code> 数据从 HDFS 复制到 Linux 系统的本地文件系统中，命令如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/bigdatacase/dataset</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将 HDFS 上的 user_action 数据复制到本地当前目录，注意<span class="string">&#x27;.&#x27;</span>表示当前目录</span></span><br><span class="line">hdfs dfs -get /user/hive/warehouse/dblab.db/user_action .</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看前 10 行数据</span></span><br><span class="line">cat ./user_action/* | head -10</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1       10001082        285259775       1       4076    2014-12-08      江西</span><br><span class="line">2       10001082        4368907 1       5503    2014-12-12      西藏</span><br><span class="line">3       10001082        4368907 1       5503    2014-12-12      贵州</span><br><span class="line">4       10001082        53616768        1       9762    2014-12-02      广西</span><br><span class="line">5       10001082        151466952       1       5232    2014-12-12      陕西</span><br><span class="line">6       10001082        53616768        4       9762    2014-12-02      河南</span><br><span class="line">7       10001082        290088061       1       5503    2014-12-12      重庆市</span><br><span class="line">8       10001082        298397524       1       10894   2014-12-12      云南</span><br><span class="line">9       10001082        32104252        1       6513    2014-12-12      安徽</span><br><span class="line">10      10001082        323339743       1       10894   2014-12-12      浙江</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">将00000*文件复制一份重命名为user_action.output，*表示通配符</span></span><br><span class="line">cat ./user_action/00000* &gt; user_action.output</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看user_action.output前10行</span></span><br><span class="line">head user_action.output</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">![muyoukule_2024-03-25_10-38-00](./数据互导/muyoukule_2024-03-25_10-38-00.png)1       10001082        285259775       1       4076    2014-12-08      江西</span><br><span class="line">2       10001082        4368907 1       5503    2014-12-12      西藏</span><br><span class="line">3       10001082        4368907 1       5503    2014-12-12      贵州</span><br><span class="line">4       10001082        53616768        1       9762    2014-12-02      广西</span><br><span class="line">5       10001082        151466952       1       5232    2014-12-12      陕西</span><br><span class="line">6       10001082        53616768        4       9762    2014-12-02      河南</span><br><span class="line">7       10001082        290088061       1       5503    2014-12-12      重庆市</span><br><span class="line">8       10001082        298397524       1       10894   2014-12-12      云南</span><br><span class="line">9       10001082        32104252        1       6513    2014-12-12      安徽</span><br><span class="line">10      10001082        323339743       1       10894   2014-12-12      浙江</span><br></pre></td></tr></table></figure>

<p>3、编写数据导入程序</p>
<p>这里采用 IDEA 编写 Java 程序实现 HBase 数据导入功能。</p>
<p>请使用 IDEA 编写 ImportHBase 程序（ Java 代码在本文最后的附录部分），并打包成可执行 jar 包，命名为 ImportHBase.jar。</p>
<p>然后，请在 <code>/usr/local/bigdatacase/</code> 目录下面新建一个 hbase 子目录，用来存放 ImportHBase.jar。</p>
<p>IEDA 打包成可执行 jar 包：</p>
<p>左上角 <code>File</code> –&gt; Project Structure 打开如下界面，点击 <code>Artifacts</code> –&gt; <code>From moudles with dependencies</code> ，然后依次操作：</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/IEDA%20%E6%89%93%E5%8C%85%E6%88%90%E5%8F%AF%E6%89%A7%E8%A1%8C%20jar%20%E5%8C%851.png" style="zoom:50%;">

<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/IEDA%20%E6%89%93%E5%8C%85%E6%88%90%E5%8F%AF%E6%89%A7%E8%A1%8C%20jar%20%E5%8C%852.png" style="zoom:50%;">

<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/IEDA%20%E6%89%93%E5%8C%85%E6%88%90%E5%8F%AF%E6%89%A7%E8%A1%8C%20jar%20%E5%8C%853.png" style="zoom: 50%;">

<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/IEDA%20%E6%89%93%E5%8C%85%E6%88%90%E5%8F%AF%E6%89%A7%E8%A1%8C%20jar%20%E5%8C%854.png"></p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/BigDataIMG/IEDA%20%E6%89%93%E5%8C%85%E6%88%90%E5%8F%AF%E6%89%A7%E8%A1%8C%20jar%20%E5%8C%855.png"></p>
<p>然后就可以在设置的 jar 包输出路径下找到对应 jar 包。</p>
<p>4、数据导入</p>
<p>使用 Java 程序将数据从本地导入 HBase 中，导入前，请先清空 user_action 表。</p>
<p>请在之前已经打开的 HBase Shel l窗口中（也就是在 <code>hbase&gt;</code> 命令提示符下）执行下面操作：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">truncate &#x27;user_action&#x27;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Truncating &#x27;user_action&#x27; table (it may take a while):</span><br><span class="line">Disabling table...</span><br><span class="line">Truncating table...</span><br><span class="line">Took 2.3970 seconds </span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除以后再查看就没有记录了</span></span><br><span class="line">scan &#x27;user_action&#x27;,&#123;LIMIT=&gt;10&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ROW                   COLUMN+CELL                                               </span><br><span class="line">0 row(s)</span><br><span class="line">Took 0.0542 seconds </span><br></pre></td></tr></table></figure>

<p>下面就可以运行 hadoop jar 命令运行程序：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hadoop jar /usr/local/bigdatacase/hbase/ImportHBase.jar HBaseImportTest /usr/local/bigdatacase/dataset/user_action.output</span><br></pre></td></tr></table></figure>

<p>命令解释如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/usr/local/hadoop/bin/hadoop jar  #hadoop jar包执行方式</span><br><span class="line">/usr/local/bigdatacase/hbase/ImportHBase.jar  #jar包的路径</span><br><span class="line">HBaseImportTest   #主函数入口 </span><br><span class="line">/usr/local/bigdatacase/dataset/user_action.output  #main方法接收的参数args，用来指定输入文件的路径</span><br></pre></td></tr></table></figure>

<p>这个命令大概会执行3分钟左右，执行过程中，屏幕上会打印出执行进度，每执行1万条，对打印出一行信息，所以，整个执行过程屏幕上显示如下信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10000</span><br><span class="line">20000</span><br><span class="line">30000</span><br><span class="line">40000</span><br><span class="line">50000</span><br><span class="line">60000</span><br><span class="line">70000</span><br><span class="line">80000</span><br><span class="line">90000</span><br><span class="line">100000</span><br><span class="line">110000</span><br><span class="line">120000</span><br><span class="line">130000</span><br><span class="line">140000</span><br><span class="line">150000</span><br><span class="line">160000</span><br><span class="line">170000</span><br><span class="line">180000</span><br><span class="line">190000</span><br><span class="line">200000</span><br><span class="line">210000</span><br><span class="line">220000</span><br><span class="line">230000</span><br><span class="line">240000</span><br><span class="line">250000</span><br><span class="line">260000</span><br><span class="line">270000</span><br><span class="line">280000</span><br><span class="line">290000</span><br><span class="line">300000</span><br><span class="line">Total Time: 140506 ms</span><br></pre></td></tr></table></figure>

<p>5、查看 HBase 中 user_action 表数据</p>
<p>下面，再次切换到 HBase Shell 窗口，执行下面命令查询数据：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">只查询前面10行</span></span><br><span class="line">scan &#x27;user_action&#x27;,&#123;LIMIT=&gt;10&#125;  </span><br></pre></td></tr></table></figure>

<p>就可以得到类似下面的查询结果了：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ROW                                           COLUMN+CELL                                                                                                                         </span><br><span class="line"> 1                                            column=f1:behavior_type, timestamp=1711334492967, value=1                                                                           </span><br><span class="line"> 1                                            column=f1:date, timestamp=1711334492967, value=2014-12-08                                                                           </span><br><span class="line"> 1                                            column=f1:item_category, timestamp=1711334492967, value=4076                                                                        </span><br><span class="line"> 1                                            column=f1:item_id, timestamp=1711334492967, value=285259775                                                                         </span><br><span class="line"> 1                                            column=f1:province, timestamp=1711334492967, value=\xE6\xB1\x9F\xE8\xA5\xBF                                                         </span><br><span class="line"> 1                                            column=f1:uid, timestamp=1711334492967, value=10001082                                                                              </span><br><span class="line"> 10                                           column=f1:behavior_type, timestamp=1711334493000, value=1                                                                           </span><br><span class="line"> 10                                           column=f1:date, timestamp=1711334493000, value=2014-12-12                                                                           </span><br><span class="line"> 10                                           column=f1:item_category, timestamp=1711334493000, value=10894                                                                       </span><br><span class="line"> 10                                           column=f1:item_id, timestamp=1711334493000, value=323339743                                                                         </span><br><span class="line"> 10                                           column=f1:province, timestamp=1711334493000, value=\xE6\xB5\x99\xE6\xB1\x9F                                                         </span><br><span class="line"> 10                                           column=f1:uid, timestamp=1711334493000, value=10001082                                                                              </span><br><span class="line"> 100                                          column=f1:behavior_type, timestamp=1711334493295, value=1                                                                           </span><br><span class="line"> 100                                          column=f1:date, timestamp=1711334493295, value=2014-12-02                                                                           </span><br><span class="line"> 100                                          column=f1:item_category, timestamp=1711334493295, value=10576                                                                       </span><br><span class="line"> 100                                          column=f1:item_id, timestamp=1711334493295, value=275221686                                                                         </span><br><span class="line"> 100                                          column=f1:province, timestamp=1711334493295, value=\xE9\xBB\x91\xE9\xBE\x99\xE6\xB1\x9F                                             </span><br><span class="line"> 100                                          column=f1:uid, timestamp=1711334493295, value=10001082                                                                              </span><br><span class="line"> 1000                                         column=f1:behavior_type, timestamp=1711334494583, value=1                                                                           </span><br><span class="line"> 1000                                         column=f1:date, timestamp=1711334494583, value=2014-12-02                                                                           </span><br><span class="line"> 1000                                         column=f1:item_category, timestamp=1711334494583, value=3381                                                                        </span><br><span class="line"> 1000                                         column=f1:item_id, timestamp=1711334494583, value=168463559                                                                         </span><br><span class="line"> 1000                                         column=f1:province, timestamp=1711334494583, value=\xE9\xA6\x99\xE6\xB8\xAF                                                         </span><br><span class="line"> 1000                                         column=f1:uid, timestamp=1711334494583, value=100068031                                                                             </span><br><span class="line"> 10000                                        column=f1:behavior_type, timestamp=1711334500210, value=1                                                                           </span><br><span class="line"> 10000                                        column=f1:date, timestamp=1711334500210, value=2014-12-05                                                                           </span><br><span class="line"> 10000                                        column=f1:item_category, timestamp=1711334500210, value=12488                                                                       </span><br><span class="line"> 10000                                        column=f1:item_id, timestamp=1711334500210, value=45571867                                                                          </span><br><span class="line"> 10000                                        column=f1:province, timestamp=1711334500210, value=\xE6\x96\xB0\xE7\x96\x86                                                         </span><br><span class="line"> 10000                                        column=f1:uid, timestamp=1711334500210, value=100198255                                                                             </span><br><span class="line"> 100000                                       column=f1:behavior_type, timestamp=1711334543592, value=1                                                                           </span><br><span class="line"> 100000                                       column=f1:date, timestamp=1711334543592, value=2014-11-29                                                                           </span><br><span class="line"> 100000                                       column=f1:item_category, timestamp=1711334543592, value=6580                                                                        </span><br><span class="line"> 100000                                       column=f1:item_id, timestamp=1711334543592, value=78973192                                                                          </span><br><span class="line"> 100000                                       column=f1:province, timestamp=1711334543592, value=\xE5\xA4\xA9\xE6\xB4\xA5\xE5\xB8\x82                                             </span><br><span class="line"> 100000                                       column=f1:uid, timestamp=1711334543592, value=101480065                                                                             </span><br><span class="line"> 100001                                       column=f1:behavior_type, timestamp=1711334543592, value=1                                                                           </span><br><span class="line"> 100001                                       column=f1:date, timestamp=1711334543592, value=2014-12-15                                                                           </span><br><span class="line"> 100001                                       column=f1:item_category, timestamp=1711334543592, value=3472                                                                        </span><br><span class="line"> 100001                                       column=f1:item_id, timestamp=1711334543592, value=34929314                                                                          </span><br><span class="line"> 100001                                       column=f1:province, timestamp=1711334543592, value=\xE5\xB9\xBF\xE8\xA5\xBF                                                         </span><br><span class="line"> 100001                                       column=f1:uid, timestamp=1711334543592, value=101480065                                                                             </span><br><span class="line"> 100002                                       column=f1:behavior_type, timestamp=1711334543593, value=1                                                                           </span><br><span class="line"> 100002                                       column=f1:date, timestamp=1711334543593, value=2014-11-29                                                                           </span><br><span class="line"> 100002                                       column=f1:item_category, timestamp=1711334543593, value=10392                                                                       </span><br><span class="line"> 100002                                       column=f1:item_id, timestamp=1711334543593, value=401104894                                                                         </span><br><span class="line"> 100002                                       column=f1:province, timestamp=1711334543593, value=\xE5\x8C\x97\xE4\xBA\xAC\xE5\xB8\x82                                             </span><br><span class="line"> 100002                                       column=f1:uid, timestamp=1711334543593, value=101480065                                                                             </span><br><span class="line"> 100003                                       column=f1:behavior_type, timestamp=1711334543593, value=1                                                                           </span><br><span class="line"> 100003                                       column=f1:date, timestamp=1711334543593, value=2014-12-04                                                                           </span><br><span class="line"> 100003                                       column=f1:item_category, timestamp=1711334543593, value=5894                                                                        </span><br><span class="line"> 100003                                       column=f1:item_id, timestamp=1711334543593, value=217913901                                                                         </span><br><span class="line"> 100003                                       column=f1:province, timestamp=1711334543593, value=\xE7\x94\x98\xE8\x82\x83                                                         </span><br><span class="line"> 100003                                       column=f1:uid, timestamp=1711334543593, value=101480065                                                                             </span><br><span class="line"> 100004                                       column=f1:behavior_type, timestamp=1711334543593, value=1                                                                           </span><br><span class="line"> 100004                                       column=f1:date, timestamp=1711334543593, value=2014-11-26                                                                           </span><br><span class="line"> 100004                                       column=f1:item_category, timestamp=1711334543593, value=12189                                                                       </span><br><span class="line"> 100004                                       column=f1:item_id, timestamp=1711334543593, value=295053167                                                                         </span><br><span class="line"> 100004                                       column=f1:province, timestamp=1711334543593, value=\xE6\xB9\x96\xE5\x8C\x97                                                         </span><br><span class="line"> 100004                                       column=f1:uid, timestamp=1711334543593, value=101480065                                                                             </span><br><span class="line">10 row(s)</span><br><span class="line">Took 0.2652 seconds </span><br></pre></td></tr></table></figure>

<p>实验顺利结束！</p>
<h1 id="附录：ImportHBase-java"><a href="#附录：ImportHBase-java" class="headerlink" title="附录：ImportHBase.java"></a>附录：ImportHBase.java</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.muyoukule;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.Cell;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.HBaseConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.TableName;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.client.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.util.Bytes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HBaseImportTest</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Configuration config;</span><br><span class="line">    <span class="keyword">public</span> Table table;</span><br><span class="line">    <span class="keyword">public</span> HBaseAdmin admin;</span><br><span class="line">    <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> ConnectionFactory.createConnection();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HBaseImportTest</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        config = HBaseConfiguration.create();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            table = connection.getTable(TableName.valueOf(<span class="string">&quot;user_action&quot;</span>));</span><br><span class="line">            <span class="comment">// 根据配置创建连接</span></span><br><span class="line">            connection = ConnectionFactory.createConnection(config);</span><br><span class="line">            <span class="comment">// 获取Admin实例</span></span><br><span class="line">            admin = (HBaseAdmin) connection.getAdmin();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span> (args.length == <span class="number">0</span>) &#123;       <span class="comment">//第一个参数是该jar所使用的类，第二个参数是数据集所存放的路径</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;You must set input path!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> args[args.length - <span class="number">1</span>];  <span class="comment">//输入的文件路径是最后一个参数</span></span><br><span class="line">        <span class="type">HBaseImportTest</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HBaseImportTest</span>();</span><br><span class="line">        test.importLocalFileToHBase(fileName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    /usr/local/bigdatacase/dataset/user_action.output</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">importLocalFileToHBase</span><span class="params">(String fileName)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">st</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            br = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(Files.newInputStream(Paths.get(fileName))));</span><br><span class="line">            <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> ((line = br.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                count++;</span><br><span class="line">                put(line);</span><br><span class="line">                <span class="keyword">if</span> (count % <span class="number">10000</span> == <span class="number">0</span>)</span><br><span class="line">                    System.out.println(count);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (br != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    br.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                table.close(); <span class="comment">// must close the client</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">en2</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;Total Time: &quot;</span> + (en2 - st) + <span class="string">&quot; ms&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;deprecation&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(String line)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        String[] arr = line.split(<span class="string">&quot;\t&quot;</span>, -<span class="number">1</span>);</span><br><span class="line">        String[] column = &#123;<span class="string">&quot;id&quot;</span>, <span class="string">&quot;uid&quot;</span>, <span class="string">&quot;item_id&quot;</span>, <span class="string">&quot;behavior_type&quot;</span>, <span class="string">&quot;item_category&quot;</span>, <span class="string">&quot;date&quot;</span>, <span class="string">&quot;province&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (arr.length == <span class="number">7</span>) &#123;</span><br><span class="line">            <span class="type">Put</span> <span class="variable">put</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Put</span>(Bytes.toBytes(arr[<span class="number">0</span>]));<span class="comment">// rowkey</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">                put.addColumn(Bytes.toBytes(<span class="string">&quot;f1&quot;</span>), Bytes.toBytes(column[i]), Bytes.toBytes(arr[i]));</span><br><span class="line">            &#125;</span><br><span class="line">            table.put(put); <span class="comment">// put to server</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">get</span><span class="params">(String rowkey, String columnFamily, String column,</span></span><br><span class="line"><span class="params">                    <span class="type">int</span> versions)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">st</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="type">Get</span> <span class="variable">get</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Get</span>(Bytes.toBytes(rowkey));</span><br><span class="line">        get.addColumn(Bytes.toBytes(columnFamily), Bytes.toBytes(column));</span><br><span class="line"></span><br><span class="line">        <span class="type">Scan</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scan</span>(get);</span><br><span class="line">        scanner.setMaxVersions(versions);</span><br><span class="line"></span><br><span class="line">        <span class="type">ResultScanner</span> <span class="variable">rsScanner</span> <span class="operator">=</span> table.getScanner(scanner);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Result result : rsScanner) &#123;</span><br><span class="line">            <span class="keyword">final</span> List&lt;Cell&gt; list = result.listCells();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">final</span> Cell kv : list) &#123;</span><br><span class="line">                System.out.println(Bytes.toStringBinary(kv.getValueArray()) + <span class="string">&quot;\t&quot;</span></span><br><span class="line">                        + kv.getTimestamp()); <span class="comment">// mid + time</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        rsScanner.close();</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">en2</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;Total Time: &quot;</span> + (en2 - st) + <span class="string">&quot; ms&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>BigData</category>
      </categories>
      <tags>
        <tag>Hadoop</tag>
        <tag>Hive</tag>
        <tag>MySQL</tag>
        <tag>HBase</tag>
        <tag>Sqoop</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis-Plus</title>
    <url>/posts/Mybatis-Plus/</url>
    <content><![CDATA[<p>MyBatis-Plus官网 1 ：<a href="https://baomidou.com/">https://baomidou.com/</a></p>
<p>MyBatis-Plus官网 2：<a href="https://mybatis.plus/">https://mybatis.plus/</a></p>
<h1 id="1-MyBatis-Plus-概述"><a href="#1-MyBatis-Plus-概述" class="headerlink" title="1. MyBatis-Plus 概述"></a>1. MyBatis-Plus 概述</h1><h2 id="1-1-为什么要学？"><a href="#1-1-为什么要学？" class="headerlink" title="1.1 为什么要学？"></a>1.1 为什么要学？</h2><p><del>MyBatis-Plus只需简单配置即可快速进行单表 CRUD 操作，简单的 CRUD 操作不再需要我们书写。（肯定不是因为这个）</del></p>
<p>MyBatis-Plus 由国人开发，文档很详细易上手，编码符合国人习惯，并且已连续 5 年（2017、2018 、2019、2020、2021）获得”OSC 年度最受欢迎中国开源软件”殊荣。最最最重要的是官方为我们提供了自动生成代码的代码生成器…真的是太贴心了！！🤩这不就相当于是别人都把饭喂你嘴里了吗？你还有什么理由不吃呢？😂</p>
<p><strong>PS：本文中，MP 是 MyBatis-Plus 的简写。</strong></p>
<h2 id="1-2-简介"><a href="#1-2-简介" class="headerlink" title="1.2 简介"></a>1.2 简介</h2><p><a href="https://github.com/baomidou/mybatis-plus">MyBatis-Plus</a>（简称 MP）是一个 <a href="https://www.mybatis.org/mybatis-3/">MyBatis</a> 的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/MyBatisPlus/MyBatis-Plus%E7%AE%80%E4%BB%8B.png" alt="MyBatis-Plus简介"></p>
<p>从这张图中我们可以看出 MP 旨在成为 MyBatis 的最好搭档，而不是替换 MyBatis ，所以可以理解为 MP 是 MyBatis 的一套增强工具，它是在 MyBatis 的基础上进行开发的，我们虽然使用 MP 但是底层依然是 MyBatis 的东西，也就是说我们也可以在 MP 中写 MyBatis 的内容。</p>
<p><strong>PS：使用 MP 可以节省代码的编写，尽量 <font color="red">不要同时</font> 导入 MP 和 MyBatis，避免存在依赖错误。</strong></p>
<h2 id="1-3-特性"><a href="#1-3-特性" class="headerlink" title="1.3 特性"></a>1.3 特性</h2><ul>
<li><strong>无侵入</strong>：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑</li>
<li><strong>损耗小</strong>：启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作</li>
<li><strong>强大的 CRUD 操作</strong>：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求（  <font color="red">言外之意，简单的 CRUD 操作不再需要我们书写</font>  ）</li>
<li><strong>支持 Lambda 形式调用</strong>：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错</li>
<li><strong>支持主键自动生成</strong>：支持多达 4 种主键策略(内含分布式唯一 ID 生成器 - Sequence)，可自由配置，完美解决主键问题</li>
<li><strong>支持 ActiveRecord 模式</strong>：支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作</li>
<li><strong>支持自定义全局通用操作</strong>：支持全局通用方法注入( Write once, use anywhere )</li>
<li><strong>内置代码生成器</strong>：采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用</li>
<li><strong>内置分页插件</strong>：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询</li>
<li><strong>分页插件支持多种数据库</strong>：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer 等多种数据库</li>
<li><strong>内置性能分析插件</strong>：可输出 SQL 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询</li>
<li><strong>内置全局拦截插件</strong>：提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作</li>
</ul>
<h1 id="2-快速开始"><a href="#2-快速开始" class="headerlink" title="2. 快速开始"></a>2. 快速开始</h1><p>接下来将通过一个简单的 Demo 来阐述 MP 的强大功能，在此之前，假设你已经：</p>
<ul>
<li>拥有 Java 开发环境以及相应 IDE</li>
<li>熟悉 Spring Boot</li>
<li>熟悉 Maven</li>
</ul>
<h2 id="2-1-环境准备"><a href="#2-1-环境准备" class="headerlink" title="2.1 环境准备"></a>2.1 环境准备</h2><p>现有一张 <code>User</code> 表，其表结构如下：</p>
<table>
<thead>
<tr>
<th align="center">id</th>
<th align="center">name</th>
<th align="center">age</th>
<th align="center">email</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">Jone</td>
<td align="center">18</td>
<td align="center"><a href="mailto:&#116;&#101;&#115;&#116;&#x31;&#x40;&#x62;&#97;&#x6f;&#x6d;&#105;&#100;&#x6f;&#117;&#46;&#x63;&#x6f;&#109;">&#116;&#101;&#115;&#116;&#x31;&#x40;&#x62;&#97;&#x6f;&#x6d;&#105;&#100;&#x6f;&#117;&#46;&#x63;&#x6f;&#109;</a></td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">Jack</td>
<td align="center">20</td>
<td align="center"><a href="mailto:&#x74;&#101;&#x73;&#x74;&#50;&#64;&#98;&#x61;&#111;&#x6d;&#x69;&#100;&#111;&#x75;&#x2e;&#x63;&#111;&#x6d;">&#x74;&#101;&#x73;&#x74;&#50;&#64;&#98;&#x61;&#111;&#x6d;&#x69;&#100;&#111;&#x75;&#x2e;&#x63;&#111;&#x6d;</a></td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">Tom</td>
<td align="center">28</td>
<td align="center"><a href="mailto:&#x74;&#x65;&#x73;&#x74;&#x33;&#64;&#x62;&#x61;&#x6f;&#x6d;&#x69;&#x64;&#111;&#x75;&#x2e;&#x63;&#x6f;&#x6d;">&#x74;&#x65;&#x73;&#x74;&#x33;&#64;&#x62;&#x61;&#x6f;&#x6d;&#x69;&#x64;&#111;&#x75;&#x2e;&#x63;&#x6f;&#x6d;</a></td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">Sandy</td>
<td align="center">21</td>
<td align="center"><a href="mailto:&#x74;&#101;&#115;&#x74;&#x34;&#x40;&#98;&#x61;&#x6f;&#109;&#105;&#100;&#111;&#x75;&#x2e;&#x63;&#x6f;&#109;">&#x74;&#101;&#115;&#x74;&#x34;&#x40;&#98;&#x61;&#x6f;&#109;&#105;&#100;&#111;&#x75;&#x2e;&#x63;&#x6f;&#109;</a></td>
</tr>
<tr>
<td align="center">5</td>
<td align="center">Billie</td>
<td align="center">24</td>
<td align="center"><a href="mailto:&#x74;&#x65;&#115;&#116;&#x35;&#64;&#x62;&#x61;&#x6f;&#109;&#105;&#100;&#x6f;&#x75;&#x2e;&#x63;&#111;&#x6d;">&#x74;&#x65;&#115;&#116;&#x35;&#64;&#x62;&#x61;&#x6f;&#109;&#105;&#100;&#x6f;&#x75;&#x2e;&#x63;&#111;&#x6d;</a></td>
</tr>
</tbody></table>
<blockquote>
<p>步骤</p>
</blockquote>
<p>1、创建一个数据库 <code>mybatis_plus</code></p>
<p>2、创建 user 表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `<span class="keyword">user</span>`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>`</span><br><span class="line">(</span><br><span class="line">    id <span class="type">BIGINT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">    age <span class="type">INT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">    email <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;邮箱&#x27;</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> `<span class="keyword">user</span>`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>` (id, name, age, email) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>, <span class="string">&#x27;Jone&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;test1@baomidou.com&#x27;</span>),</span><br><span class="line">(<span class="number">2</span>, <span class="string">&#x27;Jack&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;test2@baomidou.com&#x27;</span>),</span><br><span class="line">(<span class="number">3</span>, <span class="string">&#x27;Tom&#x27;</span>, <span class="number">28</span>, <span class="string">&#x27;test3@baomidou.com&#x27;</span>),</span><br><span class="line">(<span class="number">4</span>, <span class="string">&#x27;Sandy&#x27;</span>, <span class="number">21</span>, <span class="string">&#x27;test4@baomidou.com&#x27;</span>),</span><br><span class="line">(<span class="number">5</span>, <span class="string">&#x27;Billie&#x27;</span>, <span class="number">24</span>, <span class="string">&#x27;test5@baomidou.com&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/MyBatisPlus/%E5%88%9B%E5%BB%BAUser%E8%A1%A8.png" alt="创建User表"></p>
<p>3、使用 IDEA 初始化一个 SpringBoot 项目 mybatis_plus，选择 Spring Web 和 Lombok 依赖进行导入。</p>
<p>4、导入其他依赖</p>
<p>由于这个 <code>mybatis-plus-boot-starter</code> 包含对 Mybatis 的自动装配，因此完全可以替换掉 Mybatis 的 starter 。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--数据库驱动--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.31<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--mybatis-plus--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><font color="red"><strong>PS：注意 SpringBoot 版本要与 Mybatis-Plus 版本相对应</strong></font></p>
<p>5、编写配置文件 <code>application.yml</code> 连接数据库</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">datasource:</span></span><br><span class="line">  <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mybatis_plus?serverTimezone=Asia/Shanghai&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;zeroDateTimeBehavior=convertToNull&amp;useSSL=false&amp;allowPublicKeyRetrieval=true</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">root</span></span><br></pre></td></tr></table></figure>

<p>6、编写实体类 <code>User.java</code> (此处使用了 <a href="https://www.projectlombok.org/">Lombok</a> 简化代码)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@TableName(&quot;`user`&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>7、编写 Mapper 包下的 <code>UserMapper</code>接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>8、在 Spring Boot 启动类中添加 <code>@MapperScan</code> 注解，扫描 Mapper 文件夹：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">// 扫描 mapper 文件夹</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.muyoukule.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(MybatisPlusApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-2-标准CRUD使用"><a href="#2-2-标准CRUD使用" class="headerlink" title="2.2 标准CRUD使用"></a>2.2 标准CRUD使用</h2><p>对于标准的 CRUD 功能 MP 都提供了哪些方法可以使用呢？</p>
<blockquote>
<p>新增 Insert</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 插入一条记录</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">insert</span><span class="params">(T t)</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>T：泛型，新增用来保存新增数据</p>
</li>
<li><p>int：返回值，新增成功后返回1，没有新增成功返回的是0</p>
</li>
</ul>
<p>在测试类中进行新增操作：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MybatisPlusApplicationTests</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testSave</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        <span class="comment">// 注意：这里没有插入id</span></span><br><span class="line">        user.setName(<span class="string">&quot;木又枯了&quot;</span>);</span><br><span class="line">        user.setAge(<span class="number">18</span>);</span><br><span class="line">        user.setEmail(<span class="string">&quot;example@gmail.com&quot;</span>);</span><br><span class="line">        <span class="comment">// 受影响的行数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> userMapper.insert(user);</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>控制台结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure>

<p>说明数据插入成功，这时候到数据库中查看，数据库表中就会添加一条数据：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/MyBatisPlus/%E6%8F%92%E5%85%A5%E4%B8%80%E6%9D%A1%E6%95%B0%E6%8D%AE.png" alt="插入一条数据"></p>
<p>但是我们发现：我们明明没有设置 ID，插入时居然自动生成了 ID，而且生成的 ID 似乎有点 “ 奇怪 ”。那这个主键 ID 是如何来的？我们更想要的是主键自增，应该是 6 才对，这个是我们后面要学习的 <strong>主键生成策略</strong>，这块的这个问题，我们暂时先放放。</p>
<blockquote>
<p>删除 Delete</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">deleteById</span> <span class="params">(Serializable id)</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Serializable：参数类型</li>
<li>int：返回值类型，数据删除成功返回 1，未删除数据返回 0</li>
</ul>
<p>思考：参数类型为什么是一个序列化类？</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/MyBatisPlus/Serializable%E5%85%B3%E7%B3%BB%E5%9B%BE.png" alt="Serializable关系图" style="zoom:67%;">

<p>从这张图可以看出：</p>
<ul>
<li>String 和 Number 是 Serializable 的子类</li>
<li>Number 又是 Float，Double，Integer 等类的父类</li>
<li>能作为主键的数据类型都已经是 Serializable 的子类</li>
<li>MP 使用 Serializable 作为参数类型，就好比我们可以用 Object 接收任何数据类型一样。</li>
</ul>
<p>在测试类中进行删除操作：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testDelete</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> userMapper.deleteById(<span class="number">1775096675078713345L</span>);</span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>控制台结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure>

<p>说明数据删除入成功，这时候到数据库中查看，数据库表中 ID 为 <code>1775096675078713345</code> 的数据就会被删除：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/MyBatisPlus/%E5%88%A0%E9%99%A4%E4%B8%80%E6%9D%A1%E6%95%B0%E6%8D%AE.png" alt="删除一条数据"></p>
<blockquote>
<p>修改 Update</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">updateById</span><span class="params">(T t)</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>T：泛型，需要修改的数据内容，注意因为是根据 ID 进行修改，所以传入的对象中需要有 ID 属性值</p>
</li>
<li><p>int：返回值，修改成功后返回 1，未修改数据返回 0</p>
</li>
</ul>
<p>在测试类中进行修改操作：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testUpdate</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setId(<span class="number">1L</span>);</span><br><span class="line">    user.setName(<span class="string">&quot;Jone001&quot;</span>);</span><br><span class="line">    user.setAge(<span class="number">20</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> userMapper.updateById(user);</span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>控制台结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure>

<p>说明数据修改成功，这时候到数据库中查看，发现修改成功：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/MyBatisPlus/%E4%BF%AE%E6%94%B9%E4%B8%80%E6%9D%A1%E6%95%B0%E6%8D%AE.png" alt="修改一条数据"></p>
<blockquote>
<p>查询 Select</p>
</blockquote>
<p><strong>根据 ID 查询</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">T <span class="title function_">selectById</span> <span class="params">(Serializable id)</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Serializable：参数类型，主键 ID 的值</li>
<li>T：根据 ID 查询只会返回一条数据</li>
</ul>
<p>在测试类中进行查询操作：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testSelectById</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectById(<span class="number">1L</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">User(id=1, name=Jone001, age=20, email=test1@baomidou.com)</span><br></pre></td></tr></table></figure>

<p><strong>查询所有</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;T&gt; <span class="title function_">selectList</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Wrapper：用来构建条件查询的条件，目前我们没有可直接传为 Null</li>
<li>List<T>：因为查询的是所有，所以返回的数据是一个集合</T></li>
</ul>
<p>在测试类中进行查询操作：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testSelectAll</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;User&gt; userList = userMapper.selectList(<span class="literal">null</span>);</span><br><span class="line">    userList.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>控制台输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">User(id=1, name=Jone001, age=20, email=test1@baomidou.com)</span><br><span class="line">User(id=2, name=Jack, age=20, email=test2@baomidou.com)</span><br><span class="line">User(id=3, name=Tom, age=28, email=test3@baomidou.com)</span><br><span class="line">User(id=4, name=Sandy, age=21, email=test4@baomidou.com)</span><br><span class="line">User(id=5, name=Billie, age=24, email=test5@baomidou.com)</span><br></pre></td></tr></table></figure>

<p>通过以上几个简单的步骤，我们就实现了 User 表的 CRUD 功能，甚至连 XML 文件都不用编写！</p>
<p>上面我们只是继承了 BaseMapper 就省去所有的单表 CRUD，怎么实现的呢？</p>
<p>当然是 <code>BaseMapper </code> 接口其中已经实现了单表的 CRUD：</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/MyBatisPlus/BaseMapper%E6%8E%A5%E5%8F%A3.png" alt="BaseMapper接口" style="zoom:67%;">

<p>因此我们自定义的 Mapper 只要实现了这个 <code>BaseMapper</code>，就无需自己实现单表 CRUD 了。</p>
<h1 id="3-配置日志"><a href="#3-配置日志" class="headerlink" title="3. 配置日志"></a>3. 配置日志</h1><p>使用 MP 后，部分 SQL 是不可见的，我们希望知道它是如何执行的，这个时候就需要查看日志！</p>
<p>在配置文件中进行配置：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure>

<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/MyBatisPlus/MP%E9%85%8D%E7%BD%AE%E6%97%A5%E5%BF%97%E4%BF%A1%E6%81%AF.png" alt="MP配置日志信息" style="zoom: 67%;">

<p>配置日志后，在以后的学习中，我们可以查看日志，观察 MP 的 SQL 执行。</p>
<h1 id="4-常见注解"><a href="#4-常见注解" class="headerlink" title="4. 常见注解"></a>4. 常见注解</h1><p>在刚刚的入门案例中，我们仅仅引入了依赖，继承了 BaseMapper 就能使用 MP ，非常简单。</p>
<p>但是问题来了： MP 如何知道我们要查询的是哪张表？表中有哪些字段呢？</p>
<p>大家回忆一下，UserMapper 在继承BaseMapper 的时候指定了一个泛型 <code>User</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>泛型中的 User 就是与数据库对应的 PO。</p>
<p>MP 就是根据 PO实体的信息来推断出表的信息，从而生成 SQL 的。默认情况下：</p>
<ul>
<li>MP 会把 PO 实体的类名驼峰转下划线作为表名</li>
<li>MP 会把 PO 实体的所有变量名驼峰转下划线作为表的字段名，并根据变量类型推断字段类型</li>
<li>MP 会把名为 ID 的字段作为主键</li>
</ul>
<p>但很多情况下，默认的实现与实际场景不符，因此 MP 提供了一些注解便于我们声明表信息。</p>
<h2 id="4-1-TableName"><a href="#4-1-TableName" class="headerlink" title="4.1 @TableName"></a>4.1 @TableName</h2><ul>
<li>描述：表名注解，标识实体类对应的表</li>
<li>使用位置：实体类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TableName(&quot;sys_user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>TableName 注解除了指定表名以外，还可以指定很多其它属性：</p>
<table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">类型</th>
<th align="center">必须指定</th>
<th align="center">默认值</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">value</td>
<td align="center">String</td>
<td align="center">否</td>
<td align="center">“”</td>
<td align="center">表名</td>
</tr>
<tr>
<td align="center">schema</td>
<td align="center">String</td>
<td align="center">否</td>
<td align="center">“”</td>
<td align="center">schema</td>
</tr>
<tr>
<td align="center">keepGlobalPrefix</td>
<td align="center">boolean</td>
<td align="center">否</td>
<td align="center">false</td>
<td align="center">是否保持使用全局的 tablePrefix 的值（当全局 tablePrefix 生效时）</td>
</tr>
<tr>
<td align="center">resultMap</td>
<td align="center">String</td>
<td align="center">否</td>
<td align="center">“”</td>
<td align="center">xml 中 resultMap 的 id（用于满足特定类型的实体类对象绑定）</td>
</tr>
<tr>
<td align="center">autoResultMap</td>
<td align="center">boolean</td>
<td align="center">否</td>
<td align="center">false</td>
<td align="center">是否自动构建 resultMap 并使用（如果设置 resultMap 则不会进行 resultMap 的自动构建与注入）</td>
</tr>
<tr>
<td align="center">excludeProperty</td>
<td align="center">String[]</td>
<td align="center">否</td>
<td align="center">{}</td>
<td align="center">需要排除的属性名 @since 3.3.1</td>
</tr>
</tbody></table>
<h2 id="4-2-TableId"><a href="#4-2-TableId" class="headerlink" title="4.2 @TableId"></a>4.2 @TableId</h2><ul>
<li>描述：主键注解</li>
<li>使用位置：实体类主键字段</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TableName(&quot;sys_user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@TableId</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>TableId </code>注解支持两个属性：</p>
<table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">类型</th>
<th align="center">必须指定</th>
<th align="center">默认值</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">value</td>
<td align="center">String</td>
<td align="center">否</td>
<td align="center">“”</td>
<td align="center">表名</td>
</tr>
<tr>
<td align="center">type</td>
<td align="center">Enum</td>
<td align="center">否</td>
<td align="center">IdType.NONE</td>
<td align="center">指定主键类型</td>
</tr>
</tbody></table>
<p><code>IdType </code>支持的类型有：</p>
<table>
<thead>
<tr>
<th align="center">值</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">AUTO</td>
<td align="center">数据库 ID 自增</td>
</tr>
<tr>
<td align="center">NONE</td>
<td align="center">无状态，该类型为未设置主键类型（注解里等于跟随全局，全局里约等于 INPUT）</td>
</tr>
<tr>
<td align="center">INPUT</td>
<td align="center">insert 前自行 set 主键值</td>
</tr>
<tr>
<td align="center">ASSIGN_ID</td>
<td align="center">分配 ID(主键类型为 Number(Long 和 Integer)或 String)(since 3.3.0),使用接口IdentifierGenerator的方法nextId(默认实现类为DefaultIdentifierGenerator雪花算法)</td>
</tr>
<tr>
<td align="center">ASSIGN_UUID</td>
<td align="center">分配 UUID,主键类型为 String(since 3.3.0),使用接口IdentifierGenerator的方法nextUUID(默认 default 方法)</td>
</tr>
<tr>
<td align="center"><del>ID_WORKER</del></td>
<td align="center">分布式全局唯一 ID 长整型类型(please use ASSIGN_ID)</td>
</tr>
<tr>
<td align="center"><del>UUID</del></td>
<td align="center">32 位 UUID 字符串(please use ASSIGN_UUID)</td>
</tr>
<tr>
<td align="center"><del>ID_WORKER_STR</del></td>
<td align="center">分布式全局唯一 ID 字符串类型(please use ASSIGN_ID)</td>
</tr>
</tbody></table>
<p>这里比较常见的有三种：</p>
<ul>
<li><code>ASSIGN_ID</code>：雪花算法生成<code>Long</code>类型的全局唯一ID，这是 MP <strong>默认</strong>的 ID 策略</li>
<li><code>AUTO</code>：利用数据库的ID自增长</li>
<li><code>INPUT</code>：手动生成ID</li>
</ul>
<h3 id="4-2-1-主键生成策略"><a href="#4-2-1-主键生成策略" class="headerlink" title="4.2.1 主键生成策略"></a>4.2.1 主键生成策略</h3><blockquote>
<p>雪花算法</p>
</blockquote>
<p>雪花算法(Snowflake)是 Twitter 开源的一种分布式ID生成算法，其生成的 ID 具有全局唯一性。这种算法的核心思想是将 64 位的 Long 型 ID 分为四个部分：时间戳、工作机器ID、数据中心ID和序列号。</p>
<p>在上面我们进行数据插入的时候，由于未对主键生成策略进行配置，而 MP <strong>默认</strong>采用的使用 Twitter 的 <code>雪花算法</code>。所以才会看到生成了一长串数字作为 ID。</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/MyBatisPlus/%E6%8F%92%E5%85%A5%E4%B8%80%E6%9D%A1%E6%95%B0%E6%8D%AE.png" alt="插入一条数据"></p>
<blockquote>
<p>利用数据库的 ID 自增长</p>
</blockquote>
<p>1、实体类中表示组件的属性上添加注解：<code>@TableId(type = IdType.AUTO)</code></p>
<p>2、 <font color="red">数据库字段一定设置为自增</font>😀</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/MyBatisPlus/%E8%AE%BE%E7%BD%AE%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%97%E6%AE%B5%E4%B8%BA%E8%87%AA%E5%A2%9E.png" alt="设置数据库字段为自增" style="zoom:67%;">

<p>3、再次运行插入测试：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/MyBatisPlus/ID%E8%87%AA%E5%A2%9E%E9%95%BF%E6%8F%92%E5%85%A5%E6%95%B0%E6%8D%AE.png" alt="ID自增长插入数据"></p>
<blockquote>
<p>手动生成 ID</p>
</blockquote>
<p>1、实体类中表示组件的属性上添加注解：<code>@TableId(type = IdType.INPUT)</code></p>
<p>2、修改测试类，手动设置 ID</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testSave</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setId(<span class="number">6L</span>); <span class="comment">// 手动设置 ID</span></span><br><span class="line">    user.setName(<span class="string">&quot;木又枯了&quot;</span>);</span><br><span class="line">    user.setAge(<span class="number">18</span>);</span><br><span class="line">    user.setEmail(<span class="string">&quot;example@gmail.com&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> userMapper.insert(user);</span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><font color="red">PS：如果我们设置组件生成策略为手动输入 ，但是没有输入，这个时候日志就会显示插入的是 <code>null</code>，但是数据库中也会插入一条 ID 自增的记录</font></p>
<p>3、再次运行插入测试：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/MyBatisPlus/%E6%89%8B%E5%8A%A8%E7%94%9F%E6%88%90ID%E6%8F%92%E5%85%A5%E6%95%B0%E6%8D%AE.png" alt="手动生成ID插入数据"></p>
<h2 id="4-3-TableField"><a href="#4-3-TableField" class="headerlink" title="4.3 @TableField"></a>4.3 @TableField</h2><ul>
<li>描述：字段注解(非主键)</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TableName(&quot;sys_user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@TableId</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="meta">@TableField(&quot;nickname&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一般情况下我们并不需要给字段添加 <code>@TableField</code> 注解，一些特殊情况除外：</p>
<ul>
<li>成员变量名与数据库字段名不一致</li>
<li>成员变量是以 <code>isXXX</code> 命名，按照 <code>JavaBean</code> 的规范，<code>MP </code>识别字段时会把 <code>is</code> 去除，这就导致与数据库不符。</li>
<li>成员变量名与数据库一致，但是与数据库的关键字冲突。使用 <code>@TableField</code> 注解给字段名添加转义字符：<code>``</code></li>
</ul>
<p>更多支持的其它属性如下请参考官方文档：<a href="https://baomidou.com/pages/223848/#tablefield">@Tablefield注解</a></p>
<h1 id="5-常见配置"><a href="#5-常见配置" class="headerlink" title="5. 常见配置"></a>5. 常见配置</h1><p>MP 也支持基于 yml 文件的自定义配置，详见官方文档：<a href="https://www.baomidou.com/pages/56bac0/">使用配置</a></p>
<p>大多数的配置都有默认值，因此我们都无需配置。但还有一些是没有默认值的，例如:</p>
<ul>
<li>实体类的别名扫描包</li>
<li>全局 ID 类型</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.muyoukule.entity</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">auto</span> <span class="comment"># 全局id类型为自增长</span></span><br></pre></td></tr></table></figure>

<p>需要注意的是，MP 也支持手写 SQL 的，而 mapper 文件的读取地址可以自己配置：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">&quot;classpath*:/mapper/**/*.xml&quot;</span> <span class="comment"># Mapper.xml文件地址，当前这个是默认值。</span></span><br></pre></td></tr></table></figure>

<p>可以看到默认值是 <code>classpath*:/mapper/**/*.xml</code>，也就是说我们只要把 mapper.xml 文件放置这个目录下就一定会被加载。</p>
<h1 id="6-条件构造器"><a href="#6-条件构造器" class="headerlink" title="6. 条件构造器"></a>6. 条件构造器</h1><p>除了新增以外，修改、删除、查询的SQL语句都需要指定 where 条件。因此 BaseMapper 中提供的相关方法除了以 <code>id</code> 作为 <code>where</code> 条件以外，还支持更加复杂的 <code>where</code> 条件。</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/MyBatisPlus/BaseMapper%E4%B8%AD%E7%9A%84%E6%9D%A1%E4%BB%B6%E6%9E%84%E9%80%A0%E5%99%A8.png" alt="BaseMapper中的条件构造器"></p>
<p>参数中的 <code>Wrapper</code> 就是条件构造的抽象类，其下有很多默认实现，继承关系如图：</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/MyBatisPlus/Wrapper%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB%E5%9B%BE.png" alt="Wrapper继承关系图" style="zoom: 50%;">

<p><code>Wrapper</code> 的子类 <code>AbstractWrapper</code> 提供了 where 中包含的所有条件构造方法：</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/MyBatisPlus/AbstractWrapper%E4%B8%AD%E7%9A%84%E6%96%B9%E6%B3%95.png" alt="AbstractWrapper中的方法" style="zoom:67%;">

<p>而 <code>QueryWrapper</code> 在 <code>AbstractWrapper</code> 的基础上拓展了一个 <code>select</code> 方法，允许指定查询字段：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/MyBatisPlus/QueryWrapper%E7%9A%84select%E6%96%B9%E6%B3%95.png" alt="QueryWrapper的select方法"></p>
<p>而 <code>UpdateWrapper</code> 在 <code>AbstractWrapper</code> 的基础上拓展了一个 <code>set</code> 方法，允许指定 SQL 中的 SET 部分：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/MyBatisPlus/UpdateWrapper%E7%9A%84set%E6%96%B9%E6%B3%95.png" alt="UpdateWrapper的set方法"></p>
<p>接下来，我们就来看看如何利用 <code>Wrapper </code>实现复杂查询。</p>
<h2 id="6-1-QueryWrapper"><a href="#6-1-QueryWrapper" class="headerlink" title="6.1 QueryWrapper"></a>6.1 QueryWrapper</h2><p>当前数据表数据：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/MyBatisPlus/%E6%9D%A1%E4%BB%B6%E6%9F%A5%E8%AF%A2%E5%89%8D%E6%95%B0%E6%8D%AE%E5%BA%93%E6%95%B0%E6%8D%AE.png" alt="条件查询前数据库数据"></p>
<p>无论是修改、删除、查询，都可以使用 QueryWrapper 来构建查询条件。接下来看一些例子：</p>
<p><strong>多条件构建</strong></p>
<blockquote>
<p>查询出名字中带 o ，年龄大于等于 18 的人</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testQueryWrapper</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 1.构建查询条件 where name like &quot;%o%&quot; AND age &gt;= 18</span></span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;User&gt;()</span><br><span class="line">            .select(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;age&quot;</span>, <span class="string">&quot;email&quot;</span>)</span><br><span class="line">            .like(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;o&quot;</span>)</span><br><span class="line">            .ge(<span class="string">&quot;age&quot;</span>, <span class="number">18</span>);</span><br><span class="line">    <span class="comment">// 2.查询数据</span></span><br><span class="line">    List&lt;User&gt; userList = userMapper.selectList(wrapper);</span><br><span class="line">    userList.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到 MP 在编写 SQL 语句时会使用 ? 占位符，然后将参数传进去，最终查询到结果：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/MyBatisPlus/%E5%90%8D%E5%AD%97%E4%B8%AD%E5%B8%A6o%E5%B9%B4%E9%BE%84%E5%A4%A7%E4%BA%8E%E7%AD%89%E4%BA%8E18.png" alt="名字中带o年龄大于等于18"></p>
<blockquote>
<p>查询出年龄小于 20 或年龄大于 25 的人</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testQueryWrapper</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 1.构建查询条件 where (age &lt; 25 OR age &gt; 20)</span></span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;User&gt;();</span><br><span class="line">    wrapper.lt(<span class="string">&quot;age&quot;</span>, <span class="number">20</span>).or().gt(<span class="string">&quot;age&quot;</span>, <span class="number">25</span>);</span><br><span class="line">    <span class="comment">// 2.查询数据</span></span><br><span class="line">    List&lt;User&gt; userList = userMapper.selectList(wrapper);</span><br><span class="line">    userList.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/MyBatisPlus/%E5%B9%B4%E9%BE%84%E5%B0%8F%E4%BA%8E20%E6%88%96%E5%B9%B4%E9%BE%84%E5%A4%A7%E4%BA%8E25.png" alt="年龄小于20或年龄大于25"></p>
<p><font color="red"><strong>PS：<code>or()</code> 就相当于我们sql语句中的 <code>or</code> 关键字，不加默认是 <code>and</code></strong></font></p>
<p><strong>查询投影</strong></p>
<blockquote>
<p>查询指定字段</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testQueryWrapper</span><span class="params">()</span> &#123;</span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;User&gt;();</span><br><span class="line">    wrapper.select(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;age&quot;</span>);</span><br><span class="line">    List&lt;User&gt; userList = userMapper.selectList(wrapper);</span><br><span class="line">    userList.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/MyBatisPlus/%E6%9F%A5%E8%AF%A2name,age%E5%AD%97%E6%AE%B5.png" alt="查询name,age字段"></p>
<p><strong>聚合查询</strong></p>
<blockquote>
<p>count、max、min、avg、sum</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testQueryWrapper</span><span class="params">()</span> &#123;</span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;User&gt;();</span><br><span class="line">    <span class="comment">// SELECT count(*) as count FROM user</span></span><br><span class="line">    <span class="comment">//wrapper.select(&quot;count(*) as count&quot;);</span></span><br><span class="line">    <span class="comment">// SELECT max(age) as maxAge FROM user</span></span><br><span class="line">    <span class="comment">//wrapper.select(&quot;max(age) as maxAge&quot;);</span></span><br><span class="line">    <span class="comment">// SELECT min(age) as minAge FROM user</span></span><br><span class="line">    <span class="comment">//wrapper.select(&quot;min(age) as minAge&quot;);</span></span><br><span class="line">    <span class="comment">// SELECT sum(age) as sumAge FROM user</span></span><br><span class="line">    <span class="comment">//wrapper.select(&quot;sum(age) as sumAge&quot;);</span></span><br><span class="line">    <span class="comment">//SELECT avg(age) as avgAge FROM user</span></span><br><span class="line">    wrapper.select(<span class="string">&quot;avg(age) as avgAge&quot;</span>);</span><br><span class="line">    List&lt;Map&lt;String, Object&gt;&gt; userList = userMapper.selectMaps(wrapper);</span><br><span class="line">    userList.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>分组查询</strong></p>
<blockquote>
<p>分组查询，完成 group by 的查询使用</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testQueryWrapper</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// SELECT count(*) as count,age FROM `user` GROUP BY age</span></span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;User&gt;();</span><br><span class="line">    wrapper.select(<span class="string">&quot;count(*) as count,age&quot;</span>);</span><br><span class="line">    wrapper.groupBy(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">    List&lt;Map&lt;String, Object&gt;&gt; list = userMapper.selectMaps(wrapper);</span><br><span class="line">    list.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/MyBatisPlus/%E5%88%86%E7%BB%84%E6%9F%A5%E8%AF%A2age.png" alt="分组查询age"></p>
<blockquote>
<p>根据 ID 降序排列</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testQueryWrapper</span><span class="params">()</span> &#123;</span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * condition ：条件，返回boolean，</span></span><br><span class="line"><span class="comment">     当condition为true，进行排序，如果为false，则不排序</span></span><br><span class="line"><span class="comment">     * isAsc:是否为升序，true为升序，false为降序</span></span><br><span class="line"><span class="comment">     * columns：需要操作的列</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    wrapper.orderBy(<span class="literal">true</span>, <span class="literal">false</span>, <span class="string">&quot;id&quot;</span>);</span><br><span class="line">    List&lt;User&gt; userList = userMapper.selectList(wrapper);</span><br><span class="line">    userList.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/MyBatisPlus/%E6%A0%B9%E6%8D%AEID%E9%99%8D%E5%BA%8F%E6%8E%92%E5%88%97.png" alt="根据ID降序排列"></p>
<blockquote>
<p>更新用户名为 Jack 的用户的年龄为 18</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testUpdateByQueryWrapper</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 1.构建查询条件 where name = &quot;Jack&quot;</span></span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;User&gt;().eq(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;Jack&quot;</span>);</span><br><span class="line">    <span class="comment">// 2.更新数据，user中非null字段都会作为set语句</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setAge(<span class="number">18</span>);</span><br><span class="line">    userMapper.update(user, wrapper);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/MyBatisPlus/%E6%9B%B4%E6%96%B0%E7%94%A8%E6%88%B7%E5%90%8D%E4%B8%BAJack%E7%9A%84%E7%94%A8%E6%88%B7%E7%9A%84%E5%B9%B4%E9%BE%84%E4%B8%BA18.png" alt="更新用户名为Jack的用户的年龄为18"></p>
<p>除了上面介绍的这几种查询条件构建方法以外还会有很多其他的方法，比如 isNull，isNotNull，in，notIn 等等方法可供选择，具体参考<a href="https://baomidou.com/pages/10c804/">官方文档</a>的条件构造器来学习使用。</p>
<h2 id="6-2-UpdateWrapper"><a href="#6-2-UpdateWrapper" class="headerlink" title="6.2 UpdateWrapper"></a>6.2 UpdateWrapper</h2><p>基于 BaseMapper 中的 update 方法更新时只能直接赋值，对于一些复杂的需求就难以实现。 </p>
<p>例如：更新 ID 为 <code>1、2、4</code> 的用户的年龄，减两岁，对应的 SQL 应该是：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">user</span> <span class="keyword">SET</span> age <span class="operator">=</span> age <span class="operator">-</span> <span class="number">2</span> <span class="keyword">WHERE</span> id <span class="keyword">in</span> (<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>)</span><br></pre></td></tr></table></figure>

<p>SET 的赋值结果是基于字段现有值的，这个时候就要利用 UpdateWrapper 中的 setSql 功能了：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testUpdateWrapper</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;Long&gt; ids = List.of(<span class="number">1L</span>, <span class="number">2L</span>, <span class="number">4L</span>);</span><br><span class="line">    <span class="comment">// 1.生成SQL</span></span><br><span class="line">    UpdateWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">UpdateWrapper</span>&lt;User&gt;()</span><br><span class="line">            .setSql(<span class="string">&quot;age = age - 2&quot;</span>) <span class="comment">// SET age = age - 2</span></span><br><span class="line">            .in(<span class="string">&quot;id&quot;</span>, ids); <span class="comment">// WHERE id in (1, 2, 4)</span></span><br><span class="line">    <span class="comment">// 2.更新，注意第一个参数可以给 null，也就是不填更新字段和数据，而是基于 UpdateWrapper 中的 setSQL 来更新</span></span><br><span class="line">    userMapper.update(<span class="literal">null</span>, wrapper);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/MyBatisPlus/%E6%9B%B4%E6%96%B0ID%E4%B8%BA1,2,4%E7%9A%84%E7%94%A8%E6%88%B7%E7%9A%84%E5%B9%B4%E9%BE%84%E5%87%8F%E4%B8%A4%E5%B2%81.png" alt="更新ID为1,2,4的用户的年龄减两岁"></p>
<h2 id="6-3-LambdaQueryWrapper"><a href="#6-3-LambdaQueryWrapper" class="headerlink" title="6.3 LambdaQueryWrapper"></a>6.3 LambdaQueryWrapper</h2><p>无论是 QueryWrapper 还是 UpdateWrapper 在构造条件的时候都需要写死字段名称，会出现字符串<code>魔法值</code>。这在编程规范中显然是不推荐的。 那怎么样才能不写字段名，又能知道字段名呢？</p>
<p>其中一种办法是基于变量的 <code>gettter</code> 方法结合反射技术。因此我们只要将条件对应的字段的 <code>getter</code> 方法传递给 MP，它就能计算出对应的变量名了。而传递方法可以使用JDK8中的 <code>方法引用</code> 和 <code>Lambda </code>表达式。 因此 MP 又提供了一套基于 Lambda 的Wrapper，包含两个：</p>
<ul>
<li>LambdaQueryWrapper</li>
<li>LambdaUpdateWrapper</li>
</ul>
<p>分别对应 QueryWrapper 和 UpdateWrapper</p>
<p>其使用方式如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testLambdaQueryWrapper</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 1.构建条件 where name like &quot;%o%&quot; AND age &gt;= 18</span></span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    wrapper.lambda()</span><br><span class="line">            .select(User::getId, User::getName, User::getAge, User::getEmail)</span><br><span class="line">            .like(User::getName, <span class="string">&quot;o&quot;</span>)</span><br><span class="line">            .ge(User::getAge, <span class="number">18</span>);</span><br><span class="line">    <span class="comment">// 2.查询</span></span><br><span class="line">    List&lt;User&gt; userList = userMapper.selectList(wrapper);</span><br><span class="line">    userList.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-4-自定义SQL"><a href="#6-4-自定义SQL" class="headerlink" title="6.4 自定义SQL"></a>6.4 自定义SQL</h2><p>在演示 UpdateWrapper 的案例中，我们在代码中编写了更新的 SQL 语句：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/MyBatisPlus/%E6%89%8B%E5%86%99%E7%9A%84SQL%E8%AF%AD%E5%8F%A5.png" alt="手写的SQL语句"></p>
<p>这种写法在某些企业也是不允许的，因为 SQL 语句最好都维护在持久层，而不是业务层。就当前案例来说，由于条件是 in 语句，只能将SQL写在Mapper.xml文件，利用foreach来生成动态SQL。 这实在是太麻烦了。假如查询条件更复杂，动态SQL的编写也会更加复杂。</p>
<p>所以，MP提供了自定义SQL功能，可以让我们利用Wrapper生成查询条件，再结合Mapper.xml编写SQL。</p>
<h3 id="6-4-1-基本用法"><a href="#6-4-1-基本用法" class="headerlink" title="6.4.1 基本用法"></a>6.4.1 基本用法</h3><p>以当前案例来说，我们可以这样写：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testCustomWrapper</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 1.准备自定义查询条件</span></span><br><span class="line">    List&lt;Long&gt; ids = List.of(<span class="number">1L</span>, <span class="number">2L</span>, <span class="number">4L</span>);</span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;User&gt;().in(<span class="string">&quot;id&quot;</span>, ids);</span><br><span class="line">    <span class="comment">// 2.调用mapper的自定义方法，直接传递Wrapper</span></span><br><span class="line">    userMapper.deductAgeByIds(<span class="number">2</span>, wrapper);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后在UserMapper中自定义SQL：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line">    <span class="meta">@Select(&quot;UPDATE user SET age = age - #&#123;age&#125; $&#123;ew.customSqlSegment&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">deductAgeByIds</span><span class="params">(<span class="meta">@Param(&quot;age&quot;)</span> <span class="type">int</span> age, <span class="meta">@Param(&quot;ew&quot;)</span> QueryWrapper&lt;User&gt; wrapper)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样就省去了编写复杂查询条件的烦恼了。</p>
<h3 id="6-4-2-多表关联"><a href="#6-4-2-多表关联" class="headerlink" title="6.4.2 多表关联"></a>6.4.2 多表关联</h3><p>理论上来讲MyBatisPlus是不支持多表查询的，不过我们可以利用Wrapper中自定义条件结合自定义SQL来实现多表查询的效果。</p>
<p>执行SQL脚本，创建address表，与 user 表相关联：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `address` (</span><br><span class="line">  `id` <span class="type">bigint</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `user_id` <span class="type">bigint</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户ID&#x27;</span>,</span><br><span class="line">  `province` <span class="type">varchar</span>(<span class="number">10</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;省&#x27;</span>,</span><br><span class="line">  `city` <span class="type">varchar</span>(<span class="number">10</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;市&#x27;</span>,</span><br><span class="line">  `town` <span class="type">varchar</span>(<span class="number">10</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;县/区&#x27;</span>,</span><br><span class="line">  `mobile` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;手机&#x27;</span>,</span><br><span class="line">  `street` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;详细地址&#x27;</span>,</span><br><span class="line">  `contact` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;联系人&#x27;</span>,</span><br><span class="line">  `is_default` bit(<span class="number">1</span>) <span class="keyword">DEFAULT</span> b<span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;是否是默认 1默认 0否&#x27;</span>,</span><br><span class="line">  `notes` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;备注&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE,</span><br><span class="line">  KEY `user_id` (`user_id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">71</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb3 ROW_FORMAT<span class="operator">=</span>COMPACT;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `address` (`id`, `user_id`, `province`, `city`, `town`, `mobile`, `street`, `contact`, `is_default`, `notes`) <span class="keyword">VALUES</span></span><br><span class="line">    (<span class="number">59</span>, <span class="number">2</span>, <span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;朝阳区&#x27;</span>, <span class="string">&#x27;13900112222&#x27;</span>, <span class="string">&#x27;金燕龙办公楼&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>, b<span class="string">&#x27;1&#x27;</span>, <span class="keyword">NULL</span>),</span><br><span class="line">    (<span class="number">60</span>, <span class="number">1</span>, <span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;朝阳区&#x27;</span>, <span class="string">&#x27;13700221122&#x27;</span>, <span class="string">&#x27;修正大厦&#x27;</span>, <span class="string">&#x27;Jack&#x27;</span>, b<span class="string">&#x27;0&#x27;</span>, <span class="keyword">NULL</span>),</span><br><span class="line">    (<span class="number">61</span>, <span class="number">1</span>, <span class="string">&#x27;上海&#x27;</span>, <span class="string">&#x27;上海&#x27;</span>, <span class="string">&#x27;浦东新区&#x27;</span>, <span class="string">&#x27;13301212233&#x27;</span>, <span class="string">&#x27;航头镇航头路&#x27;</span>, <span class="string">&#x27;Jack&#x27;</span>, b<span class="string">&#x27;1&#x27;</span>, <span class="keyword">NULL</span>),</span><br><span class="line">    (<span class="number">63</span>, <span class="number">2</span>, <span class="string">&#x27;广东&#x27;</span>, <span class="string">&#x27;佛山&#x27;</span>, <span class="string">&#x27;永春&#x27;</span>, <span class="string">&#x27;13301212233&#x27;</span>, <span class="string">&#x27;永春武馆&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>, b<span class="string">&#x27;0&#x27;</span>, <span class="keyword">NULL</span>),</span><br><span class="line">    (<span class="number">64</span>, <span class="number">3</span>, <span class="string">&#x27;浙江&#x27;</span>, <span class="string">&#x27;杭州&#x27;</span>, <span class="string">&#x27;拱墅区&#x27;</span>, <span class="string">&#x27;13567809102&#x27;</span>, <span class="string">&#x27;浙江大学&#x27;</span>, <span class="string">&#x27;Hope&#x27;</span>, b<span class="string">&#x27;1&#x27;</span>, <span class="keyword">NULL</span>),</span><br><span class="line">    (<span class="number">65</span>, <span class="number">3</span>, <span class="string">&#x27;浙江&#x27;</span>, <span class="string">&#x27;杭州&#x27;</span>, <span class="string">&#x27;拱墅区&#x27;</span>, <span class="string">&#x27;13967589201&#x27;</span>, <span class="string">&#x27;左岸花园&#x27;</span>, <span class="string">&#x27;Hope&#x27;</span>, b<span class="string">&#x27;0&#x27;</span>, <span class="keyword">NULL</span>),</span><br><span class="line">    (<span class="number">66</span>, <span class="number">4</span>, <span class="string">&#x27;湖北&#x27;</span>, <span class="string">&#x27;武汉&#x27;</span>, <span class="string">&#x27;汉口&#x27;</span>, <span class="string">&#x27;13967519202&#x27;</span>, <span class="string">&#x27;天天花园&#x27;</span>, <span class="string">&#x27;Thomas&#x27;</span>, b<span class="string">&#x27;1&#x27;</span>, <span class="keyword">NULL</span>),</span><br><span class="line">    (<span class="number">67</span>, <span class="number">3</span>, <span class="string">&#x27;浙江&#x27;</span>, <span class="string">&#x27;杭州&#x27;</span>, <span class="string">&#x27;拱墅区&#x27;</span>, <span class="string">&#x27;13967589201&#x27;</span>, <span class="string">&#x27;左岸花园&#x27;</span>, <span class="string">&#x27;Hopey&#x27;</span>, b<span class="string">&#x27;0&#x27;</span>, <span class="keyword">NULL</span>),</span><br><span class="line">    (<span class="number">68</span>, <span class="number">4</span>, <span class="string">&#x27;湖北&#x27;</span>, <span class="string">&#x27;武汉&#x27;</span>, <span class="string">&#x27;汉口&#x27;</span>, <span class="string">&#x27;13967519202&#x27;</span>, <span class="string">&#x27;天天花园&#x27;</span>, <span class="string">&#x27;Thomas&#x27;</span>, b<span class="string">&#x27;1&#x27;</span>, <span class="keyword">NULL</span>),</span><br><span class="line">    (<span class="number">69</span>, <span class="number">3</span>, <span class="string">&#x27;浙江&#x27;</span>, <span class="string">&#x27;杭州&#x27;</span>, <span class="string">&#x27;拱墅区&#x27;</span>, <span class="string">&#x27;13967589201&#x27;</span>, <span class="string">&#x27;左岸花园&#x27;</span>, <span class="string">&#x27;Hopey&#x27;</span>, b<span class="string">&#x27;0&#x27;</span>, <span class="keyword">NULL</span>),</span><br><span class="line">    (<span class="number">70</span>, <span class="number">4</span>, <span class="string">&#x27;湖北&#x27;</span>, <span class="string">&#x27;武汉&#x27;</span>, <span class="string">&#x27;汉口&#x27;</span>, <span class="string">&#x27;13967519202&#x27;</span>, <span class="string">&#x27;天天花园&#x27;</span>, <span class="string">&#x27;Thomas&#x27;</span>, b<span class="string">&#x27;1&#x27;</span>, <span class="keyword">NULL</span>);</span><br></pre></td></tr></table></figure>

<p>我们要查询出所有收货地址在北京的并且用户 ID 在 <code>1、2、4</code> 之中的用户 要是自己基于 Mybatis 实现 SQL，大概是这样的：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryUserByIdAndAddr&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.muyoukule.entity.User&quot;</span>&gt;</span></span><br><span class="line">      SELECT *</span><br><span class="line">      FROM user u</span><br><span class="line">      INNER JOIN address a ON u.id = a.user_id</span><br><span class="line">      WHERE u.id</span><br><span class="line">      <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;ids&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">open</span>=<span class="string">&quot;IN (&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">          #&#123;id&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">      AND a.city = #&#123;city&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>可以看出其中最复杂的就是 WHERE 条件的编写，如果业务复杂一些，这里的 SQL 会更变态。</p>
<p>但是基于自定义 SQL 结合 Wrapper 的玩法，我们就可以利用 Wrapper 来构建查询条件，然后手写 SELECT 及 FROM 部分，实现多表查询。</p>
<p>查询条件这样来构建：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testCustomJoinWrapper</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 1.准备自定义查询条件</span></span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;User&gt;()</span><br><span class="line">            .in(<span class="string">&quot;u.id&quot;</span>, List.of(<span class="number">1L</span>, <span class="number">2L</span>, <span class="number">4L</span>))</span><br><span class="line">            .eq(<span class="string">&quot;a.city&quot;</span>, <span class="string">&quot;北京&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.调用mapper的自定义方法</span></span><br><span class="line">    List&lt;User&gt; userList = userMapper.queryUserByWrapper(wrapper);</span><br><span class="line">    userList.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后在UserMapper中自定义方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;SELECT u.* FROM user u INNER JOIN address a ON u.id = a.user_id $&#123;ew.customSqlSegment&#125;&quot;)</span></span><br><span class="line">List&lt;User&gt; <span class="title function_">queryUserByWrapper</span><span class="params">(<span class="meta">@Param(&quot;ew&quot;)</span> QueryWrapper&lt;User&gt; wrapper)</span>;</span><br></pre></td></tr></table></figure>

<p>当然，也可以在<code>UserMapper.xml</code>中写SQL：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryUserByIdAndAddr&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.itheima.mp.domain.po.User&quot;</span>&gt;</span></span><br><span class="line">    SELECT * FROM user u INNER JOIN address a ON u.id = a.user_id $&#123;ew.customSqlSegment&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="7-代码生成"><a href="#7-代码生成" class="headerlink" title="7. 代码生成"></a>7. 代码生成</h1><p>在使用MP 以后，基础的<code>Mapper</code>、<code>Service</code>、<code>PO</code>代码相对固定，重复编写也比较麻烦。因此MP 官方提供了代码生成器。</p>
<p>适用版本：mybatis-plus-generator 3.5.1 及其以上版本，对历史版本不兼容！</p>
<p>3.5.1 以下的请参考：<a href="https://baomidou.com/pages/d357af/">代码生成器（旧）</a></p>
<p>首先需要添加依赖，MP 从 <code>3.0.3</code> 之后移除了代码生成器与模板引擎的默认依赖，需要手动添加相关依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--代码生成器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--模板引擎  Velocity(默认)--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.velocity<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>velocity-engine-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>创建代码生成类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.muyoukule;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.FieldFill;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.IdType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.FastAutoGenerator;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.OutputFile;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.rules.DateType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.rules.DbColumnType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.fill.Column;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.fill.Property;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Types;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 木又枯了</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/4/4</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 代码自动生成器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CodeGenerator</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 代码生成器对象</span></span><br><span class="line">        <span class="comment">// 数据库信息</span></span><br><span class="line">        FastAutoGenerator.create(<span class="string">&quot;jdbc:mysql://127.0.0.1:3306/mybatis_plus&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;root&quot;</span>)</span><br><span class="line">                <span class="comment">// 1.全局配置</span></span><br><span class="line">                .globalConfig(builder -&gt; &#123;</span><br><span class="line">                    builder.disableOpenDir()</span><br><span class="line">                            .author(<span class="string">&quot;木又枯了&quot;</span>)    <span class="comment">// 设置作者</span></span><br><span class="line">                            .outputDir(System.getProperty(<span class="string">&quot;user.dir&quot;</span>) + <span class="string">&quot;/src/main/java&quot;</span>)   <span class="comment">// 代码输出目录</span></span><br><span class="line">                            <span class="comment">//.enableSwagger()  // 开启 swagger 模式</span></span><br><span class="line">                            .dateType(DateType.TIME_PACK)   <span class="comment">// 时间策略</span></span><br><span class="line">                            .commentDate(<span class="string">&quot;yyyy-MM-dd&quot;</span>)  <span class="comment">// 注释日期</span></span><br><span class="line">                            .build();</span><br><span class="line">                &#125;)</span><br><span class="line">                <span class="comment">// 2.数据库配置</span></span><br><span class="line">                .dataSourceConfig(builder -&gt;</span><br><span class="line">                        builder.typeConvertHandler((globalConfig, typeRegistry, metaInfo) -&gt; &#123;</span><br><span class="line">                            <span class="type">int</span> <span class="variable">typeCode</span> <span class="operator">=</span> metaInfo.getJdbcType().TYPE_CODE;</span><br><span class="line">                            <span class="keyword">if</span> (typeCode == Types.SMALLINT) &#123;</span><br><span class="line">                                <span class="comment">// 自定义类型转换</span></span><br><span class="line">                                <span class="keyword">return</span> DbColumnType.INTEGER;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">return</span> typeRegistry.getColumnType(metaInfo);</span><br><span class="line">                        &#125;)</span><br><span class="line">                )</span><br><span class="line">                <span class="comment">// 3.包配置</span></span><br><span class="line">                .packageConfig(builder -&gt; &#123;</span><br><span class="line">                    builder.parent(<span class="string">&quot;com.muyoukule&quot;</span>) <span class="comment">// 设置父包名</span></span><br><span class="line">                            .entity(<span class="string">&quot;entity&quot;</span>)   <span class="comment">// Entity 包名</span></span><br><span class="line">                            .service(<span class="string">&quot;service&quot;</span>) <span class="comment">// Service 包名</span></span><br><span class="line">                            .serviceImpl(<span class="string">&quot;service.impl&quot;</span>)    <span class="comment">//Service Impl 包名</span></span><br><span class="line">                            .mapper(<span class="string">&quot;mapper&quot;</span>)   <span class="comment">//Mapper 包名</span></span><br><span class="line">                            .xml(<span class="string">&quot;AddressMapper.xml&quot;</span>)   <span class="comment">//Mapper XML 包名</span></span><br><span class="line">                            .controller(<span class="string">&quot;controller&quot;</span>)   <span class="comment">//	Controller 包名</span></span><br><span class="line">                            .pathInfo(Collections.singletonMap(OutputFile.xml, System.getProperty(<span class="string">&quot;user.dir&quot;</span>) + <span class="string">&quot;/src/main/resources/mapper&quot;</span>))<span class="comment">// 设置mapperXml生成路径</span></span><br><span class="line">                            .build();</span><br><span class="line">                &#125;)</span><br><span class="line">                <span class="comment">// 4.策略配置</span></span><br><span class="line">                .strategyConfig(builder -&gt; &#123;</span><br><span class="line">                    builder</span><br><span class="line">                            <span class="comment">// 实体策略配置</span></span><br><span class="line">                            .entityBuilder()</span><br><span class="line">                            .enableLombok() <span class="comment">// 开启 lombok 模型</span></span><br><span class="line">                            .versionColumnName(<span class="string">&quot;version&quot;</span>)   <span class="comment">// 乐观锁字段名(数据库字段)</span></span><br><span class="line">                            .logicDeleteColumnName(<span class="string">&quot;deleted&quot;</span>)   <span class="comment">// 逻辑删除字段名(数据库字段)</span></span><br><span class="line">                            .addTableFills(<span class="keyword">new</span> <span class="title class_">Column</span>(<span class="string">&quot;create_time&quot;</span>, FieldFill.INSERT)) <span class="comment">// 添加表字段填充</span></span><br><span class="line">                            .addTableFills(<span class="keyword">new</span> <span class="title class_">Property</span>(<span class="string">&quot;updateTime&quot;</span>, FieldFill.INSERT_UPDATE)) <span class="comment">// 添加表字段填充</span></span><br><span class="line">                            .idType(IdType.AUTO)    <span class="comment">// 全局主键类型</span></span><br><span class="line">                            .formatFileName(<span class="string">&quot;%s&quot;</span>)   <span class="comment">// 格式化文件名称， %s为占位符，指代模块名称</span></span><br><span class="line">                            <span class="comment">// Controller 策略配置</span></span><br><span class="line">                            .controllerBuilder()</span><br><span class="line">                            .enableRestStyle() <span class="comment">// 开启生成 @RestController 控制器</span></span><br><span class="line">                            .formatFileName(<span class="string">&quot;%sController&quot;</span>) <span class="comment">// 格式化文件名称， %s为占位符，指代模块名称</span></span><br><span class="line">                            .build();</span><br><span class="line">                &#125;)</span><br><span class="line">                <span class="comment">// 5.执行生成操作</span></span><br><span class="line">                .execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上代码按要求修改即可使用。对于代码生成器中的更多代码内容，我们可以直接从<a href="https://baomidou.com/pages/981406/#%E6%95%B0%E6%8D%AE%E5%BA%93%E9%85%8D%E7%BD%AE-datasourceconfig">官方文档</a>中获取代码进行修改。</p>
<h1 id="8-逻辑删除"><a href="#8-逻辑删除" class="headerlink" title="8. 逻辑删除"></a>8. 逻辑删除</h1><p>对于一些比较重要的数据，我们往往会采用逻辑删除的方案，即：</p>
<ul>
<li>在表中添加一个字段标记数据是否被删除</li>
<li>当删除数据时把标记置为true</li>
<li>查询时过滤掉标记为true的数据</li>
</ul>
<p>一旦采用了逻辑删除，所有的查询和删除逻辑都要跟着变化，非常麻烦。</p>
<p>为了解决这个问题，MP 就添加了对逻辑删除的支持。</p>
<p><font color="red">PS：只有 MP 生成的SQL语句才支持自动的逻辑删除，自定义 SQL 需要自己手动处理逻辑删除。</font></p>
<p>1、我们给 <code>user</code> 表添加一个逻辑删除字段，设置默认值为 0 ：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">user</span> <span class="keyword">add</span> deleted bit <span class="keyword">default</span> b<span class="string">&#x27;0&#x27;</span> <span class="keyword">null</span> comment <span class="string">&#x27;逻辑删除&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/MyBatisPlus/%E6%B7%BB%E5%8A%A0%E9%80%BB%E8%BE%91%E5%88%A0%E9%99%A4%E5%AD%97%E6%AE%B5deleted.png" alt="添加逻辑删除字段deleted"></p>
<p>2、给 <code>user</code> 实体添加 <code>deleted</code> 字段：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//逻辑删除</span></span><br><span class="line"><span class="keyword">private</span> Boolean deleted;</span><br></pre></td></tr></table></figure>

<p>3、在<code>application.yml</code>中配置逻辑删除字段：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">logic-delete-field:</span> <span class="string">deleted</span> <span class="comment"># 全局逻辑删除的实体字段名(since 3.3.0,配置后可以忽略不配置步骤2)</span></span><br><span class="line">      <span class="attr">logic-delete-value:</span> <span class="number">1</span> <span class="comment"># 逻辑已删除值(默认为 1)</span></span><br><span class="line">      <span class="attr">logic-not-delete-value:</span> <span class="number">0</span> <span class="comment"># 逻辑未删除值(默认为 0)</span></span><br></pre></td></tr></table></figure>

<p>4、测试</p>
<p>首先，我们执行一个删除操作：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testDelete</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> userMapper.deleteById(<span class="number">1L</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>方法与普通删除一模一样，但是底层的SQL逻辑变了：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/MyBatisPlus/%E5%BA%95%E5%B1%82%E7%9A%84SQL%E9%80%BB%E8%BE%91%E6%94%B9%E5%8F%98.png" alt="底层的SQL逻辑改变"></p>
<p>查看数据库，发现 ID 为1 的记录还在数据库，只是 deleted 字段变为 1 ：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/MyBatisPlus/deleted%E5%AD%97%E6%AE%B5%E5%8F%98%E4%B8%BA1.png"></p>
<p>查询一下试试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testSelectAll</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;User&gt; userList = userMapper.selectList(<span class="literal">null</span>);</span><br><span class="line">    userList.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>会发现 ID为 1 的记录确实没有查询出来，而且 SQL 中也对逻辑删除字段做了判断：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/MyBatisPlus/SQL%E5%AF%B9%E9%80%BB%E8%BE%91%E5%88%A0%E9%99%A4%E5%AD%97%E6%AE%B5%E5%81%9A%E5%87%BA%E5%88%A4%E6%96%AD.png" alt="SQL对逻辑删除字段做出判断"></p>
<p>综上， 开启了逻辑删除功能以后，我们就可以像普通删除一样做CRUD，基本不用考虑代码逻辑问题。还是非常方便的。</p>
<p><strong>注意</strong>： 逻辑删除本身也有自己的问题，比如：</p>
<ul>
<li>会导致数据库表垃圾数据越来越多，从而影响查询效率</li>
<li>SQL 中全都需要对逻辑删除字段做判断，影响查询效率</li>
</ul>
<p>因此，不太推荐采用逻辑删除功能，如果数据不能删除，可以采用把数据迁移到其它表的办法。</p>
<h1 id="9-通用枚举"><a href="#9-通用枚举" class="headerlink" title="9. 通用枚举"></a>9. 通用枚举</h1><h2 id="9-1-声明通用枚举属性"><a href="#9-1-声明通用枚举属性" class="headerlink" title="9.1 声明通用枚举属性"></a>9.1 声明通用枚举属性</h2><p>1、我们给  <code>user</code>  表添加一个 <code>status</code> 字段：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">user</span> <span class="keyword">add</span> `status` <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;1&#x27;</span> COMMENT <span class="string">&#x27;使用状态（1正常 2冻结）&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>2、定义一个用户状态的枚举：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.muyoukule.enums;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">UserStatus</span> &#123;</span><br><span class="line">    NORMAL(<span class="number">1</span>, <span class="string">&quot;正常&quot;</span>),</span><br><span class="line">    FREEZE(<span class="number">2</span>, <span class="string">&quot;冻结&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> value;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String desc;</span><br><span class="line"></span><br><span class="line">    UserStatus(<span class="type">int</span> value, String desc) &#123;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">        <span class="built_in">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3、给 <code>user</code> 实体添加 <code>status</code> 字段：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用状态（1正常 2冻结）</span></span><br><span class="line"><span class="keyword">private</span> UserStatus status;</span><br></pre></td></tr></table></figure>

<p>要让 MP 处理枚举与数据库类型自动转换，我们必须告诉 MP，枚举中的哪个字段的值作为数据库值。 </p>
<p>MP 提供了 <code>@EnumValue</code> 注解来标记枚举属性：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">UserStatus</span> &#123;</span><br><span class="line">    NORMAL(<span class="number">1</span>, <span class="string">&quot;正常&quot;</span>),</span><br><span class="line">    FREEZE(<span class="number">2</span>, <span class="string">&quot;冻结&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EnumValue</span> <span class="comment">// 标记数据库存的值是 value</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> value;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String desc;</span><br><span class="line"></span><br><span class="line">    UserStatus(<span class="type">int</span> value, String desc) &#123;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">        <span class="built_in">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="9-2-配置扫描通用枚举"><a href="#9-2-配置扫描通用枚举" class="headerlink" title="9.2 配置扫描通用枚举"></a><del>9.2 配置扫描通用枚举</del></h2><p><font color="red"><strong>PS：从 3.5.2 开始无需配置！</strong></font>😁</p>
<p><strong>方式一：仅配置指定包内的枚举类使用 MybatisEnumTypeHandler</strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line"> 	<span class="comment"># 设置枚举包扫描。3.5.2 版本开始，省略此配置。</span></span><br><span class="line">    <span class="comment"># 支持统配符 * 或者 ; 分割 </span></span><br><span class="line">    <span class="attr">typeEnumsPackage:</span> <span class="string">com.muyoukule.enums</span></span><br></pre></td></tr></table></figure>

<p>当添加这个配置后，mybatis-plus 提供的 <code>MybatisSqlSessionFactoryBean</code> 会自动扫描包内合法的枚举类（使用了 <code>@EnumValue</code> 注解，或者实现了 <code>IEnum</code> 接口），分别为这些类注册使用 <code>MybatisEnumTypeHandler</code>。</p>
<p>换句话说，只有指定包下的枚举类会使用新的 TypeHandler。其他包下，或者包内没有做相关改造的枚举类，仍然会使用 Mybatis 的 DefaultEnumTypeHandler。</p>
<p><strong>方式二：直接指定 DefaultEnumTypeHandler</strong></p>
<p>此方式用来 <code>全局</code> 修改 Mybatis 使用的 EnumTypeHandler。</p>
<p>在application.yaml文件中添加配置：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">default-enum-type-handler:</span> <span class="string">com.baomidou.mybatisplus.core.handlers.MybatisEnumTypeHandler</span></span><br></pre></td></tr></table></figure>

<p>自定义配置类 MybatisPlusAutoConfiguration：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusAutoConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusPropertiesCustomizer <span class="title function_">mybatisPlusPropertiesCustomizer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> properties -&gt; &#123;</span><br><span class="line">            <span class="type">GlobalConfig</span> <span class="variable">globalConfig</span> <span class="operator">=</span> properties.getGlobalConfig();</span><br><span class="line">            globalConfig.setBanner(<span class="literal">false</span>);</span><br><span class="line">            <span class="type">MybatisConfiguration</span> <span class="variable">configuration</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisConfiguration</span>();</span><br><span class="line">            configuration.setDefaultEnumTypeHandler(MybatisEnumTypeHandler.class);</span><br><span class="line">            properties.setConfiguration(configuration);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>查询一条数据查看：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Jack&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">16</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;test2@baomidou.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;deleted&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="string">&quot;NORMAL&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>如何序列化枚举值为前端返回值？</p>
</blockquote>
<p>在UserStatus枚举中通过 <code>@JsonValue</code> 注解标记 JSON 序列化时展示的字段</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">UserStatus</span> &#123;</span><br><span class="line">    NORMAL(<span class="number">1</span>, <span class="string">&quot;正常&quot;</span>),</span><br><span class="line">    FREEZE(<span class="number">2</span>, <span class="string">&quot;冻结&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EnumValue</span> <span class="comment">// 标记数据库存的值是 value</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> value;</span><br><span class="line">    <span class="meta">@JsonValue</span>    <span class="comment">//标记响应json值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String desc;</span><br><span class="line"></span><br><span class="line">    UserStatus(<span class="type">int</span> value, String desc) &#123;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">        <span class="built_in">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再次查看：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Jack&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">16</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;test2@baomidou.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;deleted&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="string">&quot;正常&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>可以看到在 desc 上加了 <code>@JsonValue</code> 注解注解后 status 由 <code>NORMAL</code> 变为了 <code>正常</code> 。</p>
<h1 id="10-JSON类型处理器"><a href="#10-JSON类型处理器" class="headerlink" title="10. JSON类型处理器"></a>10. JSON类型处理器</h1><p>1、我们给  <code>user</code>  表添加一个 <code>info</code> 字段，是 JSON 类型：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">user</span> <span class="keyword">add</span> `info` JSON <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;详细信息&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>2、向 <code>info</code> 字段擦插入数据格式像这样：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;intro&quot;</span><span class="punctuation">:</span> <span class="string">&quot;佛系青年&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;gender&quot;</span><span class="punctuation">:</span> <span class="string">&quot;male&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>3、给 <code>user</code> 实体添加 <code>info</code> 字段：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 详细信息</span></span><br><span class="line"><span class="keyword">private</span> String info;</span><br></pre></td></tr></table></figure>

<p>一般 User 实体类中都是 <code>String </code> 类型的 info，这样一来，我们要读取 info 中的属性时就非常不方便。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Jack&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">16</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;test2@baomidou.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;deleted&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="string">&quot;正常&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&#123;\&quot;intro\&quot;: \&quot;佛系青年\&quot;, \&quot;gender\&quot;: \&quot;male\&quot;&#125;&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>如果要方便获取，info 的类型最好是一个 <code>Map</code> 或者实体类。而一旦我们把 <code>info </code> 改为 <code>对象</code> 类型，就需要在写入数据库时手动转为 <code>String</code>，再读取数据库时，手动转换为 <code>对象</code>，这会非常麻烦。</p>
<p>因此 MP 提供了很多特殊类型字段的类型处理器，解决特殊字段类型与数据库类型转换的问题。例如处理 JSON 就可以使用 <code>JacksonTypeHandler </code> 处理器。</p>
<blockquote>
<p>怎么使用 JacksonTypeHandler 处理器呢？</p>
</blockquote>
<p>1、我们定义一个单独实体类来与 info 字段的属性匹配：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserInfo</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String intro;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2、接下来，将 User 类的 info 字段设置为 UserInfo 类型，并声明类型处理器：</p>
<p><font color="red"><strong>PS：必须开启映射注解 <code>@TableName(autoResultMap = true)</code> ！！！</strong></font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@TableName(value = &quot;`user`&quot;, autoResultMap = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@TableId(type = IdType.INPUT)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    </span><br><span class="line">	<span class="comment">// -- skip --</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 详细信息</span></span><br><span class="line">    <span class="meta">@TableField(typeHandler = JacksonTypeHandler.class)</span></span><br><span class="line">    <span class="keyword">private</span> UserInfo info;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3、测试可以发现，所有数据都正确封装到 UserInfo 当中了：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Jack&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">16</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;test2@baomidou.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;deleted&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="string">&quot;正常&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;intro&quot;</span><span class="punctuation">:</span> <span class="string">&quot;伏地魔&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;gender&quot;</span><span class="punctuation">:</span> <span class="string">&quot;male&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h1 id="11-自动填充功能"><a href="#11-自动填充功能" class="headerlink" title="11. 自动填充功能"></a>11. 自动填充功能</h1><p>创建时间、更新时间，对于这两个字段的操作我们希望是自动完成而不是需要手动编写。</p>
<p>1、我们给  <code>user</code>  表添加 <code>create_time</code> 字段和  <code>update_time</code> 字段并将这两个字段类型设置为 <code>timestamp</code>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">user</span> <span class="keyword">add</span> `create_time` <span class="type">timestamp</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">user</span> <span class="keyword">add</span> `update_time` <span class="type">timestamp</span> COMMENT <span class="string">&#x27;更新时间&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>2、同步实体类，实体类的属性上增加注解：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 字段填充内容</span></span><br><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line"><span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line"><span class="keyword">private</span> LocalDateTime updateTime;</span><br></pre></td></tr></table></figure>

<p>3、编写处理器来处理这些注解：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyMetaObjectHandler</span> <span class="keyword">implements</span> <span class="title class_">MetaObjectHandler</span> &#123;</span><br><span class="line">    <span class="comment">// 插入的填充策略</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;start insert fill ....&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.strictInsertFill(metaObject, <span class="string">&quot;createTime&quot;</span>, LocalDateTime.class, LocalDateTime.now());</span><br><span class="line">        <span class="built_in">this</span>.strictInsertFill(metaObject, <span class="string">&quot;updateTime&quot;</span>, LocalDateTime.class, LocalDateTime.now());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新的填充策略</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;start update fill ....&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.strictUpdateFill(metaObject, <span class="string">&quot;updateTime&quot;</span>, LocalDateTime.class, LocalDateTime.now());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3、测试插入：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testSave</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setName(<span class="string">&quot;木又枯了&quot;</span>);</span><br><span class="line">    user.setAge(<span class="number">18</span>);</span><br><span class="line">    user.setEmail(<span class="string">&quot;example@gmail.com&quot;</span>);</span><br><span class="line">    <span class="comment">// 这里使用 MP 默认主键 ID 生成策略</span></span><br><span class="line">    userMapper.insert(user); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4、查看数据库：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/MyBatisPlus/%E6%95%B0%E6%8D%AE%E8%87%AA%E5%8A%A8%E5%A1%AB%E5%85%85.png" alt="数据自动填充"></p>
<h1 id="12-乐观锁插件"><a href="#12-乐观锁插件" class="headerlink" title="12. 乐观锁插件"></a>12. 乐观锁插件</h1><p>与乐观锁相对的有：<strong>悲观锁</strong></p>
<ul>
<li>悲观锁在数据修改前加锁，避免其他事务修改，确保数据安全但可能降低并发性能。</li>
<li>乐观锁则假设冲突少，只在数据提交时验证冲突，提高并发性能但可能需处理更多冲突。</li>
</ul>
<p>官方解释：<a href="https://baomidou.com/pages/0d93c0/#optimisticlockerinnerinterceptor">乐观锁插件</a></p>
<p>目的：当要更新一条记录的时候，希望这条记录没有被别人更新。</p>
<p>乐观锁实现方式：</p>
<ul>
<li>取出记录时，获取当前 version</li>
<li>更新时，带上这个 version</li>
<li>执行更新时， set version &#x3D; newVersion where version &#x3D; oldVersion</li>
<li>如果 version 不对，就更新失败</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 假设有两个线程 A、B 同时修改一条记录</span></span><br><span class="line"><span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> name <span class="operator">=</span> &quot;木又枯了&quot;, version <span class="operator">=</span> version <span class="operator">+</span> <span class="number">1</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">6</span> <span class="keyword">and</span> version <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"><span class="comment">-- 但是 B 抢先完成了修改，version 修改成 2</span></span><br><span class="line"><span class="comment">-- 这个时候 A 就不能修改数据了，实现线程通信的安全</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>乐观锁插件实现步骤</p>
</blockquote>
<p>1、我们给 <code>user</code> 表添加一个 <code>version</code> 字段，设置默认值为 1 ：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">user</span> <span class="keyword">add</span> version <span class="type">int</span> <span class="keyword">default</span> b<span class="string">&#x27;1&#x27;</span> <span class="keyword">null</span> comment <span class="string">&#x27;乐观锁&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>添加结果如下：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/MyBatisPlus/%E6%B7%BB%E5%8A%A0version%E5%AD%97%E6%AE%B5.png" alt="添加version字段"></p>
<p>2、给实体类增加相应的字段，并添加注解 <code>@Version</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Version</span></span><br><span class="line"><span class="keyword">private</span> Integer version;</span><br></pre></td></tr></table></figure>

<p>3、注册组件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.muyoukule.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">mybatisPlusInterceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        mybatisPlusInterceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">OptimisticLockerInnerInterceptor</span>());</span><br><span class="line">        <span class="keyword">return</span> mybatisPlusInterceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4、编写测试方法进行测试：</p>
<p><strong>PS：要想实现乐观锁，首先第一步应该是拿到表中的 version，然后拿 version 当条件再将 version 加 1 更新回到数据库表中，所以我们需要<font color="red">先对其进行查询</font></strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 测试乐观锁</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testOptimisticLocker</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 查询</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectById(<span class="number">2L</span>);</span><br><span class="line">    <span class="comment">// 修改信息</span></span><br><span class="line">    user.setName(<span class="string">&quot;muyoukule&quot;</span>);</span><br><span class="line">    user.setAge(<span class="number">18</span>);</span><br><span class="line">    user.setEmail(<span class="string">&quot;example@gmail.com&quot;</span>);</span><br><span class="line">    <span class="comment">// 更新信息</span></span><br><span class="line">    userMapper.updateById(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>5、查看数据库：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/MyBatisPlus/%E4%B9%90%E8%A7%82%E9%94%81%E4%BF%AE%E6%94%B9%E6%88%90%E5%8A%9F.png" alt="乐观锁修改成功"></p>
<p>我们再来测试一下修改失败的情况，模拟一种加锁的情况，看看能不能实现多个人修改同一个数据的时候，只能有一个人修改成功。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testOptimisticLocker2</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 1.先通过要修改的数据 id 将当前数据查询出来</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectById(<span class="number">2L</span>);     <span class="comment">//version=2</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> userMapper.selectById(<span class="number">2L</span>);    <span class="comment">//version=2</span></span><br><span class="line">    user2.setName(<span class="string">&quot;muyoukule222&quot;</span>);</span><br><span class="line">    userMapper.updateById(user2);              <span class="comment">//version=&gt;3</span></span><br><span class="line"></span><br><span class="line">    user.setName(<span class="string">&quot;muyoukule111&quot;</span>);</span><br><span class="line">    userMapper.updateById(user);               <span class="comment">//verion=2?条件还成立吗？</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果没有乐观锁，最后一次的修改会覆盖前一次的修改，但是有了乐观锁就不会出现这种情况了。查看数据库修改结果：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/MyBatisPlus/%E4%B9%90%E8%A7%82%E9%94%81%E4%BF%AE%E6%94%B9%E5%A4%B1%E8%B4%A5.png" alt="乐观锁修改失败"></p>
<p>查看数据库后发现 <code>muyoukule111</code> 并未覆盖 <code>muyoukule222</code> 。</p>
<h1 id="12-分页插件"><a href="#12-分页插件" class="headerlink" title="12. 分页插件"></a>12. 分页插件</h1><p>在未引入分页插件的情况下，<code>MP </code>是不支持分页功能的，<code>IService</code> 和 <code>BaseMapper</code> 中的分页方法都无法正常起效。 所以，我们必须配置分页插件。</p>
<p>1、配置分页插件：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.muyoukule.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加分页插件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>(DbType.MYSQL));<span class="comment">//如果配置多个插件,切记分页最后添加</span></span><br><span class="line">        <span class="comment">//interceptor.addInnerInterceptor(new PaginationInnerInterceptor()); 如果有多数据源可以不配具体类型 否则都建议配上具体的DbType</span></span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2、编写一个分页查询的测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testPageQuery</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 1.分页查询，new Page()的两个参数分别是：页码、每页大小</span></span><br><span class="line">    Page&lt;User&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">    userMapper.selectPage(page, <span class="literal">null</span>);</span><br><span class="line">    <span class="comment">// 2.总条数</span></span><br><span class="line">    System.out.println(<span class="string">&quot;total = &quot;</span> + page.getTotal());</span><br><span class="line">    <span class="comment">// 3.总页数</span></span><br><span class="line">    System.out.println(<span class="string">&quot;pages = &quot;</span> + page.getPages());</span><br><span class="line">    <span class="comment">// 4.数据</span></span><br><span class="line">    List&lt;User&gt; records = page.getRecords();</span><br><span class="line">    records.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3、控制台输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">total = 8</span><br><span class="line">pages = 4</span><br><span class="line">User(id=4, name=Sandy, age=19, email=test4@baomidou.com, deleted=false, status=NORMAL, info=null, createTime=null, updateTime=null, version=1)</span><br><span class="line">User(id=5, name=Billie, age=24, email=test5@baomidou.com, deleted=false, status=NORMAL, info=null, createTime=null, updateTime=null, version=1)</span><br></pre></td></tr></table></figure>

<p><strong>PS：由于前面我们使用了逻辑删除，<code>deleted</code> 值为 1 的字段不会被查询到，所以数据表一共是 8 条记录。</strong></p>
<p>4、对比数据库数据：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/MyBatisPlus/%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2%E6%95%B0%E6%8D%AE%E5%BA%93%E6%95%B0%E6%8D%AE%E5%AF%B9%E6%AF%94.png" alt="分页查询数据库数据对比"></p>
]]></content>
      <categories>
        <category>SSM</category>
      </categories>
      <tags>
        <tag>MyBatisPlus</tag>
      </tags>
  </entry>
  <entry>
    <title>【第2章】 @RequestMapping注解</title>
    <url>/posts/SpringMVC-Chapter-Two-@RequestMapping/</url>
    <content><![CDATA[<p>参考视频：<a href="https://www.bilibili.com/video/BV1sC411L76f/">SpringMVC教程，SpringMVC从零到精通，老杜SpringMVC，动力节点SpringMVC</a></p>
<h1 id="1-RequestMapping的作用"><a href="#1-RequestMapping的作用" class="headerlink" title="1. RequestMapping的作用"></a>1. RequestMapping的作用</h1><p><code>@RequestMapping</code> 注解是 Spring MVC 框架中的一个控制器映射注解，用于将请求映射到相应的处理方法上。具体来说，它可以将指定 URL 的请求绑定到一个特定的方法或类上，从而实现对请求的处理和响应。</p>
<h1 id="2-RequestMapping的出现位置"><a href="#2-RequestMapping的出现位置" class="headerlink" title="2. RequestMapping的出现位置"></a>2. RequestMapping的出现位置</h1><p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/SpringMVC/RequestMapping%E7%9A%84%E5%87%BA%E7%8E%B0%E4%BD%8D%E7%BD%AE.png" alt="RequestMapping的出现位置"></p>
<p>通过RequestMapping的源码可以看到RequestMapping注解只能出现在<code>类</code>上或者<code>方法</code>上。</p>
<h1 id="3-类上与方法上结合使用"><a href="#3-类上与方法上结合使用" class="headerlink" title="3. 类上与方法上结合使用"></a>3. 类上与方法上结合使用</h1><p>我们先来看，在同一个web应用中，是否可以有两个完全一样的<code>RequestMapping</code>。测试一下：假设两个RequestMapping，其中一个是展示用户详细信息，另一个是展示商品详细信息。提供两个Controller，一个是<code>UserController</code>，另一个是<code>ProductController</code>。如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/detail&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toDetail</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;detail&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/detail&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toDetail</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;detail&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上两个Controller的RequestMapping相同，都是 <code>/detail</code>，我们来启动服务器异常发生了，异常信息如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">org.springframework.beans.factory.BeanCreationException: </span><br><span class="line">Error creating bean with name &#x27;org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping&#x27;: </span><br><span class="line">Ambiguous mapping. Cannot map &#x27;userController&#x27; method </span><br><span class="line">com.powernode.springmvc.controller.UserController#toDetail()</span><br><span class="line">to &#123; [/detail]&#125;: There is already &#x27;productController&#x27; bean method</span><br><span class="line">com.powernode.springmvc.controller.ProductController#toDetail() mapped.</span><br></pre></td></tr></table></figure>
<p>以上异常信息大致的意思是：不明确的映射。无法映射UserController中的toDetail()方法，因为已经在ProductController中映射过了！！！！</p>
<p>通过测试得知，在同一个webapp中，RequestMapping必须具有唯一性。怎么解决以上问题？两种解决方案：</p>
<ul>
<li>第一种方案：将方法上RequestMapping的映射路径修改的不一样。</li>
<li>第二种方案：在类上添加RequestMapping的映射路径，以类上的RequestMapping作为命名空间，来加以区分两个不同的映射。</li>
</ul>
<h2 id="3-1-第一种方案"><a href="#3-1-第一种方案" class="headerlink" title="3.1 第一种方案"></a>3.1 第一种方案</h2><p>将方法上RequestMapping的映射路径修改的不一样。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/user/detail&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toDetail</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;/user/detail&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/product/detail&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toDetail</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;/product/detail&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>新建<code>templates</code>目录为这两个请求分别提供对应的视图页面：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/SpringMVC/%E4%B8%A4%E4%B8%AA%E8%AF%B7%E6%B1%82%E5%AF%B9%E5%BA%94%E7%9A%84%E8%A7%86%E5%9B%BE%E9%A1%B5%E9%9D%A2.png" alt="两个请求对应的视图页面"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>商品详情页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>商品详情<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>用户详情页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>用户详情<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>新增一个 IndexController</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IndexController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toIndex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在首页面添加两个超链接：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>index page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>index page<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/user/detail&#125;&quot;</span>&gt;</span>用户详情<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/product/detail&#125;&quot;</span>&gt;</span>商品详情<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>启动Tomcat服务器就没有报错了，访问 <code>http://localhost:8080/springmvc/</code> 测试：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/SpringMVC/%E7%94%A8%E6%88%B7%E8%AF%A6%E6%83%85%E5%92%8C%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85.png" alt="用户详情和商品详情"></p>
<p>点击用户详情，点击商品详情，也都可以正常显示。</p>
<h2 id="3-2-第二种方案"><a href="#3-2-第二种方案" class="headerlink" title="3.2 第二种方案"></a>3.2 第二种方案</h2><p>在类上和方法上都使用RequestMapping注解来进行路径的映射。假设在类上映射的路径是<code>/a</code>，在方法上映射的路径是<code>/b</code>，那么整体表示映射的路径就是：<code>/a/b</code></p>
<p>在第一种方案中，假设UserController类中有很多方法，每个方法的 RequestMapping注解中都需要以<code>/user</code>开始，显然比较啰嗦，干脆将<code>/user</code>提升到类级别上，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/detail&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toDetail</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;/user/detail&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/product&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/detail&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toDetail</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;/product/detail&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>经过测试，程序可以正常执行！！！</p>
<h1 id="4-RequestMpping注解的value属性"><a href="#4-RequestMpping注解的value属性" class="headerlink" title="4. RequestMpping注解的value属性"></a>4. RequestMpping注解的value属性</h1><h2 id="4-1-value属性的使用"><a href="#4-1-value属性的使用" class="headerlink" title="4.1 value属性的使用"></a>4.1 value属性的使用</h2><p>value属性是该注解最核心的属性，value属性填写的是请求路径，也就是说通过该请求路径与对应的控制器的方法绑定在一起。另外通过源码可以看到value属性是一个字符串数组：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@AliasFor(&quot;path&quot;)</span></span><br><span class="line">String[] value() <span class="keyword">default</span> &#123;&#125;;</span><br></pre></td></tr></table></figure>

<p>既然是数组，就表示可以提供多个路径，也就是说，在SpringMVC中，多个不同的请求路径可以映射同一个控制器的同一个方法。</p>
<blockquote>
<p>测试</p>
</blockquote>
<p>1、编写新的控制器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestMappingTestController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(value = &#123;&quot;/testValue1&quot;, &quot;/testValue2&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testValue</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;testValue&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、提供视图页面：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>test Value<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Test RequestMapping&#x27;s Value<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>3、在index.html文件中添加两个超链接：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>index page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>index page<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/user/detail&#125;&quot;</span>&gt;</span>用户详情<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/product/detail&#125;&quot;</span>&gt;</span>商品详情<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--测试RequestMapping的value属性--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/testValue1&#125;&quot;</span>&gt;</span>testValue1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/testValue2&#125;&quot;</span>&gt;</span>testValue2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>4、启动服务器，点击刚刚添加的两个超链接，发送请求，都可以正常访问到同一个控制器上的同一个方法！！</p>
<h2 id="4-2-Ant风格的value"><a href="#4-2-Ant风格的value" class="headerlink" title="4.2 Ant风格的value"></a>4.2 Ant风格的value</h2><p>value是可以用来匹配路径的，路径支持模糊匹配，我们把这种模糊匹配称之为Ant风格。关于路径中的通配符包括：</p>
<ul>
<li><code>?</code>：代表任意一个字符（除 <code>/</code>、 <code>?</code> 之外的其它字符）<font color="red">PS：一定是一个字符哦！不能空着！！</font></li>
<li><code>*</code>：代表0到N个任意字符（除 <code>/</code> 、<code>?</code> 之外的其它字符）</li>
<li><code>**</code>：代表0到N个任意字符，并且路径中可以出现路径分隔符 <code>/</code></li>
</ul>
<p><font color="red">PS：<code>**</code> 通配符在使用时，左右不能出现字符 ，<code>**</code> 左边只能是 <code>/</code></font></p>
<blockquote>
<p>测试 <code>?</code> 通配符</p>
</blockquote>
<p>1、在 RequestMappingTestController 中添加以下方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/x?z/testValueAnt&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testValueAnt</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;testValueAnt&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、提供视图页面：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>test Value Ant<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>测试RequestMapping注解的value属性支持模糊匹配<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>3、在index.html页面中编写超链接：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--测试RequestMapping注解的value属性支持模糊匹配--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/xyz/testValueAnt&#125;&quot;</span>&gt;</span>测试value属性的模糊匹配<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>4、测试结果如下：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/SpringMVC/%E6%B5%8B%E8%AF%95%E9%80%9A%E9%85%8D%E7%AC%A6.png" alt="测试通配符"></p>
<p>通过修改浏览器地址栏上的路径，可以反复测试通配符 ? 的语法：</p>
<p><a href="http://localhost:8080/springmvc/xaz/testValueAnt">http://localhost:8080/springmvc/xaz/testValueAnt</a></p>
<p><a href="http://localhost:8080/springmvc/x+z/testValueAnt">http://localhost:8080/springmvc/x+z/testValueAnt</a></p>
<p><a href="http://localhost:8080/springmvc/x:z/testValueAnt">http://localhost:8080/springmvc/x:z/testValueAnt</a></p>
<p>以上三种写法均访问<strong>成功</strong>。</p>
<p><a href="http://localhost:8080/springmvc/xaaz/testValueAnt">http://localhost:8080/springmvc/xaaz/testValueAnt</a></p>
<p><a href="http://localhost:8080/springmvc/xz/testValueAnt">http://localhost:8080/springmvc/xz/testValueAnt</a></p>
<p><a href="http://localhost:8080/springmvc/x?z/testValueAnt">http://localhost:8080/springmvc/x?z/testValueAnt</a></p>
<p><a href="http://localhost:8080/springmvc/x/z/testValueAnt">http://localhost:8080/springmvc/x/z/testValueAnt</a></p>
<p>以上四种写法均访问<strong>失败</strong>。</p>
<blockquote>
<p>测试 <code>*</code> 通配符</p>
</blockquote>
<p>1、将 <code>?</code> 通配符修改为 <code>*</code> 通配符：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/x*z/testValueAnt&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testValueAnt</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;testValueAnt&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、重启Tomcat，打开浏览器直接在地址栏上输入路径进行测试：</p>
<p><a href="http://localhost:8080/springmvc/xaaz/testValueAnt">http://localhost:8080/springmvc/xaaz/testValueAnt</a></p>
<p><a href="http://localhost:8080/springmvc/xz/testValueAnt">http://localhost:8080/springmvc/xz/testValueAnt</a></p>
<p>以上两种写法均访问<strong>成功</strong>。</p>
<p><a href="http://localhost:8080/springmvc/xaa/testValueAnt">http://localhost:8080/springmvc/xaa/testValueAnt</a></p>
<p>以上这种写法访问<strong>失败</strong>。</p>
<blockquote>
<p>测试 <code>**</code> 通配符</p>
</blockquote>
<p>1、将 <code>*</code> 通配符修改为 <code>**</code> 通配符：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/x**z/testValueAnt&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testValueAnt</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;testValueAnt&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、重启Tomcat，打开浏览器直接在地址栏上输入路径进行测试：</p>
<p><a href="http://localhost:8080/springmvc/xa/az/testValueAnt">http://localhost:8080/springmvc/xa/az/testValueAnt</a></p>
<p>以上这种写法访问<strong>失败</strong>。</p>
<p><font color="red">PS：<code>/x**z/</code> 实际上并没有使用通配符 <code>**</code>，本质上还是使用的 <code>*</code>，因为通配符 <code>**</code> 在使用的时候，左右两边都不能有任何字符，必须是 <code>/</code></font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/**/testValueAnt&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testValueAnt</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;testValueAnt&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>启动服务器发现报错了：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/SpringMVC/%E9%80%9A%E9%85%8D%E7%AC%A6%E5%AF%BC%E8%87%B4%E9%A1%B9%E7%9B%AE%E6%8A%A5%E9%94%99.png" alt="通配符导致项目报错"></p>
<p>以上写法在Spring5的时候是支持的，但是在Spring6中进行了严格的规定，<code>**</code> 通配符只能出现在路径的末尾，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testValueAnt/**&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testValueAnt</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;testValueAnt&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试结果：</p>
<p><a href="http://localhost:8080/springmvc/testValueAnt">http://localhost:8080/springmvc/testValueAnt</a></p>
<p><a href="http://localhost:8080/springmvc/testValueAnt/a/b/c/d">http://localhost:8080/springmvc/testValueAnt/a/b/c/d</a></p>
<p>以上两种写法均访问<strong>成功</strong>。</p>
<h2 id="4-3-value中的占位符（重点）"><a href="#4-3-value中的占位符（重点）" class="headerlink" title="4.3 value中的占位符（重点）"></a>4.3 value中的占位符（重点）</h2><p>到目前为止，我们的请求路径是这样的格式：<code>url?name1=value1&amp;name2=value2&amp;name3=value3</code></p>
<p>其实除了这种方式，还有另外一种格式的请求路径，格式为：<code>url/value1/value2/value3</code>，我们将这样的请求路径叫做 <code>RESTful</code> 风格的请求路径。RESTful风格的请求路径在现代的开发中使用较多。</p>
<p>普通的请求路径：<code>http://localhost:8080/springmvc/login?username=admin&amp;password=123&amp;age=20</code></p>
<p>RESTful风格的请求路径：<code>http://localhost:8080/springmvc/login/admin/123/20</code></p>
<p>如果使用RESTful风格的请求路径，在控制器中应该如何获取请求中的数据呢？</p>
<p>可以在value属性中使用占位符，例如：<code>/login/&#123;id&#125;/&#123;username&#125;/&#123;password&#125;</code></p>
<p>1、在 RequestMappingTestController 类中添加一个方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/testRESTful/&#123;id&#125;/&#123;username&#125;/&#123;age&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testRESTful</span><span class="params">(</span></span><br><span class="line"><span class="params">    <span class="meta">@PathVariable(&quot;id&quot;)</span></span></span><br><span class="line"><span class="params">    <span class="type">int</span> id,</span></span><br><span class="line"><span class="params">    <span class="meta">@PathVariable(&quot;username&quot;)</span></span></span><br><span class="line"><span class="params">    String username,</span></span><br><span class="line"><span class="params">    <span class="meta">@PathVariable(&quot;age&quot;)</span></span></span><br><span class="line"><span class="params">    <span class="type">int</span> age)</span> &#123;</span><br><span class="line">    System.out.println(id + <span class="string">&quot;,&quot;</span> + username + <span class="string">&quot;,&quot;</span> + age);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;testRESTful&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、提供视图页面：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>test RESTful<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>测试value属性使用占位符<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>3、在 index.html 页面中添加超链接：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--测试RequestMapping注解的value属性支持占位符--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/testRESTful/1/zhangsan/20&#125;&quot;</span>&gt;</span>测试value属性使用占位符<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>4、启动服务器测试：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/SpringMVC/%E6%B5%8B%E8%AF%95%E5%8D%A0%E4%BD%8D%E7%AC%A6.png" alt="测试占位符"></p>
<p>5、查看控制台：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1,zhangsan,20</span><br></pre></td></tr></table></figure>

<h1 id="5-RequestMapping注解的method属性"><a href="#5-RequestMapping注解的method属性" class="headerlink" title="5. RequestMapping注解的method属性"></a>5. RequestMapping注解的method属性</h1><h2 id="5-1-method属性的作用"><a href="#5-1-method属性的作用" class="headerlink" title="5.1 method属性的作用"></a>5.1 method属性的作用</h2><p>在Servlet当中，如果后端要求前端必须发送一个<code>post</code>请求，后端可以通过重写<code>doPost</code>方法来实现。后端要求前端必须发送一个<code>get</code>请求，后端可以通过重写<code>doGet</code>方法来实现。当重写的方法是<code>doPost</code>时，前端就必须发送<code>post</code>请求，当重写<code>doGet</code>方法时，前端就必须发送<code>get</code>请求。如果前端发送请求的方式和后端的处理方式不一致时，会出现<code>405</code>错误。</p>
<p><strong>HTTP状态码405，这种机制的作用是：限制客户端的请求方式，以保证服务器中数据的安全。</strong></p>
<p>假设后端程序要处理的请求是一个登录请求，为了保证登录时的用户名和密码不被显示到浏览器的地址栏上，后端程序有义务要求前端必须发送一个<code>post</code>请求，如果前端发送<code>get</code>请求，则应该拒绝。</p>
<p>那么在SpringMVC框架中应该如何实现这种机制呢？可以使用RequestMapping注解的<code>method</code>属性来实现。</p>
<p>通过RequestMapping源码可以看到，method属性也是一个数组：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">RequestMethod[] method() <span class="keyword">default</span> &#123;&#125;;</span><br></pre></td></tr></table></figure>

<p>数组中的每个元素是 RequestMethod，而RequestMethod是一个枚举类型的数据：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">RequestMethod</span> &#123;</span><br><span class="line">    GET,</span><br><span class="line">    HEAD,</span><br><span class="line">    POST,</span><br><span class="line">    PUT,</span><br><span class="line">    PATCH,</span><br><span class="line">    DELETE,</span><br><span class="line">    OPTIONS,</span><br><span class="line">    TRACE;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// -- skip --</span></span><br><span class="line">    </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>因此如果要求前端发送POST请求，该注解应该这样用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/login&quot;, method = RequestMethod.POST)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">login</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接下来，我们来测试一下：</p>
<p>1、在RequestMappingTestController类中添加以下方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/login&quot;, method = RequestMethod.POST)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testMethod</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;testMethod&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、提供视图页面：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>test Method<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Login Success!!!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3、在index.html页面中提供一个登录的form表单，后端要求发送<code>post</code>请求，则form表单的method属性应设置为<code>post</code>：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--测试RequestMapping的method属性--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/login&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>4、启动服务器，测试：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/SpringMVC/%E8%A1%A8%E5%8D%95post%E6%8F%90%E4%BA%A4.png" alt="表单post提交"></p>
<p>通过测试，前端发送的请求方式<code>post</code>，后端处理请求的方式也是<code>post</code>，就不会有问题。</p>
<p>当然，如果后端要求前端必须发送<code>post</code>请求，而前端发送了<code>get</code>请求，则会出现<code>405</code>错误，将index.html中form表单提交方式修改为<code>get</code>：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--测试RequestMapping的method属性--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/login&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>&gt;</span></span><br><span class="line">&lt;/form</span><br></pre></td></tr></table></figure>
<p>再次测试：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/SpringMVC/%E8%A1%A8%E5%8D%95get%E6%8F%90%E4%BA%A4.png" alt="表单get提交"></p>
<p><strong>因此，可以看出，对于RequestMapping注解来说，多一个属性，就相当于多了一个映射的条件，如果<code>value</code>和<code>method</code>属性都有，则表示只有前端发送的<code>请求路径 + 请求方式</code>都满足时才能与控制器上的方法建立映射关系，只要有一个不满足，则无法建立映射关系。</strong></p>
<p>例如：<code>@RequestMapping(value=&quot;/login&quot;, method = RequestMethod.POST)</code> 表示当前端发送的请求路径是 <code>/login</code>，并且发送请求的方式是<code>POST</code>的时候才会建立映射关系。如果前端发送的是<code>get</code>请求，或者前端发送的请求路径不是 <code>/login</code>，则都是无法建立映射的。</p>
<h2 id="5-2-衍生Mapping"><a href="#5-2-衍生Mapping" class="headerlink" title="5.2 衍生Mapping"></a>5.2 衍生Mapping</h2><p>对于以上的程序来说，SpringMVC提供了另一个注解，使用这个注解更加的方便，它就是：<code>@PostMapping</code></p>
<p>使用该注解时，不需要指定method属性，因为它默认采用的就是<code>POST</code>处理方式：</p>
<p>修改RequestMappingTestController代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//@RequestMapping(value=&quot;/login&quot;, method = RequestMethod.POST)</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testMethod</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;testMethod&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当前端发送<code>get</code>请求时，测试一下：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/SpringMVC/%E8%A1%A8%E5%8D%95get%E6%8F%90%E4%BA%A4.png" alt="表单get提交"></p>
<p>当前端发送<code>post</code>请求时，测试一下：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/SpringMVC/%E8%A1%A8%E5%8D%95post%E6%8F%90%E4%BA%A4.png" alt="表单post提交"></p>
<p>在SpringMVC中不仅提供了 <code>@PostMaping</code> 注解，像这样的注解还有四个，包括：</p>
<ul>
<li><code>@GetMapping</code>：要求前端必须发送<code>get</code>请求</li>
<li><code>@PutMapping</code>：要求前端必须发送<code>put</code>请求</li>
<li><code>@DeleteMapping</code>：要求前端必须发送<code>delete</code>请求</li>
<li><code>@PatchMapping</code>：要求前端必须发送<code>patch</code>请求</li>
</ul>
<h2 id="5-3-web的请求方式"><a href="#5-3-web的请求方式" class="headerlink" title="5.3 web的请求方式"></a>5.3 web的请求方式</h2><p>前端向服务器发送请求的方式包括哪些？共9种，前5种常用，后面作为了解：</p>
<ul>
<li><strong>GET</strong>：获取资源，只允许读取数据，不影响数据的状态和功能。使用 URL 中传递参数或者在 HTTP 请求的头部使用参数，服务器返回请求的资源。</li>
<li><strong>POST</strong>：向服务器提交资源，可能还会改变数据的状态和功能。通过表单等方式提交请求体，服务器接收请求体后，进行数据处理。</li>
<li><strong>PUT</strong>：更新资源，用于更新指定的资源上所有可编辑内容。通过请求体发送需要被更新的全部内容，服务器接收数据后，将被更新的资源进行替换或修改。</li>
<li><strong>DELETE</strong>：删除资源，用于删除指定的资源。将要被删除的资源标识符放在 URL 中或请求体中。</li>
<li><strong>HEAD</strong>：请求服务器返回资源的头部，与 GET 命令类似，但是所有返回的信息都是头部信息，不能包含数据体。主要用于资源检测和缓存控制。</li>
<li>PATCH：部分更改请求。当被请求的资源是可被更改的资源时，请求服务器对该资源进行部分更新，即每次更新一部分。</li>
<li>OPTIONS：请求获得服务器支持的请求方法类型，以及支持的请求头标志。“OPTIONS *”则返回支持全部方法类型的服务器标志。</li>
<li>TRACE：服务器响应输出客户端的 HTTP 请求，主要用于调试和测试。</li>
<li>CONNECT：建立网络连接，通常用于加密 SSL&#x2F;TLS 连接。</li>
</ul>
<p><strong>注意：</strong></p>
<ul>
<li>使用超链接以及原生的form表单只能提交get和post请求，put、delete、head请求可以使用发送ajax请求的方式来实现。</li>
<li>使用超链接发送的是get请求</li>
<li>使用form表单，如果没有设置method，发送get请求</li>
<li>使用form表单，设置method&#x3D;”get”，发送get请求</li>
<li>使用form表单，设置method&#x3D;”post”，发送post请求</li>
<li><strong>使用form表单，设置method&#x3D;”put&#x2F;delete&#x2F;head”，发送get请求。（针对这种情况，可以测试一下）</strong></li>
</ul>
<p>将index.html中登录表单的提交方式method设置为<code>put</code>：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--测试RequestMapping的method属性--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/login&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;put&quot;</span>&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>修改RequestMappingTestController类的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/login&quot;, method = RequestMethod.PUT)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testMethod</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;testMethod&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试结果：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/SpringMVC/%E8%A1%A8%E5%8D%95put%E6%8F%90%E4%BA%A4.png" alt="表单put提交"></p>
<p>通过测试得知，即使form中method设置为<code>put</code>方式，但仍然采用<code>get</code>方式发送请求。</p>
<p>再次修改RequestMappingTestController：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/login&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testMethod</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;testMethod&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>再次测试：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/SpringMVC/%E9%87%87%E7%94%A8get%E6%96%B9%E5%BC%8F%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82.png" alt="采用get方式发送请求"></p>
<h2 id="5-4-GET和POST的区别"><a href="#5-4-GET和POST的区别" class="headerlink" title="5.4 GET和POST的区别"></a>5.4 GET和POST的区别</h2><p>HTTP请求协议之<code>GET</code>请求：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /springmvc/login?username=lucy&amp;userpwd=1111 HTTP/1.1                           请求行</span><br><span class="line">Host: localhost:8080                                                                    请求头</span><br><span class="line">Connection: keep-alive</span><br><span class="line">sec-ch-ua: &quot;Google Chrome&quot;;v=&quot;95&quot;, &quot;Chromium&quot;;v=&quot;95&quot;, &quot;;Not A Brand&quot;;v=&quot;99&quot;</span><br><span class="line">sec-ch-ua-mobile: ?0</span><br><span class="line">sec-ch-ua-platform: &quot;Windows&quot;</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.54 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line">Sec-Fetch-Site: same-origin</span><br><span class="line">Sec-Fetch-Mode: navigate</span><br><span class="line">Sec-Fetch-User: ?1</span><br><span class="line">Sec-Fetch-Dest: document</span><br><span class="line">Referer: http://localhost:8080/springmvc/index.html</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">                                                                                        空白行</span><br><span class="line">                                                                                        请求体</span><br></pre></td></tr></table></figure>
<p>HTTP请求协议之<code>POST</code>请求：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /springmvc/login HTTP/1.1                                                  请求行</span><br><span class="line">Host: localhost:8080                                                                  请求头</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Content-Length: 25</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">sec-ch-ua: &quot;Google Chrome&quot;;v=&quot;95&quot;, &quot;Chromium&quot;;v=&quot;95&quot;, &quot;;Not A Brand&quot;;v=&quot;99&quot;</span><br><span class="line">sec-ch-ua-mobile: ?0</span><br><span class="line">sec-ch-ua-platform: &quot;Windows&quot;</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Origin: http://localhost:8080</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.54 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line">Sec-Fetch-Site: same-origin</span><br><span class="line">Sec-Fetch-Mode: navigate</span><br><span class="line">Sec-Fetch-User: ?1</span><br><span class="line">Sec-Fetch-Dest: document</span><br><span class="line">Referer: http://localhost:8080/springmvc/index.html</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">                                                                                      空白行</span><br><span class="line">username=lisi&amp;userpwd=123                                                             请求体</span><br></pre></td></tr></table></figure>

<blockquote>
<p>区别是什么？</p>
</blockquote>
<ul>
<li>get请求发送数据的时候，数据会挂在URI的后面，并且在URI后面添加一个 <code>?</code>，<code>?</code> 后面是数据。这样会导致发送的数据回显在浏览器的地址栏上。<code>http://localhost:8080/springmvc/login?username=zhangsan&amp;userpwd=1111</code></li>
<li>post请求发送数据的时候，在请求体当中发送。不会回显到浏览器的地址栏上。也就是说post发送的数据，在浏览器地址栏上看不到。</li>
<li>get请求只能发送普通的字符串。并且发送的字符串长度有限制，不同的浏览器限制不同。这个没有明确的规范。get请求无法发送大数据量。</li>
<li>post请求可以发送任何类型的数据，包括普通字符串，流媒体等信息：视频、声音、图片。post请求可以发送大数据量，理论上没有长度限制。</li>
<li>get请求在W3C中是这样说的：get请求比较适合从服务器端获取数据。</li>
<li>post请求在W3C中是这样说的：post请求比较适合向服务器端传送数据。</li>
<li>get请求是安全的。因为在正确使用get请求的前提下，get请求只是为了从服务器上获取数据，不会对服务器数据进行修改。</li>
<li>post请求是危险的。因为post请求是修改服务器端的资源。</li>
<li>get请求支持缓存。 也就是说当第二次发送get请求时，会走浏览器上次的缓存结果，不再真正的请求服务器。（有时需要避免，怎么避免：在get请求路径后添加时间戳）</li>
<li>post请求不支持缓存。每一次发送post请求都会真正的走服务器。</li>
</ul>
<blockquote>
<p>怎么选择？</p>
</blockquote>
<ul>
<li>如果你是想从服务器上获取资源，建议使用GET请求，如果你这个请求是为了向服务器提交数据，建议使用POST请求。</li>
<li>大部分的form表单提交，都是post方式，因为form表单中要填写大量的数据，这些数据是收集用户的信息，一般是需要传给服务器，服务器将这些数据保存&#x2F;修改等。</li>
<li>如果表单中有敏感信息，建议使用post请求，因为get请求会回显敏感信息到浏览器地址栏上。（例如：密码信息）</li>
<li>做文件上传，一定是post请求。要传的数据不是普通文本。</li>
<li>其他情况大部分都是使用get请求。</li>
</ul>
<h1 id="6-RequestMapping注解的params属性"><a href="#6-RequestMapping注解的params属性" class="headerlink" title="6. RequestMapping注解的params属性"></a>6. RequestMapping注解的params属性</h1><h2 id="6-1-params属性的理解"><a href="#6-1-params属性的理解" class="headerlink" title="6.1 params属性的理解"></a>6.1 params属性的理解</h2><p><code>params</code>属性用来设置通过请求参数来映射请求。</p>
<p>对于RequestMapping注解来说：</p>
<ul>
<li>value属性是一个数组，只要满足数组中的任意一个路径，就能映射成功</li>
<li>method属性也是一个数组，只要满足数组中任意一个请求方式，就能映射成功。</li>
<li><strong>params属性也是一个数组，不过要求请求参数必须和params数组中要求的所有参数完全一致后，才能映射成功。</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] params() <span class="keyword">default</span> &#123;&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="6-2-params属性的4种用法"><a href="#6-2-params属性的4种用法" class="headerlink" title="6.2 params属性的4种用法"></a>6.2 params属性的4种用法</h2><ul>
<li>@RequestMapping(value&#x3D;”&#x2F;login”, params&#x3D;{<strong>“username”</strong>, “password”}) 表示：请求参数中必须包含 username 和 password，才能与当前标注的方法进行映射。</li>
<li>@RequestMapping(value&#x3D;”&#x2F;login”, params&#x3D;{<strong>“!username”</strong>, “password”}) 表示：请求参数中不能包含username参数，但必须包含password参数，才能与当前标注的方法进行映射。</li>
<li>@RequestMapping(value&#x3D;”&#x2F;login”, params&#x3D;{<strong>“username&#x3D;admin”</strong>, “password”}) 表示：请求参数中必须包含username参数，并且参数的值必须是admin，另外也必须包含password参数，才能与当前标注的方法进行映射。</li>
<li>@RequestMapping(value&#x3D;”&#x2F;login”, params&#x3D;{<strong>“username!&#x3D;admin”</strong>, “password”}) 表示：请求参数中必须包含username参数，但参数的值不能是admin，另外也必须包含password参数，才能与当前标注的方法进行映射。</li>
</ul>
<p><font color="red">PS：如果前端提交的参数，和后端要求的请求参数不一致，则出现<code>400</code>错误！！！</font></p>
<p><font color="red"><strong>HTTP状态码400的原因：请求参数格式不正确</strong></font>😆</p>
<h2 id="6-3-测试params属性"><a href="#6-3-测试params属性" class="headerlink" title="6.3 测试params属性"></a>6.3 测试params属性</h2><p>1、在 RequestMappingTestController 类中添加如下方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/testParams&quot;, params = &#123;&quot;username&quot;, &quot;password&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testParams</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;testParams&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、提供视图页面：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>testParams<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>测试RequestMapping注解的Params属性<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>3、在index.html文件中添加超链接：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--测试RequestMapping的params属性--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/testParams(username=&#x27;admin&#x27;,password=&#x27;123&#x27;)&#125;&quot;</span>&gt;</span>测试params属性<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>当然，你也可以这样写：这样写IDEA会报错，但不影响使用。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/testParams?username=admin&amp;password=123&#125;&quot;</span>&gt;</span>测试params属性<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>4、启动服务器，测试：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/SpringMVC/%E6%B5%8B%E8%AF%95params%E5%B1%9E%E6%80%A7.png" alt="测试params属性"></p>
<p>假如发送请求时，没有传递username参数会怎样？</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/testParams(password=&#x27;123&#x27;)&#125;&quot;</span>&gt;</span>测试params属性<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>启动服务器，测试：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/SpringMVC/%E6%9C%AA%E4%BC%A0%E9%80%92username%E5%8F%82%E6%95%B0.png" alt="未传递username参数"></p>
<p>提示无效的请求参数，服务器无法或不会处理当前请求。</p>
<p>params属性剩下的三种情况，自行测试！！！！</p>
<h1 id="7-RequestMapping注解的headers属性"><a href="#7-RequestMapping注解的headers属性" class="headerlink" title="7. RequestMapping注解的headers属性"></a>7. RequestMapping注解的headers属性</h1><h2 id="7-1-认识headers属性"><a href="#7-1-认识headers属性" class="headerlink" title="7.1 认识headers属性"></a>7.1 认识headers属性</h2><p><code>headers</code>和<code>params</code>原理相同，用法也相同。</p>
<p>当前端提交的请求头信息和后端要求的请求头信息一致时，才能映射成功。</p>
<p>请求头信息怎么查看？</p>
<p>在浏览器中，F12打开控制台，找到Network，可以查看具体的请求协议和响应协议。在请求协议中可以看到请求头信息，例如：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/SpringMVC/%E6%9F%A5%E7%9C%8B%E8%AF%B7%E6%B1%82%E5%A4%B4%E4%BF%A1%E6%81%AF.png" alt="查看请求头信息"></p>
<p>请求头信息和请求参数信息一样，都是键值对形式，例如上图中：</p>
<ul>
<li><code>Referer: http://localhost:8080/springmvc/</code>     键是<code>Referer</code>，值是<code>http://localhost:8080/springmvc/</code></li>
<li><code>Host: localhost:8080</code>     键是<code>Host</code>，值是<code>localhost:8080</code></li>
</ul>
<h2 id="7-2-headers属性的4种用法"><a href="#7-2-headers属性的4种用法" class="headerlink" title="7.2 headers属性的4种用法"></a>7.2 headers属性的4种用法</h2><ul>
<li>@RequestMapping(value&#x3D;”&#x2F;login”, headers&#x3D;{<strong>“Referer”</strong>, “Host”}) 表示：请求头信息中必须包含Referer和Host，才能与当前标注的方法进行映射。</li>
<li>@RequestMapping(value&#x3D;”&#x2F;login”, headers&#x3D;{<strong>“Referer”</strong>, “!Host”}) 表示：请求头信息中必须包含Referer，但不包含Host，才能与当前标注的方法进行映射。</li>
<li>@RequestMapping(value&#x3D;”&#x2F;login”, headers&#x3D;{<strong>“Referer&#x3D;<a href="http://localhost:8080/springmvc/">http://localhost:8080/springmvc/</a>“</strong>, “Host”}) 表示：请求头信息中必须包含Referer和Host，并且Referer的值<strong>必须是</strong><code>http://localhost:8080/springmvc/</code>，才能与当前标注的方法进行映射。</li>
<li>@RequestMapping(value&#x3D;”&#x2F;login”, headers&#x3D;{<strong>“Referer!&#x3D;<a href="http://localhost:8080/springmvc/">http://localhost:8080/springmvc/</a>“</strong>, “Host”}) 表示：请求头信息中必须包含Referer和Host，并且Referer的值<strong>不是</strong><code>http://localhost:8080/springmvc/</code>，才能与当前标注的方法进行映射。</li>
</ul>
<p>PS：如果前端提交的请求头信息，和后端要求的请求头信息不一致，则出现404错误！！！</p>
<h2 id="7-3-测试headers属性"><a href="#7-3-测试headers属性" class="headerlink" title="7.3 测试headers属性"></a>7.3 测试headers属性</h2><p>1、在 RequestMappingTestController 类中添加以下方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/testHeaders&quot;, headers = &#123;&quot;Referer=http://localhost:8080/springmvc/&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testHeaders</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;testHeaders&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、提供视图页面：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>test Headers<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>测试RequestMapping注解的headers属性<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>3、在index.html页面中添加超链接：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--测试RequestMapping的headers属性--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/testHeaders&#125;&quot;</span>&gt;</span>测试headers属性<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>4、启动服务器，测试结果：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/SpringMVC/%E6%B5%8B%E8%AF%95headers%E5%B1%9E%E6%80%A7.png" alt="测试headers属性"></p>
<p>将后端控制器中的headers属性值进行修改：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/testHeaders&quot;, headers = &#123;&quot;Referer=http://localhost:8888/springmvc/&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testHeaders</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;testHeaders&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>再次测试：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/SpringMVC/headers%E9%94%AE%E5%80%BC%E5%AF%B9%E4%B8%8D%E5%8C%B9%E9%85%8D.png" alt="headers键值对不匹配"></p>
<p>其他情况自行测试！！！！</p>
]]></content>
      <categories>
        <category>SSM</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>SpringMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>【第3章】 获取请求数据</title>
    <url>/posts/SpringMVC-Chapter-Three-Get-Request-Data/</url>
    <content><![CDATA[<p>参考视频：<a href="https://www.bilibili.com/video/BV1sC411L76f/">SpringMVC教程，SpringMVC从零到精通，老杜SpringMVC，动力节点SpringMVC</a></p>
<h1 id="0-思考"><a href="#0-思考" class="headerlink" title="0. 思考"></a>0. 思考</h1><p>假设有这样一个请求：</p>
<p><code>http://localhost:8080/springmvc/register?name=muyoukule&amp;password=123&amp;email=muyoukule@example.com</code></p>
<p>在SpringMVC中应该如何获取请求提交的数据呢？</p>
<p>在SpringMVC中又应该如何获取请求头信息呢？</p>
<p>在SpringMVC中又应该如何获取客户端提交的Cookie数据呢？</p>
<h1 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1. 环境准备"></a>1. 环境准备</h1><p>1、创建模块，添加依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.muyoukule<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springmvc-004<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 打包方式设置为war方式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spring MVC依赖 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日志框架Logback依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Servlet依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jakarta.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jakarta.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Spring6和Thymeleaf整合依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-spring6<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2、添加web支持</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/SpringMVC/004%E6%B7%BB%E5%8A%A0web%E6%94%AF%E6%8C%81.png" alt="004添加web支持" style="zoom: 80%;">

<p>3、编写web.xml文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--前端控制器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--通过初始化参数来指定springmvc配置文件的路径和名字。--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--在服务器启动的时候初始化DispatcherServlet，提高第一次访问的效率--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>4、创建UserController</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toRegisterPage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;register&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>5、编写springmvc.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--组件扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.muyoukule.controller&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--视图解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;thymeleafViewResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring6.view.ThymeleafViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--作用于视图渲染的过程中，可以设置视图渲染后输出时采用的编码字符集--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;characterEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--如果配置多个视图解析器，它来决定优先使用哪个视图解析器，它的值越小优先级越高--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;order&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--当 ThymeleafViewResolver 渲染模板时，会使用该模板引擎来解析、编译和渲染模板--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateEngine&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring6.SpringTemplateEngine&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--用于指定 Thymeleaf 模板引擎使用的模板解析器。模板解析器负责根据模板位置、模板资源名称、文件编码等信息，加载模板并对其进行解析--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateResolver&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring6.templateresolver.SpringResourceTemplateResolver&quot;</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!--设置模板文件的位置（前缀）--&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/templates/&quot;</span>/&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!--设置模板文件后缀（后缀），Thymeleaf文件扩展名不一定是html，也可以是其他，例如txt，大部分都是html--&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.html&quot;</span>/&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!--设置模板类型，例如：HTML,TEXT,JAVASCRIPT,CSS等--&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateMode&quot;</span> <span class="attr">value</span>=<span class="string">&quot;HTML&quot;</span>/&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!--用于模板文件在读取和解析过程中采用的编码字符集--&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;characterEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>6、编写register.html文件</p>
<p>在WEB-INF目录下新建<code>templates</code>目录，在templates目录中新建register.html文件：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>用户注册<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>用户注册<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>7、部署测试</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/SpringMVC/%E9%83%A8%E7%BD%B2%E6%B5%8B%E8%AF%95.png" alt="部署测试"></p>
<h1 id="2-使用原生的Servlet-API进行获取"><a href="#2-使用原生的Servlet-API进行获取" class="headerlink" title="2. 使用原生的Servlet API进行获取"></a>2. 使用原生的Servlet API进行获取</h1><p>原生的Servlet API指的是：<code>HttpServletRequest</code></p>
<p>在SpringMVC当中，一个Controller类中的方法参数上如果有<code>HttpServletRequest</code>，SpringMVC会自动将<code>当前请求对象</code>传递给这个参数，因此我们可以通过这个参数来获取请求提交的数据。</p>
<blockquote>
<p>测试</p>
</blockquote>
<p>1、在 register.html 中准备一个注册的表单：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>用户注册<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>用户注册<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/register&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    性别：</span><br><span class="line">    男 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">    女 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    爱好：</span><br><span class="line">    抽烟 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;smoke&quot;</span>&gt;</span></span><br><span class="line">    喝酒 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;drink&quot;</span>&gt;</span></span><br><span class="line">    烫头 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;perm&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    简介：<span class="tag">&lt;<span class="name">textarea</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;60&quot;</span> <span class="attr">name</span>=<span class="string">&quot;intro&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;注册&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>2、先测试这个页面是否可以正常打开，是否可以正常提交数据：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/SpringMVC/%E8%BE%93%E5%85%A5%E6%B3%A8%E5%86%8C%E4%BF%A1%E6%81%AF.png" alt="输入注册信息"></p>
<p>3、点击注册：F12的方式查看是否提交了数据：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/SpringMVC/%E6%9F%A5%E7%9C%8B%E6%98%AF%E5%90%A6%E6%8F%90%E4%BA%A4%E4%BA%86%E6%95%B0%E6%8D%AE.png" alt="查看是否提交了数据"></p>
<p>通过测试得知：可以正常提交数据。</p>
<p>4、接下来在控制器添加一个方法来处理这个注册的请求：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(value=&quot;/register&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">register</span><span class="params">(HttpServletRequest request)</span>&#123;</span><br><span class="line">    <span class="comment">// 通过当前请求对象获取提交的数据</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">sex</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;sex&quot;</span>);</span><br><span class="line">    String[] hobbies = request.getParameterValues(<span class="string">&quot;hobby&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">intro</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;intro&quot;</span>);</span><br><span class="line">    System.out.println(username + <span class="string">&quot;,&quot;</span> + password + <span class="string">&quot;,&quot;</span> + sex + <span class="string">&quot;,&quot;</span> + Arrays.toString(hobbies) + <span class="string">&quot;,&quot;</span> + intro);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>5、提供视图页面：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>注册成功<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>注册成功<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>6、测试：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/SpringMVC/%E8%BE%93%E5%85%A5%E6%B3%A8%E5%86%8C%E4%BF%A1%E6%81%AF.png" alt="输入注册信息"></p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/SpringMVC/%E8%B7%B3%E8%BD%AC%E5%88%B0%E6%B3%A8%E5%86%8C%E6%88%90%E5%8A%9F%E9%A1%B5%E9%9D%A2.png" alt="跳转到注册成功页面"></p>
<p>7、控制台打印：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">muyoukule,123,1,[smoke, drink, perm],66666666</span><br></pre></td></tr></table></figure>

<p><strong>这样通过Servlet原生的API获取到提交的数据。但是这种方式不建议使用，因为方法的参数依赖Servlet原生API，Controller的测试将不能单独测试，必须依赖WEB服务器才能测试。另外，换句话说，如果在SpringMVC中使用了原生的Servlet，你为什么还要用SpringMVC框架呢🙄！！！！！</strong></p>
<h1 id="3-使用-RequestParam注解标注"><a href="#3-使用-RequestParam注解标注" class="headerlink" title="3. 使用@RequestParam注解标注"></a>3. 使用@RequestParam注解标注</h1><h2 id="3-1-RequestParam注解的基本使用"><a href="#3-1-RequestParam注解的基本使用" class="headerlink" title="3.1 @RequestParam注解的基本使用"></a>3.1 @RequestParam注解的基本使用</h2><p><code>@RequestParam</code>注解作用：将<code>请求参数</code>与方法上的<code>形参</code>映射</p>
<p>1、修改register方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(value = &quot;/register&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">register</span><span class="params">(</span></span><br><span class="line"><span class="params">        <span class="meta">@RequestParam(value=&quot;username&quot;)</span></span></span><br><span class="line"><span class="params">        String a,</span></span><br><span class="line"><span class="params">        <span class="meta">@RequestParam(value=&quot;password&quot;)</span></span></span><br><span class="line"><span class="params">        String b,</span></span><br><span class="line"><span class="params">        <span class="meta">@RequestParam(value=&quot;sex&quot;)</span></span></span><br><span class="line"><span class="params">        String c,</span></span><br><span class="line"><span class="params">        <span class="meta">@RequestParam(value=&quot;hobby&quot;)</span></span></span><br><span class="line"><span class="params">        String[] d,</span></span><br><span class="line"><span class="params">        <span class="meta">@RequestParam(name=&quot;intro&quot;)</span></span></span><br><span class="line"><span class="params">        String e)</span> &#123;</span><br><span class="line">    System.out.println(a);</span><br><span class="line">    System.out.println(b);</span><br><span class="line">    System.out.println(c);</span><br><span class="line">    System.out.println(Arrays.toString(d));</span><br><span class="line">    System.out.println(e);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>PS：对于<code>@RequestParam</code>注解来说，属性有<code>value</code>和<code>name</code>，这两个属性的作用相同，都是用来指定提交数据的name。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@AliasFor(&quot;name&quot;)</span></span><br><span class="line">String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@AliasFor(&quot;value&quot;)</span></span><br><span class="line">String <span class="title function_">name</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>例如：发送请求时提交的数据是：<code>name1=value1&amp;name2=value2</code>，则这个注解应该这样写：<code>@RequestParam(value=&quot;name1&quot;),@RequestParam(value=&quot;name2&quot;)</code></p>
<p>2、启动服务器测试：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/SpringMVC/%E8%BE%93%E5%85%A5%E6%B3%A8%E5%86%8C%E4%BF%A1%E6%81%AF2.png" alt="输入注册信息2"></p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/SpringMVC/%E8%B7%B3%E8%BD%AC%E5%88%B0%E6%B3%A8%E5%86%8C%E6%88%90%E5%8A%9F%E9%A1%B5%E9%9D%A2.png" alt="跳转到注册成功页面"></p>
<p>3、控制台打印：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">muyoukule002</span><br><span class="line">123</span><br><span class="line">1</span><br><span class="line">[smoke, drink]</span><br><span class="line">muyoukule666</span><br></pre></td></tr></table></figure>

<p><font color="red"><strong>PS： <code>@RequestParam(value=&quot;name1&quot;)</code> 中value一定要与前端传过来的参数相同，否则会出错。</strong></font>😨</p>
<p>例如：前端传过来的参数为<code>username</code>，而后端接收参数时写的是<code>@RequestParam(value=&quot;uname&quot;)</code>，就会出现如下错误：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/SpringMVC/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%8F%82%E6%95%B0%E4%B8%8D%E5%8C%B9%E9%85%8D%E6%8A%A5%E9%94%99.png" alt="前后端参数不匹配报错"></p>
<h2 id="3-2-RequestParam注解的required属性"><a href="#3-2-RequestParam注解的required属性" class="headerlink" title="3.2 @RequestParam注解的required属性"></a>3.2 @RequestParam注解的required属性</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="title function_">required</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">true</span>;</span><br></pre></td></tr></table></figure>

<p><code>required</code>属性用来设置该方法参数是否为必须的。</p>
<p>默认情况下，这个参数为 <code>true</code>，表示方法参数是必需的。如果请求中缺少对应的参数，则会抛出异常。</p>
<p>可以将其设置为<code>false</code>，false表示不是必须的，如果请求中缺少对应的参数，则方法的参数为null。</p>
<blockquote>
<p>测试</p>
</blockquote>
<p>1、修改register方法，添加一个 age 形参，没有指定 required 属性时，默认是true，表示必需的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 添加一个 age 形参</span></span><br><span class="line"><span class="meta">@RequestParam(name = &quot;age&quot;)</span> String age</span><br></pre></td></tr></table></figure>

<p>2、启动服务器，但前端表单中<strong>没有填写年龄age的输入框</strong>，我们来看报错信息：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/SpringMVC/%E6%9C%AA%E6%8F%90%E4%BE%9B%E5%8F%82%E6%95%B0age%E6%8A%A5%E9%94%99.png" alt="未提供参数age报错"></p>
<p>错误信息告诉我们：参数age是必需的。没有提供这个请求参数，HTTP状态码 400</p>
<p>3、如果将 <code>required</code> 属性设置为 false。则该参数则不是必须的，如果请求参数仍然未提供时，我们来看结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将 required 属性设置为 false</span></span><br><span class="line"><span class="meta">@RequestParam(name = &quot;age&quot;, required = false)</span> String age</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印</span></span><br><span class="line">System.out.println(<span class="string">&quot;age====&gt;&quot;</span> + age);</span><br></pre></td></tr></table></figure>

<p>4、启动服务器，填写信息后<strong>成功</strong>跳转到注册成功页面，控制台打印：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">muyoukule</span><br><span class="line">123</span><br><span class="line">1</span><br><span class="line">[smoke, drink]</span><br><span class="line">muyoukule66666</span><br><span class="line">age====&gt;null</span><br></pre></td></tr></table></figure>

<p>通过测试得知，如果一个参数被设置为<code>不是必需的</code>，当没有提交对应的请求参数时，形参默认值<code>null</code>。</p>
<p>当然，如果请求参数中提供了age，则age为真实提交的数据（<font color="red">PS：未填写信息会返回给后端一个空字符串<code>&quot;&quot;</code></font>）</p>
<p>1、给register.html添加如下输入框：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">年龄：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2、重新启动服务器，填写所有信息后点击注册<strong>成功</strong>跳转到注册成功页面，控制台打印：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">muyoukule</span><br><span class="line">123</span><br><span class="line">1</span><br><span class="line">[smoke, drink, perm]</span><br><span class="line">4245</span><br><span class="line">age====&gt;18</span><br></pre></td></tr></table></figure>

<h2 id="3-3-RequestParam注解的defaultValue属性"><a href="#3-3-RequestParam注解的defaultValue属性" class="headerlink" title="3.3 @RequestParam注解的defaultValue属性"></a>3.3 @RequestParam注解的defaultValue属性</h2><p>defaultValue属性用来设置形参的默认值，当<code>没有提供对应的请求参数</code>或者<code>请求参数的值是空字符串&quot;&quot;</code>的时候，方法的形参会采用默认值。</p>
<blockquote>
<p>测试</p>
</blockquote>
<p>1、给age形参的<code>@RequestParam</code>注解添加一个<code>defaultValue = &quot;18&quot;</code>属性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestParam(name = &quot;age&quot;, required = false,defaultValue = &quot;18&quot;)</span> String age</span><br></pre></td></tr></table></figure>

<p>2、当前端表单中<strong>没有填写年龄age的输入框</strong>，用户正常填写其他信息，点击注册后成功跳转到注册成功界面，控制台打印：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">muyoukule003</span><br><span class="line">123</span><br><span class="line">1</span><br><span class="line">[smoke, drink, perm]</span><br><span class="line">muyoukule003</span><br><span class="line">age====&gt;18</span><br></pre></td></tr></table></figure>

<p>3、给register.html添加如下输入框：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">年龄：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>4、重新启动服务器</p>
<p>当前端页面用户未填写age（提交的age是空字符串<code>&quot;&quot;</code>）的时候，点击注册后成功跳转到注册成功界面，控制台打印：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">muyoukule004</span><br><span class="line">123</span><br><span class="line">1</span><br><span class="line">[smoke, drink, perm]</span><br><span class="line">muyoukule004</span><br><span class="line">age====&gt;18</span><br></pre></td></tr></table></figure>

<p>当前端提交的age不是空字符串的时候：</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/SpringMVC/%E5%A1%AB%E5%86%99age%E6%8F%90%E4%BA%A4%E5%8F%82%E6%95%B0.png" alt="填写age提交参数" style="zoom:67%;">

<p>填写信息后点击注册<strong>成功</strong>跳转到注册成功页面，控制台打印：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">muyoukule005</span><br><span class="line">123</span><br><span class="line">1</span><br><span class="line">[smoke, drink, perm]</span><br><span class="line">muyoukule005</span><br><span class="line">age====&gt;81</span><br></pre></td></tr></table></figure>

<h1 id="4-依靠控制器方法上的形参名来接收"><a href="#4-依靠控制器方法上的形参名来接收" class="headerlink" title="4. 依靠控制器方法上的形参名来接收"></a>4. 依靠控制器方法上的形参名来接收</h1><p><code>@RequestParam</code> 这个注解是可以省略的，如果方法形参的名字和提交数据时的name相同，则 <code>@RequestParam</code> 可以省略。</p>
<p>但有一个前提：如果你采用的是Spring6+版本，你需要在pom.xml文件中指定编译参数<code>-parameter</code>，配置如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.12.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">source</span>&gt;</span>21<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">target</span>&gt;</span>21<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">compilerArgs</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">arg</span>&gt;</span>-parameters<span class="tag">&lt;/<span class="name">arg</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">compilerArgs</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><font color="red"><strong>PS：如果你使用的是Spring5的版本，以上的配置是不需要的。</strong></font>😁</p>
<p>Controller中的方法只需要这样写：<strong>形参的名字必须和提交的数据的name一致！！！！！</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(value=&quot;/register&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">register</span><span class="params">(String username, String password, String sex, String[] hobby, String intro)</span>&#123;</span><br><span class="line">    System.out.println(username + <span class="string">&quot;,&quot;</span> + password + <span class="string">&quot;,&quot;</span> + sex + <span class="string">&quot;,&quot;</span> + Arrays.toString(hobby) + <span class="string">&quot;,&quot;</span> + intro);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试结果：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/SpringMVC/%E4%BE%9D%E9%9D%A0%E6%8E%A7%E5%88%B6%E5%99%A8%E6%96%B9%E6%B3%95%E4%B8%8A%E7%9A%84%E5%BD%A2%E5%8F%82%E5%90%8D%E6%9D%A5%E6%8E%A5%E6%94%B6%E5%8F%82%E6%95%B0.png" alt="依靠控制器方法上的形参名来接收参数"></p>
<p>填写信息后点击注册<strong>成功</strong>跳转到注册成功页面，控制台打印：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">muyoukule006,123,1,[smoke],muyoukule006</span><br></pre></td></tr></table></figure>

<p>如果形参名和提交的数据的name不一致：</p>
<p>例如：前端传过来的参数为<code>username</code>，而后端接收参数时写的是<code>String umane</code>，就会出现<code>uname</code>值为<code>null</code>的情况：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">null,123,1,[smoke],muyoukule007</span><br></pre></td></tr></table></figure>

<p>另外，还有一点，对于提交的hobby数据，也可以采用String来接收，不一定使用数组方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(value=&quot;/register&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">register</span><span class="params">(String username, String password, String sex, String hobby, String intro)</span>&#123;</span><br><span class="line">    System.out.println(username + <span class="string">&quot;,&quot;</span> + password + <span class="string">&quot;,&quot;</span> + sex + <span class="string">&quot;,&quot;</span> + hobby + <span class="string">&quot;,&quot;</span> + intro);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">muyoukule008,123,1,smoke,drink,perm,muyoukule008</span><br></pre></td></tr></table></figure>

<p>根据输出结果可以看到多个hobby是采用 <code>,</code> 进行连接的。</p>
<h1 id="5-使用POJO类-JavaBean接收请求参数"><a href="#5-使用POJO类-JavaBean接收请求参数" class="headerlink" title="5. 使用POJO类&#x2F;JavaBean接收请求参数"></a>5. 使用POJO类&#x2F;JavaBean接收请求参数</h1><p>以上方式大家可以看到，当提交的数据非常多时，方法的形参个数会非常多，这不是很好的设计。在SpringMVC中也可以使用 <code>POJO类/JavaBean</code> 来接收请求参数。不过有一个非常重要的要求：<font color="red"><strong><code>POJO类的属性名</code> 必须和 <code>请求参数的参数名</code> 保持一致！！</strong></font>😁</p>
<blockquote>
<p>测试</p>
</blockquote>
<p>1、提供以下的JavaBean：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.muyoukule.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> String[] hobby;</span><br><span class="line">    <span class="keyword">private</span> String intro;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(Long id, String username, String password, String sex, String[] hobby, String intro)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">        <span class="built_in">this</span>.hobby = hobby;</span><br><span class="line">        <span class="built_in">this</span>.intro = intro;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPassword</span><span class="params">(String password)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSex</span><span class="params">(String sex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String[] getHobby() &#123;</span><br><span class="line">        <span class="keyword">return</span> hobby;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHobby</span><span class="params">(String[] hobby)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.hobby = hobby;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getIntro</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> intro;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setIntro</span><span class="params">(String intro)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.intro = intro;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, username=&#x27;&quot;</span> + username + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, password=&#x27;&quot;</span> + password + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, sex=&#x27;&quot;</span> + sex + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, hobby=&quot;</span> + Arrays.toString(hobby) +</span><br><span class="line">                <span class="string">&quot;, intro=&#x27;&quot;</span> + intro + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2、在控制器方法的形参位置上使用javabean来接收请求参数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/register&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">register</span><span class="params">(User user)</span>&#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3、执行结果：</p>
<p><img src="/posts/SpringMVC-Chapter-Three-Get-Request-Data/%E4%BD%BF%E7%94%A8POJO%E7%B1%BB%E6%8E%A5%E6%94%B6%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0.png" alt="使用POJO类接收请求参数"></p>
<p>4、填写信息后点击注册<strong>成功</strong>跳转到注册成功页面，控制台打印：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">User&#123;id=null, username=&#x27;muyoukule&#x27;, password=&#x27;123&#x27;, sex=&#x27;1&#x27;, hobby=[smoke, perm], intro=&#x27;muyoukulehaoshuaia&#x27;&#125;</span><br></pre></td></tr></table></figure>

<p><strong>底层的实现原理：反射机制。先获取请求参数的名字，因为请求参数的名字就是JavaBean的属性名，通过这种方式给对应的属性赋值</strong>。</p>
<blockquote>
<p>测试一下：当JavaBean的属性名和请求参数的参数名不一致时，会出现什么问题？</p>
</blockquote>
<p><font color="red"><strong>PS：getter和setter的方法名不修改，只修改属性名</strong></font>😃</p>
<p>1、修改属性名</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.muyoukule.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String uname;</span><br><span class="line">    <span class="keyword">private</span> String upwd;</span><br><span class="line">    <span class="keyword">private</span> String usex;</span><br><span class="line">    <span class="keyword">private</span> String[] uhobby;</span><br><span class="line">    <span class="keyword">private</span> String uintro;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(Long id, String username, String password, String sex, String[] hobby, String intro)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.uname = username;</span><br><span class="line">        <span class="built_in">this</span>.upwd = password;</span><br><span class="line">        <span class="built_in">this</span>.usex = sex;</span><br><span class="line">        <span class="built_in">this</span>.uhobby = hobby;</span><br><span class="line">        <span class="built_in">this</span>.uintro = intro;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> uname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.uname = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> upwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPassword</span><span class="params">(String password)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.upwd = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> usex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSex</span><span class="params">(String sex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.usex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String[] getHobby() &#123;</span><br><span class="line">        <span class="keyword">return</span> uhobby;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHobby</span><span class="params">(String[] hobby)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.uhobby = hobby;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getIntro</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> uintro;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setIntro</span><span class="params">(String intro)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.uintro = intro;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, username=&#x27;&quot;</span> + uname + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, password=&#x27;&quot;</span> + upwd + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, sex=&#x27;&quot;</span> + usex + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, hobby=&quot;</span> + Arrays.toString(uhobby) +</span><br><span class="line">                <span class="string">&quot;, intro=&#x27;&quot;</span> + uintro + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2、测试，填写和上面相同的信息后点击注册<strong>成功</strong>跳转到注册成功页面，控制台打印：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">User&#123;id=null, username=&#x27;muyoukule&#x27;, password=&#x27;123&#x27;, sex=&#x27;1&#x27;, hobby=[smoke, perm], intro=&#x27;muyoukulehaoshuaia&#x27;&#125;</span><br></pre></td></tr></table></figure>

<p><strong>通过测试，我们得知：<code>请求参数名</code> 可以和 <code>JavaBean的属性名</code> 不一致。</strong></p>
<p>1、我们继续将其中一个属性的setter和getter方法名修改一下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 修改前</span></span><br><span class="line"><span class="comment">/*public String getUsername() &#123;</span></span><br><span class="line"><span class="comment">    return uname;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">public void setUsername(String username) &#123;</span></span><br><span class="line"><span class="comment">    this.uname = username;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改后</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getUname</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> uname;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUname</span><span class="params">(String uname)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.uname = uname;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2、再次测试，填写和上面相同的信息后点击注册<strong>成功</strong>跳转到注册成功页面，控制台打印：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">User&#123;id=null, username=&#x27;null&#x27;, password=&#x27;123&#x27;, sex=&#x27;1&#x27;, hobby=[smoke, perm], intro=&#x27;muyoukulehaoshuaia&#x27;&#125;</span><br></pre></td></tr></table></figure>

<p><strong>通过测试可以看到：username属性没有赋上值。可见请求参数是否可以赋值到JavaBean对应的属性上，不是取决于属性名，而是setter方法名</strong>。</p>
<h1 id="6-RequestHeader注解"><a href="#6-RequestHeader注解" class="headerlink" title="6. @RequestHeader注解"></a>6. @RequestHeader注解</h1><p>该注解的作用是：将 <code>请求头信息</code> 映射到 <code>方法的形参上</code>。</p>
<p>和@RequestParam注解功能相似，<code>@RequestParam</code>注解的作用：将<code>请求参数</code>映射到<code>方法的形参</code>上。</p>
<p>当然，对于<code>@RequestHeader</code>注解来说，也有三个属性：value、required、defaultValue，和<code>@RequestParam</code>一样，这里就不再赘述了。</p>
<blockquote>
<p>测试</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/register&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">register</span><span class="params">(User user,</span></span><br><span class="line"><span class="params">                       <span class="meta">@RequestHeader(value = &quot;Referer&quot;, required = false, defaultValue = &quot;&quot;)</span></span></span><br><span class="line"><span class="params">                       String referer)</span> &#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    System.out.println(referer);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">User&#123;id=null, username=&#x27;muyoukule&#x27;, password=&#x27;123&#x27;, sex=&#x27;1&#x27;, hobby=[smoke, drink, perm], intro=&#x27;muyoukulehaoshuaia&#x27;&#125;</span><br><span class="line">http://localhost:8080/springmvc/</span><br></pre></td></tr></table></figure>

<h1 id="7-CookieValue注解"><a href="#7-CookieValue注解" class="headerlink" title="7. @CookieValue注解"></a>7. @CookieValue注解</h1><p>该注解的作用：将 <code>请求提交的Cookie数据</code> 映射到 <code>方法形参</code> 上</p>
<p>同样是有三个属性：value、required、defaultValue</p>
<p>前端页面中编写发送cookie的代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">sendCookie</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="property">cookie</span> = <span class="string">&quot;id=123456789; expires=Thu, 18 Dec 2025 12:00:00 UTC; path=/&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="property">location</span> = <span class="string">&quot;/springmvc/register&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;sendCookie()&quot;</span>&gt;</span>向服务器端发送Cookie<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>后端UserController代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/register&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">register</span><span class="params">(User user,</span></span><br><span class="line"><span class="params">                       <span class="meta">@RequestHeader(value = &quot;Referer&quot;, required = false, defaultValue = &quot;&quot;)</span></span></span><br><span class="line"><span class="params">                       String referer,</span></span><br><span class="line"><span class="params">                       <span class="meta">@CookieValue(value = &quot;id&quot;, required = false, defaultValue = &quot;2222222222&quot;)</span></span></span><br><span class="line"><span class="params">                       String id)</span> &#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    System.out.println(referer);</span><br><span class="line">    System.out.println(id);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>启动服务器打开页面，直接点击向<code>服务器端发送Cookie</code>按钮测试，控制台打印：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">User&#123;id=null, username=&#x27;null&#x27;, password=&#x27;null&#x27;, sex=&#x27;null&#x27;, hobby=null, intro=&#x27;null&#x27;&#125;</span><br><span class="line">http://localhost:8080/springmvc/</span><br><span class="line">123456789</span><br></pre></td></tr></table></figure>

<h1 id="8-请求的中文乱码问题"><a href="#8-请求的中文乱码问题" class="headerlink" title="8. 请求的中文乱码问题"></a>8. 请求的中文乱码问题</h1><h2 id="8-1-get请求乱码"><a href="#8-1-get请求乱码" class="headerlink" title="8.1 get请求乱码"></a>8.1 get请求乱码</h2><p>get请求数据在URI后面提交，这个乱码问题怎么解决呢？</p>
<p>解决办法是找到<code>CATALINA_HOME/config/server.xml</code>文件，找到其中配置端口号的标签<code>&lt;Connector&gt;</code>，在该标签中添加  <code>URIEncoding=&quot;UTF-8&quot;</code></p>
<p>但是对于高版本的Tomcat服务器来说，是不需要设置的，例如Tomcat10，Tomcat9，有如下的默认配置，在默认情况下URIEncoding使用的就是<code>UTF-8</code>的编码方式。</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/SpringMVC/Tomcat10%E7%BC%96%E7%A0%81%E6%96%B9%E5%BC%8F.png" alt="Tomcat10编码方式"></p>
<p>但对于低版本的Tomcat服务器，例如：Tomcat8。URIEncoding的默认配置是<code>ISO-8859-1</code>，因此在Tomcat8中需要手动配置server.xml文件：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/SpringMVC/Tomcat8%E7%BC%96%E7%A0%81%E6%96%B9%E5%BC%8F.png" alt="Tomcat8编码方式"></p>
<p>配置如下：</p>
<p>在 <code>conf</code> 目录下打开 <code>server.xml</code> 文件</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/SpringMVC/Tomcat8%E9%85%8D%E7%BD%AEUTF-8%E7%BC%96%E7%A0%81%E6%96%B9%E5%BC%8F.png" alt="Tomcat8配置UTF-8编码方式"></p>
<p>接下来，我们测试一下，在默认情况下，Tomcat10是否已经解决了get请求乱码问题：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/register&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    性别：</span><br><span class="line">        男 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">        女 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    爱好：</span><br><span class="line">        抽烟 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;smoke&quot;</span>&gt;</span></span><br><span class="line">        喝酒 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;drink&quot;</span>&gt;</span></span><br><span class="line">        烫头 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;perm&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    简介：<span class="tag">&lt;<span class="name">textarea</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;60&quot;</span> <span class="attr">name</span>=<span class="string">&quot;intro&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;注册&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>注意，以上表单已经修改为<code>get</code>请求了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/register&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">register</span><span class="params">(User user)</span>&#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试结果：</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/SpringMVC/%E6%B5%8B%E8%AF%95Tomcat10%E6%98%AF%E5%90%A6%E5%A4%84%E7%90%86get%E8%AF%B7%E6%B1%82%E4%B9%B1%E7%A0%81.png" alt="测试Tomcat10是否处理get请求乱码" style="zoom: 80%;">

<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/SpringMVC/Tomcat10get%E8%AF%B7%E6%B1%82%E6%B3%A8%E5%86%8C%E6%88%90%E5%8A%9F.png" alt="Tomcat10get请求注册成功" style="zoom:50%;">

<p>控制台打印：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">User&#123;id=null, username=&#x27;木又枯了&#x27;, password=&#x27;123&#x27;, sex=&#x27;1&#x27;, hobby=[smoke, drink, perm], intro=&#x27;木又枯了太酷了！&#x27;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="8-2-post请求乱码"><a href="#8-2-post请求乱码" class="headerlink" title="8.2 post请求乱码"></a>8.2 post请求乱码</h2><p>post请求是解决请求体的中文乱码问题。解决办法大家都知道：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">request.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>同样，对于高版本的<strong>Tomcat10</strong>服务器来说，针对请求体中的字符编码也是配置好的，默认也是采用了UTF-8，中文乱码问题也解决了，在这个文件中配置的：<code>apache-tomcat-10.1.19\conf\web.xml</code></p>
<p>配置内容如下：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/SpringMVC/Tomcat10%E9%92%88%E5%AF%B9%E8%AF%B7%E6%B1%82%E4%BD%93%E4%B8%AD%E7%9A%84%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%E6%98%AF%E9%85%8D%E7%BD%AE%E5%A5%BD%E7%9A%84.png" alt="Tomcat10针对请求体中的字符编码是配置好的"></p>
<p>通过以上配置可以看到，Tomcat10对请求和响应都设置了默认的字符编码方式为UTF-8</p>
<p><strong>一定要注意：Tomcat9以及之前的版本，以上的配置是没有的。</strong></p>
<p>我们来测试一下，针对Tomcat10来说，SpringMVC会不会有乱码问题：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/register&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    性别：</span><br><span class="line">        男 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">        女 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    爱好：</span><br><span class="line">        抽烟 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;smoke&quot;</span>&gt;</span></span><br><span class="line">        喝酒 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;drink&quot;</span>&gt;</span></span><br><span class="line">        烫头 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;perm&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    简介：<span class="tag">&lt;<span class="name">textarea</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;60&quot;</span> <span class="attr">name</span>=<span class="string">&quot;intro&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;注册&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>注意：以上表单已经修改为post请求</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/register&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">register</span><span class="params">(User user)</span> &#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">User&#123;id=null, username=&#x27;木又枯了&#x27;, password=&#x27;123&#x27;, sex=&#x27;1&#x27;, hobby=[smoke, drink, perm], intro=&#x27;木又枯了太酷啦！！&#x27;&#125;</span><br></pre></td></tr></table></figure>

<p>通过测试可以看到在Tomcat10当中，默认SpringMVC，发送POST请求，是不会出现乱码问题的。</p>
<p>有可能很多同学使用的不是Tomcat10，如果不是Tomcat10，则会出现乱码问题，我们来模拟一下乱码的产生，将apache-tomcat-10.1.19\conf\web.xml文件中的UTF-8配置修改为ISO-8859-1：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Set the default request and response character encodings to ISO-8859-1.   --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">request-character-encoding</span>&gt;</span>ISO-8859-1<span class="tag">&lt;/<span class="name">request-character-encoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">response-character-encoding</span>&gt;</span>ISO-8859-1<span class="tag">&lt;/<span class="name">response-character-encoding</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>一定要重启Tomcat10</strong>，新的配置才能生效，来测试一下是否存在乱码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">User&#123;id=null, username=&#x27;??¨?????????&#x27;, password=&#x27;123&#x27;, sex=&#x27;1&#x27;, hobby=[smoke, drink, perm], intro=&#x27;??¨??????????¤?é?·?????????&#x27;&#125;</span><br></pre></td></tr></table></figure>

<p>那么，在SpringMVC中如何解决请求体的中文乱码问题呢？</p>
<p>当然，还是使用<code>request.setCharacterEncoding(&quot;UTF-8&quot;)</code>，使用它有一个前提条件，要想解决请求体乱码问题，以上代码必须在 <code>request.getParameter(&quot;username&quot;)</code>执行之前执行才有效。</p>
<p>也就是说以上代码如果放在Controller的相关方法中执行是无效的，因为Controller的方法在执行之前 DispatcherServlet已经调用了 <code>request.getParameter(&quot;username&quot;)</code>方法。因此在Controller方法中使用<code>request.setCharacterEncoding(&quot;UTF-8&quot;)</code>无效</p>
<p>我们来测试一下：</p>
<p>注意：表单为post请求</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/register&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">register</span><span class="params">(User user, HttpServletRequest request)</span> <span class="keyword">throws</span> UnsupportedEncodingException &#123;</span><br><span class="line">    request.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">User&#123;id=null, username=&#x27;??¨?????????&#x27;, password=&#x27;123&#x27;, sex=&#x27;1&#x27;, hobby=[smoke, drink, perm], intro=&#x27;??¨??????????¤?é?·?????????&#x27;&#125;</span><br></pre></td></tr></table></figure>

<p>通过测试可以看到：在Controller当中调用 <code>request.setCharacterEncoding(&quot;UTF-8&quot;)</code> 是无法解决POST乱码问题的。</p>
<p>那怎么办呢？怎么样才能在DispatcherServlet之前执行 <code>request.setCharacterEncoding(&quot;UTF-8&quot;)</code> 呢？</p>
<p>没错，我相信大家想到了：过滤器Filter。过滤器Filter可以在Servlet执行之前执行。有同学又说了：监听器不行吗？不行。因为我们需要对每一次请求解决乱码，而监听器只在服务器启动阶段执行一次。因此这里解决每一次请求的乱码问题，应该使用过滤器Filter。</p>
<p>并且，SpringMVC已经将这个字符编码的过滤器提前写好了，我们直接配置好即可： <code>CharacterEncodingFilter</code></p>
<p><code>CharacterEncodingFilter</code> 中最核心的方法是：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doFilterInternal</span><span class="params">(</span></span><br><span class="line"><span class="params">        HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span></span><br><span class="line">        <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">encoding</span> <span class="operator">=</span> getEncoding();</span><br><span class="line">    <span class="keyword">if</span> (encoding != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (isForceRequestEncoding() || request.getCharacterEncoding() == <span class="literal">null</span>) &#123;</span><br><span class="line">            request.setCharacterEncoding(encoding);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (isForceResponseEncoding()) &#123;</span><br><span class="line">            response.setCharacterEncoding(encoding);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    filterChain.doFilter(request, response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>分析以上核心方法得知该过滤器对请求和响应都设置了字符编码方式。</p>
<ul>
<li>当 <code>强行使用请求字符编码方式为true</code> 时，或者 <code>请求对象的字符编码方式为null</code> 时，设置请求的字符编码方式。</li>
<li>当 <code>强行使用响应字符编码方式为true</code> 时，设置响应的字符编码方式。</li>
</ul>
<p>根据以上代码，可以得出以下配置信息，在web.xml文件中对过滤器进行如下配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--字符编码过滤器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceRequestEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceResponseEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>我们再来测试，重启Tomcat10，看看乱码是否能够解决？</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">User&#123;id=null, username=&#x27;木又枯了&#x27;, password=&#x27;123&#x27;, sex=&#x27;1&#x27;, hobby=[smoke, drink, perm], intro=&#x27;木又枯了太酷啦！！&#x27;&#125;</span><br></pre></td></tr></table></figure>

<p>注意：针对于我们当前的Tomcat10的配置来说，它有默认的字符集ISO-8859-1，因此以下在web.xml文件中的配置是不能缺少的：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceRequestEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>如果缺少它，仍然是会存在乱码问题的。自行测试一下！！！！</p>
]]></content>
      <categories>
        <category>SSM</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>SpringMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMQ高级</title>
    <url>/posts/RabbitMQ-Advanced/</url>
    <content><![CDATA[<p>RabbitMQ官网：<a href="https://www.rabbitmq.com/">https://www.rabbitmq.com</a></p>
<p>参考视频：<a href="https://www.bilibili.com/video/BV1mN4y1Z7t9/">黑马程序员RabbitMQ入门到实战教程，MQ消息中间件，微服务rabbitmq消息队列实战，RabbitMQ面试题一套全覆盖</a></p>
<h1 id="0-写在前面"><a href="#0-写在前面" class="headerlink" title="0. 写在前面"></a>0. 写在前面</h1><p>在使用 MQ 时我们必须尽可能确保 MQ 消息的可靠性，即：消息应该至少被消费者处理1次</p>
<p>那么问题来了：</p>
<ul>
<li><strong>我们该如何确保MQ消息的可靠性？</strong></li>
<li><strong>如果真的发送失败，有没有其它的兜底方案？</strong></li>
</ul>
<p>这些问题，在下面的学习中都会找到答案。</p>
<h1 id="1-发送者的可靠性"><a href="#1-发送者的可靠性" class="headerlink" title="1. 发送者的可靠性"></a>1. 发送者的可靠性</h1><p>首先，我们一起分析一下消息丢失的可能性有哪些。</p>
<p>消息从发送者发送消息，到消费者处理消息，需要经过的流程是这样的：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/MQIMG/RabbitMQ/%E6%B6%88%E6%81%AF%E7%BB%8F%E8%BF%87%E7%9A%84%E6%B5%81%E7%A8%8B.png" alt="消息经过的流程"></p>
<p>消息从生产者到消费者的每一步都可能导致消息丢失：</p>
<ul>
<li>发送消息时丢失：<ul>
<li>生产者发送消息时连接 MQ 失败</li>
<li>生产者发送消息到达 MQ后未找到 <code>Exchange</code></li>
<li>生产者发送消息到达 MQ 的 <code>Exchange</code> 后，未找到合适的 <code>Queue</code></li>
<li>消息到达 MQ 后，处理消息的进程发生异常</li>
</ul>
</li>
<li>MQ 导致消息丢失：<ul>
<li>消息到达 MQ ，保存到队列后，尚未消费就突然宕机</li>
</ul>
</li>
<li>消费者处理消息时：<ul>
<li>消息接收后尚未处理突然宕机</li>
<li>消息接收后处理过程中抛出异常</li>
</ul>
</li>
</ul>
<p>综上，我们要解决消息丢失问题，保证 MQ 的可靠性，就必须从 3 个方面入手：</p>
<ul>
<li>确保生产者一定把消息发送到 MQ</li>
<li>确保 MQ 不会将消息弄丢</li>
<li>确保消费者一定要处理消息</li>
</ul>
<p>这一章我们先来看如何确保生产者一定能把消息发送到 MQ。</p>
<h2 id="1-1-生产者重试机制"><a href="#1-1-生产者重试机制" class="headerlink" title="1.1 生产者重试机制"></a>1.1 生产者重试机制</h2><p>首先第一种情况，就是生产者发送消息时，出现了网络故障，导致与MQ的连接中断。</p>
<p>为了解决这个问题，SpringAMQP 提供的消息发送时的重试机制。即：当<code>RabbitTemplate </code>与 MQ 连接超时后，多次重试。</p>
<p>1、修改 <code>publisher</code> 模块的 <code>application.yaml</code> 文件，添加下面的内容：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">connection-timeout:</span> <span class="string">1s</span> <span class="comment"># 设置MQ的连接超时时间</span></span><br><span class="line">    <span class="attr">template:</span></span><br><span class="line">      <span class="attr">retry:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启超时重试机制</span></span><br><span class="line">        <span class="attr">initial-interval:</span> <span class="string">1000ms</span> <span class="comment"># 失败后的初始等待时间</span></span><br><span class="line">        <span class="attr">multiplier:</span> <span class="number">1</span> <span class="comment"># 失败后下次的等待时长倍数，下次等待时长 = initial-interval * multiplier</span></span><br><span class="line">        <span class="attr">max-attempts:</span> <span class="number">3</span> <span class="comment"># 最大重试次数</span></span><br></pre></td></tr></table></figure>

<p>2、利用命令停掉 RabbitMQ 服务：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker stop mq</span><br></pre></td></tr></table></figure>
<p>3、然后测试发送一条消息，会发现会每隔1秒重试1次，总共重试了3次。消息发送的超时重试机制配置成功了！</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">03-31 08:54:13:838  INFO 13056 --- [           main] o.s.a.r.c.CachingConnectionFactory       : Attempting to connect to: [192.168.88.132:5672]</span><br><span class="line">03-31 08:54:15:858  INFO 13056 --- [           main] o.s.a.r.c.CachingConnectionFactory       : Attempting to connect to: [192.168.88.132:5672]</span><br><span class="line">03-31 08:54:17:885  INFO 13056 --- [           main] o.s.a.r.c.CachingConnectionFactory       : Attempting to connect to: [192.168.88.132:5672]</span><br></pre></td></tr></table></figure>

<p>PS：这个失败仅仅是连接失败的重试，如果消息发送抛出异常时不会重试😂</p>
<p><strong>注意：</strong></p>
<p>当网络不稳定的时候，利用重试机制可以有效提高消息发送的成功率。不过SpringAMQP提供的重试机制是<strong>阻塞式</strong>的重试，也就是说多次重试等待的过程中，当前线程是被阻塞的。</p>
<p>如果对于业务性能有要求，建议禁用重试机制。如果一定要使用，请合理配置等待时长和重试次数，当然也可以考虑使用异步线程来执行发送消息的代码。</p>
<h2 id="1-2-生产者确认机制"><a href="#1-2-生产者确认机制" class="headerlink" title="1.2 生产者确认机制"></a>1.2 生产者确认机制</h2><p>一般情况下，只要生产者与 MQ 之间的网路连接顺畅，基本不会出现发送消息丢失的情况，因此大多数情况下我们无需考虑这种问题。</p>
<p>不过，在少数情况下，也会出现消息发送到MQ之后丢失的现象，比如：</p>
<ul>
<li>MQ 内部处理消息的进程发生了异常</li>
<li>生产者发送消息到达 MQ 后未找到 <code>Exchange</code></li>
<li>生产者发送消息到达 MQ 的 <code>Exchange</code> 后，未找到合适的 <code>Queue</code>，因此无法路由</li>
</ul>
<p>针对上述情况，RabbitMQ 提供了生产者消息确认机制，包括 <code>Publisher Confirm</code> 和 <code>Publisher Return</code> 两种。在开启确认机制的情况下，当生产者发送消息给 MQ 后，MQ会根据消息处理的情况返回不同的<strong>回执</strong>。</p>
<p>具体如图所示：<br><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/MQIMG/RabbitMQ/RabbitMQ%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E6%81%AF%E7%A1%AE%E8%AE%A4%E6%9C%BA%E5%88%B6.png" alt="RabbitMQ生产者消息确认机制"></p>
<p><strong>总结如下：</strong></p>
<ul>
<li>当消息投递到MQ，但是路由失败时，通过 <strong>Publisher Return</strong> 返回异常信息，同时返回 ACK 的确认信息，代表投递成功</li>
<li>临时消息投递到了 MQ，并且入队成功，返回 ACK，告知投递成功</li>
<li>持久消息投递到了 MQ，并且入队完成持久化，返回 ACK ，告知投递成功</li>
<li>其它情况都会返回 NACK，告知投递失败</li>
</ul>
<p>其中 <code>ACK</code> 和 <code>NACK</code> 属于<strong>Publisher Confirm</strong>机制，<code>ACK</code>是投递成功；<code>NACK</code>是投递失败。而<code>return</code>则属于 <strong>Publisher Return</strong> 机制。</p>
<p>默认两种机制都是关闭状态，需要通过配置文件来开启。</p>
<h2 id="1-3-实现生产者确认"><a href="#1-3-实现生产者确认" class="headerlink" title="1.3 实现生产者确认"></a>1.3 实现生产者确认</h2><h3 id="1-3-1-开启生产者确认"><a href="#1-3-1-开启生产者确认" class="headerlink" title="1.3.1 开启生产者确认"></a>1.3.1 开启生产者确认</h3><p>在 publisher 模块的 <code>application.yaml</code> 中添加配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">publisher-confirm-type:</span> <span class="string">correlated</span> <span class="comment"># 开启publisher confirm机制，并设置confirm类型</span></span><br><span class="line">    <span class="attr">publisher-returns:</span> <span class="literal">true</span> <span class="comment"># 开启publisher return机制</span></span><br></pre></td></tr></table></figure>
<p>这里 <code>publisher-confirm-type</code> 有三种模式可选：</p>
<ul>
<li><code>none</code>：关闭 confirm 机制</li>
<li><code>simple</code>：同步阻塞等待 MQ 的回执</li>
<li><code>correlated</code>：MQ 异步回调返回回执</li>
</ul>
<p>一般我们推荐使用 <code>correlated </code>回调机制。</p>
<h3 id="1-3-2-定义ReturnCallback"><a href="#1-3-2-定义ReturnCallback" class="headerlink" title="1.3.2 定义ReturnCallback"></a>1.3.2 定义ReturnCallback</h3><p>每个 <code>RabbitTemplate</code> 只能配置一个 <code>ReturnCallback</code>，因此我们可以在配置类中统一设置。我们在 publisher 模块定义一个配置类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.muyoukule.consumer.config;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MqConfig</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        rabbitTemplate.setReturnsCallback(<span class="keyword">new</span> <span class="title class_">RabbitTemplate</span>.ReturnsCallback() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">returnedMessage</span><span class="params">(ReturnedMessage returned)</span> &#123;</span><br><span class="line">                log.error(<span class="string">&quot;触发return callback,&quot;</span>);</span><br><span class="line">                log.debug(<span class="string">&quot;exchange: &#123;&#125;&quot;</span>, returned.getExchange());</span><br><span class="line">                log.debug(<span class="string">&quot;routingKey: &#123;&#125;&quot;</span>, returned.getRoutingKey());</span><br><span class="line">                log.debug(<span class="string">&quot;message: &#123;&#125;&quot;</span>, returned.getMessage());</span><br><span class="line">                log.debug(<span class="string">&quot;replyCode: &#123;&#125;&quot;</span>, returned.getReplyCode());</span><br><span class="line">                log.debug(<span class="string">&quot;replyText: &#123;&#125;&quot;</span>, returned.getReplyText());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-3-3-定义ConfirmCallback"><a href="#1-3-3-定义ConfirmCallback" class="headerlink" title="1.3.3 定义ConfirmCallback"></a>1.3.3 定义ConfirmCallback</h3><p>由于每个消息发送时的处理逻辑不一定相同，因此ConfirmCallback需要在每次发消息时定义。具体来说，是在调用RabbitTemplate中的convertAndSend方法时，多传递一个参数：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/MQIMG/RabbitMQ/convertAndSend%E6%96%B9%E6%B3%95.png" alt="convertAndSend方法"></p>
<p>这里的CorrelationData中包含两个核心的东西：</p>
<ul>
<li><code>id</code>：消息的唯一标示，MQ 对不同的消息的回执以此做判断，避免混淆</li>
<li><code>SettableListenableFuture</code>：回执结果的 Future 对象</li>
</ul>
<p>将来 MQ 的回执就会通过这个 <code>Future</code> 来返回，我们可以提前给 <code>CorrelationData</code> 中的 <code>Future</code> 添加回调函数来处理消息回执：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/MQIMG/RabbitMQ/addCallback%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0.png" alt="addCallback回调函数"></p>
<p>我们新建一个测试，向系统自带的交换机发送消息，并且添加 <code>ConfirmCallback</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testPublisherConfirm</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="comment">// 1.创建CorrelationData</span></span><br><span class="line">    <span class="comment">// id 是当前消息的标识，让 RabbitMQ 区分消息，防止产生混乱，不知道该回调给谁</span></span><br><span class="line">    <span class="type">CorrelationData</span> <span class="variable">cd</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CorrelationData</span>(UUID.randomUUID().toString());</span><br><span class="line">    <span class="comment">// 2.给Future添加ConfirmCallback</span></span><br><span class="line">    cd.getFuture().addCallback(<span class="keyword">new</span> <span class="title class_">ListenableFutureCallback</span>&lt;CorrelationData.Confirm&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onFailure</span><span class="params">(Throwable ex)</span> &#123;</span><br><span class="line">            <span class="comment">// 2.1.Future发生异常时的处理逻辑，基本不会触发</span></span><br><span class="line">            log.error(<span class="string">&quot;消息回调失败&quot;</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onSuccess</span><span class="params">(CorrelationData.Confirm result)</span> &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;收到confirm callback回执&quot;</span>);</span><br><span class="line">            <span class="comment">// 2.2.Future接收到回执的处理逻辑，参数中的result就是回执内容</span></span><br><span class="line">            <span class="keyword">if</span> (result.isAck()) &#123; <span class="comment">// result.isAck()，boolean类型，true代表ack回执，false 代表 nack回执</span></span><br><span class="line">                log.debug(<span class="string">&quot;发送消息成功，收到 ack!&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// result.getReason()，String类型，返回nack时的异常描述</span></span><br><span class="line">                log.error(<span class="string">&quot;发送消息失败，收到 nack, 原因 : &#123;&#125;&quot;</span>, result.getReason());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 3.发送消息</span></span><br><span class="line">    rabbitTemplate.convertAndSend(<span class="string">&quot;hmall.direct&quot;</span>, <span class="string">&quot;red&quot;</span>, <span class="string">&quot;hello&quot;</span>, cd);</span><br><span class="line"></span><br><span class="line">    Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">03-31 09:25:25:604 DEBUG 11344 --- [168.88.132:5672] c.m.publisher.amqp.SpringAmqpTest        : 收到confirm callback回执</span><br><span class="line">03-31 09:25:25:604 DEBUG 11344 --- [168.88.132:5672] c.m.publisher.amqp.SpringAmqpTest        : 发送消息成功，收到 ack!</span><br></pre></td></tr></table></figure>

<p>修改 <code>routingKey</code> 为不存在的 red2：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">rabbitTemplate.convertAndSend(<span class="string">&quot;hmall.direct&quot;</span>, <span class="string">&quot;red2&quot;</span>, <span class="string">&quot;hello&quot;</span>, cd);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">03-31 09:50:32:950  WARN 9664 --- [nectionFactory1] o.s.amqp.rabbit.core.RabbitTemplate      : Returned message but no callback available</span><br><span class="line">03-31 09:50:32:951 DEBUG 9664 --- [168.88.132:5672] c.m.publisher.amqp.SpringAmqpTest        : 收到confirm callback回执</span><br><span class="line">03-31 09:50:32:951 DEBUG 9664 --- [168.88.132:5672] c.m.publisher.amqp.SpringAmqpTest        : 发送消息成功，收到 ack!</span><br></pre></td></tr></table></figure>

<p>修改 <code>exchange</code> 为不存在的 hmall.direct2：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">rabbitTemplate.convertAndSend(<span class="string">&quot;hmall.direct2&quot;</span>, <span class="string">&quot;red&quot;</span>, <span class="string">&quot;hello&quot;</span>, cd);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">03-31 09:52:12:691 ERROR 1792 --- [168.88.132:5672] o.s.a.r.c.CachingConnectionFactory       : Shutdown Signal: channel error; protocol method: #method&lt;channel.close&gt;(reply-code=404, reply-text=NOT_FOUND - no exchange &#x27;hmall.2&#x27; in vhost &#x27;/hmall&#x27;, class-id=60, method-id=40)</span><br><span class="line">03-31 09:52:12:691 DEBUG 1792 --- [nectionFactory1] c.m.publisher.amqp.SpringAmqpTest        : 收到confirm callback回执</span><br><span class="line">03-31 09:52:12:691 ERROR 1792 --- [nectionFactory1] c.m.publisher.amqp.SpringAmqpTest        : 发送消息失败，收到 nack, 原因 : channel error; protocol method: #method&lt;channel.close&gt;(reply-code=404, reply-text=NOT_FOUND - no exchange &#x27;hmall.2&#x27; in vhost &#x27;/hmall&#x27;, class-id=60, method-id=40)</span><br></pre></td></tr></table></figure>

<p>可以看到，由于传递的 <code>RoutingKey </code>是错误的，路由失败后，触发了 <code>return callback</code>，同时也收到了 ack。</p>
<p>当我们修改为正确的 <code>RoutingKey</code> 以后，就不会触发 <code>return callback</code> 了，只收到ack。</p>
<p>而如果连交换机都是错误的，则只会收到 nack。</p>
<p><strong>注意：</strong></p>
<p>开启生产者确认比较消耗MQ性能，一般不建议开启。而且大家思考一下触发确认的几种情况：</p>
<ul>
<li>路由失败：一般是因为 RoutingKey 错误导致，往往是编程导致</li>
<li>交换机名称错误：同样是编程错误导致</li>
<li>MQ 内部故障：这种需要处理，但概率往往较低。因此只有对消息可靠性要求非常高的业务才需要开启，而且仅仅需要开启ConfirmCallback 处理 nack 就可以了。</li>
</ul>
<h1 id="2-MQ的可靠性"><a href="#2-MQ的可靠性" class="headerlink" title="2. MQ的可靠性"></a>2. MQ的可靠性</h1><p>消息到达 MQ 以后，如果 MQ 不能及时保存，也会导致消息丢失，所以 MQ 的可靠性也非常重要。</p>
<h2 id="2-1-数据持久化"><a href="#2-1-数据持久化" class="headerlink" title="2.1 数据持久化"></a>2.1 数据持久化</h2><p>为了提升性能，默认情况下 MQ 的数据都是在内存存储的临时数据，重启后就会消失。为了保证数据的可靠性，必须配置数据持久化，包括：</p>
<ul>
<li>交换机持久化</li>
<li>队列持久化</li>
<li>消息持久化</li>
</ul>
<p>我们以控制台界面为例来说明。</p>
<h3 id="2-1-1-交换机持久化"><a href="#2-1-1-交换机持久化" class="headerlink" title="2.1.1 交换机持久化"></a>2.1.1 交换机持久化</h3><p>在控制台的 <code>Exchanges</code> 页面，添加交换机时可以配置交换机的 <code>Durability </code> 参数：</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/MQIMG/RabbitMQ/%E4%BA%A4%E6%8D%A2%E6%9C%BA%E7%9A%84Durability%E5%8F%82%E6%95%B0.png" alt="交换机的Durability参数" style="zoom: 80%;">

<p>设置为 <code>Durable</code> 就是持久化模式，<code>Transient </code> 就是临时模式。</p>
<h3 id="2-1-2-队列持久化"><a href="#2-1-2-队列持久化" class="headerlink" title="2.1.2 队列持久化"></a>2.1.2 队列持久化</h3><p>在控制台的 Queues 页面，添加队列时，同样可以配置队列的 <code>Durability</code> 参数：</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/MQIMG/RabbitMQ/%E9%98%9F%E5%88%97%E7%9A%84Durability%E5%8F%82%E6%95%B0.png" alt="队列的Durability参数" style="zoom:67%;">

<p>设置为 <code>Durable</code> 就是持久化模式，<code>Transient </code> 就是临时模式。</p>
<p>除了持久化以外，你可以看到队列还有很多其它参数，有一些我们会在后期学习。</p>
<p><font color="red">PS：Spring 在创建交换机和队列时候默认将他们处理为持久化。</font>😄</p>
<h3 id="2-1-3-消息持久化"><a href="#2-1-3-消息持久化" class="headerlink" title="2.1.3 消息持久化"></a>2.1.3 消息持久化</h3><p>在控制台发送消息的时候，可以添加很多参数，而消息的持久化是要配置一个 <code>properties</code>：</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/MQIMG/RabbitMQ/%E6%B6%88%E6%81%AF%E7%9A%84Delivered%20mode%E5%8F%82%E6%95%B0.png" alt="消息的Delivered mode参数" style="zoom: 80%;">

<p>设置为 <code>2</code> 就是持久化模式，<code>1 </code> 就是临时模式。</p>
<p><strong>说明：</strong></p>
<p>在开启持久化机制以后，如果同时还开启了生产者确认，那么 MQ 会在消息持久化以后才发送 ACK 回执，进一步确保消息的可靠性。</p>
<p>不过出于性能考虑，为了减少 IO 次数，发送到 MQ 的消息并不是逐条持久化到数据库的，而是每隔一段时间批量持久化。一般间隔在 100 毫秒左右，这就会导致 ACK 有一定的延迟，因此建议生产者确认全部采用异步方式。</p>
<h2 id="2-2-LazyQueue"><a href="#2-2-LazyQueue" class="headerlink" title="2.2 LazyQueue"></a>2.2 LazyQueue</h2><p>在默认情况下，RabbitMQ 会将接收到的信息保存在内存中以降低消息收发的延迟。但在某些特殊情况下，这会导致消息积压，比如：</p>
<ul>
<li>消费者宕机或出现网络故障</li>
<li>消息发送量激增，超过了消费者处理速度</li>
<li>消费者处理业务发生阻塞</li>
</ul>
<p>一旦出现消息堆积问题，RabbitMQ 的内存占用就会越来越高，直到触发内存预警上限。此时 RabbitMQ 会将内存消息刷到磁盘上，这个行为成为 <code>PageOut</code>， <code>PageOut </code> 会耗费一段时间，并且会阻塞队列进程。因此在这个过程中 RabbitMQ 不会再处理新的消息，生产者的所有请求都会被阻塞。</p>
<p>为了解决这个问题，从 RabbitMQ 的 3.6.0 版本开始，就增加了 Lazy Queues 的模式，也就是惰性队列。惰性队列的特征如下：</p>
<ul>
<li>接收到消息后<strong>直接存入磁盘而非内存</strong></li>
<li>消费者要消费消息时才会从磁盘中读取并加载到内存(也就是懒加载)</li>
<li>支持数百万条的消息存储</li>
</ul>
<p>而在 3.12 版本之后，LazyQueue 已经成为所有队列的默认格式。因此官方推荐升级 MQ 为 3.12 版本或者所有队列都设置为 LazyQueue 模式。</p>
<h3 id="2-2-1-控制台配置Lazy模式"><a href="#2-2-1-控制台配置Lazy模式" class="headerlink" title="2.2.1 控制台配置Lazy模式"></a>2.2.1 控制台配置Lazy模式</h3><p>在添加队列的时候，添加 <code>x-queue-mod=lazy</code> 参数即可设置队列为 Lazy 模式：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/MQIMG/RabbitMQ/%E8%AE%BE%E7%BD%AE%E9%98%9F%E5%88%97%E4%B8%BALazy%E6%A8%A1%E5%BC%8F.png" alt="设置队列为Lazy模式"></p>
<h3 id="2-2-2-代码配置Lazy模式"><a href="#2-2-2-代码配置Lazy模式" class="headerlink" title="2.2.2 代码配置Lazy模式"></a>2.2.2 代码配置Lazy模式</h3><p>在利用 SpringAMQP 声明队列的时候，添加 <code>x-queue-mod=lazy</code>参数也可设置队列为Lazy模式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Queue <span class="title function_">lazyQueue</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> QueueBuilder</span><br><span class="line">            .durable(<span class="string">&quot;lazy.queue&quot;</span>)</span><br><span class="line">            .lazy() <span class="comment">// 开启Lazy模式</span></span><br><span class="line">            .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里是通过 <code>QueueBuilder</code> 的 <code>lazy()</code> 函数配置Lazy模式，底层源码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> QueueBuilder <span class="title function_">lazy</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> withArgument(<span class="string">&quot;x-queue-mode&quot;</span>, <span class="string">&quot;lazy&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当然，我们也可以基于注解来声明队列并设置为 Lazy 模式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queuesToDeclare = @Queue(</span></span><br><span class="line"><span class="meta">        name = &quot;lazy.queue&quot;,</span></span><br><span class="line"><span class="meta">        durable = &quot;true&quot;,</span></span><br><span class="line"><span class="meta">        arguments = @Argument(name = &quot;x-queue-mode&quot;, value = &quot;lazy&quot;)</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenLazyQueue</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;接收到 lazy.queue的消息：&#123;&#125;&quot;</span>, msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-2-3-更新已有队列为Lazy模式"><a href="#2-2-3-更新已有队列为Lazy模式" class="headerlink" title="2.2.3 更新已有队列为Lazy模式"></a>2.2.3 更新已有队列为Lazy模式</h3><p>对于已经存在的队列，也可以配置为 Lazy 模式，但是要通过设置 policy 实现。</p>
<p>可以基于命令行设置 policy：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rabbitmqctl set_policy Lazy &quot;^lazy-queue$&quot; &#x27;&#123;&quot;queue-mode&quot;:&quot;lazy&quot;&#125;&#x27; --apply-to queues  </span><br></pre></td></tr></table></figure>
<p>命令解读：</p>
<ul>
<li><code>rabbitmqctl</code> ：RabbitMQ 的命令行工具</li>
<li><code>set_policy</code> ：添加一个策略</li>
<li><code>Lazy</code> ：策略名称，可以自定义</li>
<li><code>&quot;^lazy-queue$&quot;</code> ：用正则表达式匹配队列的名字</li>
<li><code>&#39;&#123;&quot;queue-mode&quot;:&quot;lazy&quot;&#125;&#39;</code> ：设置队列模式为lazy模式</li>
<li><code>--apply-to queues</code>：策略的作用对象，是所有的队列</li>
</ul>
<p>当然，也可以在控制台配置 policy，进入在控制台的 <code>Admin</code> 页面，点击 <code>Policies</code>，即可添加配置：</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/MQIMG/RabbitMQ/%E6%9B%B4%E6%96%B0%E5%B7%B2%E6%9C%89%E9%98%9F%E5%88%97%E4%B8%BAlazy%E6%A8%A1%E5%BC%8F.png" alt="更新已有队列为lazy模式">

<h1 id="3-消费者的可靠性"><a href="#3-消费者的可靠性" class="headerlink" title="3. 消费者的可靠性"></a>3. 消费者的可靠性</h1><p>当 RabbitMQ 向消费者投递消息以后，需要知道消费者的处理状态如何。因为消息投递给消费者并不代表就一定被正确消费了，可能出现的故障有很多，比如：</p>
<ul>
<li>消息投递的过程中出现了网络故障</li>
<li>消费者接收到消息后突然宕机</li>
<li>消费者接收到消息后，因处理不当导致异常</li>
</ul>
<p>一旦发生上述情况，消息也会丢失。因此，RabbitMQ 必须知道消费者的处理状态，一旦消息处理失败才能重新投递消息。</p>
<p>但问题来了：RabbitMQ 如何得知消费者的处理状态呢？</p>
<p>本章我们就一起研究一下消费者处理消息时的可靠性解决方案。</p>
<h2 id="2-1-消费者确认机制"><a href="#2-1-消费者确认机制" class="headerlink" title="2.1 消费者确认机制"></a>2.1 消费者确认机制</h2><p>为了确认消费者是否成功处理消息，RabbitMQ 提供了消费者确认机制(<strong>Consumer Acknowledgement</strong>)。即：当消费者处理消息结束后，应该向 RabbitMQ 发送一个回执，告知 RabbitMQ 自己消息处理状态。回执有三种可选值：</p>
<ul>
<li>ack：成功处理消息，RabbitMQ从队列中删除该消息</li>
<li>nack：消息处理失败，RabbitMQ需要再次投递消息</li>
<li>reject：消息处理失败并拒绝该消息，RabbitMQ从队列中删除该消息</li>
</ul>
<p>一般 reject 方式用的较少，除非是消息格式有问题，那就是开发问题了。因此大多数情况下我们需要将消息处理的代码通过 <code>try catch</code> 机制捕获，消息处理成功时返回 ack，处理失败时返回 nack.</p>
<p>由于消息回执的处理代码比较统一，因此 SpringAMQP 帮我们实现了消息确认。并允许我们通过配置文件设置 ACK 处理方式，有三种模式：</p>
<ul>
<li><code>none</code>：不处理。即消息投递给消费者后立刻ack，消息会立刻从 MQ 删除。非常不安全，不建议使用</li>
<li><code>manual</code>：手动模式。需要自己在业务代码中调用api，发送 <code>ack</code> 或 <code>reject</code>，存在业务入侵，但更灵活</li>
<li><code>auto</code>：自动模式。SpringAMQP 利用 AOP 对我们的消息处理逻辑做了环绕增强，当业务正常执行时则自动返回 <code>ack</code>。 当业务出现异常时，根据异常判断返回不同结果：<ul>
<li>如果是<strong>业务异常</strong>，会自动返回 <code>nack</code>；</li>
<li>如果是<strong>消息处理或校验异常</strong>，自动返回 <code>reject</code>;</li>
</ul>
</li>
</ul>
<p>返回 Reject 的常见异常有：</p>
<p>Starting with version 1.3.2, the default ErrorHandler is now a ConditionalRejectingErrorHandler that rejects (and does not requeue) messages that fail with an irrecoverable error. Specifically, it rejects messages that fail with the following errors:</p>
<ul>
<li>o.s.amqp…MessageConversionException: Can be thrown when converting the incoming message payload using a MessageConverter.</li>
<li>o.s.messaging…MessageConversionException: Can be thrown by the conversion service if additional conversion is required when mapping to a @RabbitListener method.</li>
<li>o.s.messaging…MethodArgumentNotValidException: Can be thrown if validation (for example, @Valid) is used in the listener and the validation fails.</li>
<li>o.s.messaging…MethodArgumentTypeMismatchException: Can be thrown if the inbound message was converted to a type that is not correct for the target method. For example, the parameter is declared as Message<Foo> but Message<Bar> is received.</Bar></Foo></li>
<li>java.lang.NoSuchMethodException: Added in version 1.6.3.</li>
<li>java.lang.ClassCastException: Added in version 1.6.3.</li>
</ul>
<p>通过下面的配置可以修改 SpringAMQP 的 ACK 处理方式：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">listener:</span></span><br><span class="line">      <span class="attr">simple:</span></span><br><span class="line">        <span class="attr">acknowledge-mode:</span> <span class="string">none</span> <span class="comment"># 不做处理</span></span><br></pre></td></tr></table></figure>

<p>修改 consumer 服务的 MqRabbitListener 类中的方法，模拟一个消息处理的异常：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenSimpleQueue</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者收到了simple.queue的消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MessageConversionException</span>(<span class="string">&quot;故意的&quot;</span>);	<span class="comment">// 此处断点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试可以发现：当消息处理发生异常时，消息依然被 RabbitMQ 删除了。</p>
<p>我们再次把确认机制修改为 auto：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">listener:</span></span><br><span class="line">      <span class="attr">simple:</span></span><br><span class="line">        <span class="attr">acknowledge-mode:</span> <span class="string">auto</span> <span class="comment"># 自动ack</span></span><br></pre></td></tr></table></figure>

<p>在异常位置打断点，再次发送消息，程序卡在断点时，可以发现此时消息状态为 <code>unacked </code>(未确定状态)：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/MQIMG/RabbitMQ/%E6%B6%88%E6%81%AF%E7%8A%B6%E6%80%81unacked.png" alt="消息状态unacked"></p>
<p>放行以后，由于抛出的是<strong>消息转换异常</strong>，因此 Spring 会自动返回 <code>reject</code>，所以消息依然会被删除：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/MQIMG/RabbitMQ/%E6%B6%88%E6%81%AF%E8%A2%AB%E5%88%A0%E9%99%A4.png" alt="消息被删除"></p>
<p>我们将异常改为 RuntimeException 类型：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenSimpleQueue</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者收到了simple.queue的消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;故意的&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在异常位置打断点，然后再次发送消息测试，程序卡在断点时，可以发现此时消息状态为 <code>unacked</code> (未确定状态)：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/MQIMG/RabbitMQ/%E6%B6%88%E6%81%AF%E7%8A%B6%E6%80%81unacked.png" alt="消息状态unacked"></p>
<p>放行以后，由于抛出的是业务异常，所以 Spring 返回 <code>ack</code>，最终消息恢复至 <code>Ready</code> 状态，并且没有被 RabbitMQ 删除：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/MQIMG/RabbitMQ/%E6%B6%88%E6%81%AF%E6%81%A2%E5%A4%8D%E8%87%B3Ready%E7%8A%B6%E6%80%81.png" alt="消息恢复至Ready状态"></p>
<p>当我们把配置改为 <code>auto</code> 时，消息处理失败后，会回到 RabbitMQ，并重新投递到消费者。</p>
<h2 id="2-2-失败重试机制"><a href="#2-2-失败重试机制" class="headerlink" title="2.2 失败重试机制"></a>2.2 失败重试机制</h2><p>当消费者出现异常后，消息会不断 requeue (重入队)到队列，再重新发送给消费者。如果消费者再次执行依然出错，消息会再次 requeue 到队列，再次投递，直到消息处理成功为止。</p>
<p>极端情况就是消费者一直无法执行成功，那么消息 requeue 就会无限循环，导致 MQ 的消息处理飙升，带来不必要的压力：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/MQIMG/RabbitMQ/MQ%E7%9A%84%E6%B6%88%E6%81%AF%E5%A4%84%E7%90%86%E9%A3%99%E5%8D%87.png" alt="MQ的消息处理飙升"></p>
<p>当然，上述极端情况发生的概率还是非常低的，不过不怕一万就怕万一。为了应对上述情况 Spring 又提供了消费者失败重试机制：在消费者出现异常时利用本地重试，而不是无限制的 requeue 到 mq 队列。</p>
<p>修改 <code>consumer</code> 服务的 <code>application.yml</code> 文件，添加内容：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">listener:</span></span><br><span class="line">      <span class="attr">simple:</span></span><br><span class="line">        <span class="attr">retry:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启消费者失败重试</span></span><br><span class="line">          <span class="attr">initial-interval:</span> <span class="string">1000ms</span> <span class="comment"># 初识的失败等待时长为1秒</span></span><br><span class="line">          <span class="attr">multiplier:</span> <span class="number">1</span> <span class="comment"># 失败的等待时长倍数，下次等待时长 = multiplier * last-interval</span></span><br><span class="line">          <span class="attr">max-attempts:</span> <span class="number">3</span> <span class="comment"># 最大重试次数</span></span><br><span class="line">          <span class="attr">stateless:</span> <span class="literal">true</span> <span class="comment"># true无状态；false有状态。如果业务中包含事务，这里改为false</span></span><br></pre></td></tr></table></figure>

<p>重启 <code>consumer</code> 服务，重复之前的测试。可以发现：</p>
<ul>
<li>消费者在失败后消息没有重新回到MQ无限重新投递，而是在本地重试了 3 次</li>
<li>本地重试 3 次以后，抛出了 <code>AmqpRejectAndDontRequeueException</code> 异常。查看 RabbitMQ 控制台，发现消息被删除了，说明最后 SpringAMQP 返回的是 <code>reject</code></li>
</ul>
<p>结论：</p>
<ul>
<li>开启本地重试时，消息处理过程中抛出异常，不会 requeue 到队列，而是在消费者本地重试</li>
<li>重试达到最大次数后，Spring 会返回 reject，消息会被丢弃</li>
</ul>
<h2 id="2-3-失败处理策略"><a href="#2-3-失败处理策略" class="headerlink" title="2.3 失败处理策略"></a>2.3 失败处理策略</h2><p>在之前的测试中，本地测试达到最大重试次数后，消息会被丢弃。这在某些对于消息可靠性要求较高的业务场景下，显然不太合适了。<br>因此 Spring 允许我们自定义重试次数耗尽后的消息处理策略，这个策略是由 <code>MessageRecovery</code> 接口来定义的，它有 3 个不同实现：</p>
<ul>
<li><code>RejectAndDontRequeueRecoverer</code>：重试耗尽后，直接 <code>reject</code>，丢弃消息。默认就是这种方式 </li>
<li><code>ImmediateRequeueMessageRecoverer</code>：重试耗尽后，返回 <code>nack</code>，消息重新入队 </li>
<li><code>RepublishMessageRecoverer</code>：重试耗尽后，将失败消息投递到指定的交换机</li>
</ul>
<p>比较优雅的一种处理方案是 <code>RepublishMessageRecoverer</code>，失败后将消息投递到一个指定的，专门存放异常消息的队列，后续由人工集中处理。</p>
<p>1、在 <code>consumer</code> 服务中定义处理失败消息的交换机和队列</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> DirectExchange <span class="title function_">errorMessageExchange</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DirectExchange</span>(<span class="string">&quot;error.direct&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Queue <span class="title function_">errorQueue</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;error.queue&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Binding <span class="title function_">errorBinding</span><span class="params">(Queue errorQueue, DirectExchange errorMessageExchange)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> BindingBuilder.bind(errorQueue).to(errorMessageExchange).with(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2、定义一个 RepublishMessageRecoverer，关联队列和交换机</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> MessageRecoverer <span class="title function_">republishMessageRecoverer</span><span class="params">(RabbitTemplate rabbitTemplate)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RepublishMessageRecoverer</span>(rabbitTemplate, <span class="string">&quot;error.direct&quot;</span>, <span class="string">&quot;error&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>完整代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.muyoukule.consumer.config;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(name = &quot;spring.rabbitmq.listener.simple.retry.enabled&quot;, havingValue = &quot;true&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ErrorMessageConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DirectExchange <span class="title function_">errorMessageExchange</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DirectExchange</span>(<span class="string">&quot;error.direct&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">errorQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;error.queue&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">errorBinding</span><span class="params">(Queue errorQueue, DirectExchange errorMessageExchange)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(errorQueue).to(errorMessageExchange).with(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MessageRecoverer <span class="title function_">republishMessageRecoverer</span><span class="params">(RabbitTemplate rabbitTemplate)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RepublishMessageRecoverer</span>(rabbitTemplate, <span class="string">&quot;error.direct&quot;</span>, <span class="string">&quot;error&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再次运行后，去 <code>error.queue</code> 点击 <code>Get Message</code> 查看：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/MQIMG/RabbitMQ/error.queue%E4%B8%AD%E7%9A%84%E9%94%99%E8%AF%AF%E4%BF%A1%E6%81%AF.png" alt="error.queue中的错误信息"></p>
<h2 id="2-4-业务幂等性"><a href="#2-4-业务幂等性" class="headerlink" title="2.4 业务幂等性"></a>2.4 业务幂等性</h2><p>何为幂等性？</p>
<p><strong>幂等</strong>是一个数学概念，用函数表达式来描述是这样的：<code>f(x) = f(f(x))</code>，例如求绝对值函数。</p>
<p>在程序开发中，则是指同一个业务，执行一次或多次对业务状态的影响是一致的。例如：</p>
<ul>
<li>根据id删除数据</li>
<li>查询数据</li>
<li>新增数据</li>
</ul>
<p>但数据的更新往往不是幂等的，如果重复执行可能造成不一样的后果。比如：</p>
<ul>
<li>取消订单，恢复库存的业务。如果多次恢复就会出现库存重复增加的情况</li>
<li>退款业务。重复退款对商家而言会有经济损失。</li>
</ul>
<p>所以，我们要尽可能避免业务被重复执行。</p>
<p>然而在实际业务场景中，由于意外经常会出现业务被重复执行的情况，例如：</p>
<ul>
<li>页面卡顿时频繁刷新导致表单重复提交</li>
<li>服务间调用的重试</li>
<li>MQ消息的重复投递</li>
</ul>
<p>我们在用户支付成功后会发送MQ消息到交易服务，修改订单状态为已支付，就可能出现消息重复投递的情况。如果消费者不做判断，很有可能导致消息被消费多次，出现业务故障。</p>
<p>举例：</p>
<ul>
<li>假如用户刚刚支付完成，并且投递消息到交易服务，交易服务更改订单为<strong>已支付</strong>状态。</li>
<li>由于某种原因，例如网络故障导致生产者没有得到确认，隔了一段时间后<strong>重新投递</strong>给交易服务。</li>
<li>但是，在新投递的消息被消费之前，用户选择了退款，将订单状态改为了<strong>已退款</strong>状态。</li>
<li>退款完成后，新投递的消息才被消费，那么订单状态会被再次改为<strong>已支付</strong>。业务异常。</li>
</ul>
<p>因此，我们必须想办法保证消息处理的幂等性。这里给出两种方案：</p>
<ul>
<li>唯一消息ID</li>
<li>业务状态判断</li>
</ul>
<h3 id="2-4-1-唯一消息ID"><a href="#2-4-1-唯一消息ID" class="headerlink" title="2.4.1 唯一消息ID"></a>2.4.1 唯一消息ID</h3><p>这个思路非常简单：</p>
<ol>
<li>每一条消息都生成一个唯一的id，与消息一起投递给消费者</li>
<li>消费者接收到消息后处理自己的业务，业务处理成功后将消息ID保存到数据库</li>
<li>如果下次又收到相同消息，去数据库查询判断是否存在，存在则为重复消息放弃处理</li>
</ol>
<p>我们该如何给消息添加唯一ID呢？</p>
<p>其实很简单，SpringAMQP的 MessageConverter 自带了 MessageID 的功能，我们只要开启这个功能即可。</p>
<p>以 Jackson 的消息转换器为例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> MessageConverter <span class="title function_">messageConverter</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">// 1.定义消息转换器</span></span><br><span class="line">    <span class="type">Jackson2JsonMessageConverter</span> <span class="variable">jjmc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jackson2JsonMessageConverter</span>();</span><br><span class="line">    <span class="comment">// 2.配置自动创建消息id，用于识别不同消息，也可以在业务中基于ID判断是否是重复消息</span></span><br><span class="line">    jjmc.setCreateMessageIds(<span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">return</span> jjmc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-4-2-业务判断"><a href="#2-4-2-业务判断" class="headerlink" title="2.4.2 业务判断"></a>2.4.2 业务判断</h3><p>业务判断就是基于业务本身的逻辑或状态来判断是否是重复的请求或消息，不同的业务场景判断的思路也不一样。</p>
<p>例如我们当前案例中，处理消息的业务逻辑是把订单状态从未支付修改为已支付。因此我们就可以在执行业务时判断订单状态是否是未支付，如果不是则证明订单已经被处理过，无需重复处理。</p>
<p>相比较而言，消息ID的方案需要改造原有的数据库，所以我更推荐使用业务判断的方案。</p>
<p>以支付修改订单的业务为例，我们需要修改 <code>OrderServiceImpl</code> 中的 <code>markOrderPaySuccess</code> 方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">markOrderPaySuccess</span><span class="params">(Long orderId)</span> &#123;</span><br><span class="line">    <span class="comment">// 1.查询订单</span></span><br><span class="line">    <span class="type">Order</span> <span class="variable">old</span> <span class="operator">=</span> getById(orderId);</span><br><span class="line">    <span class="comment">// 2.判断订单状态</span></span><br><span class="line">    <span class="keyword">if</span> (old == <span class="literal">null</span> || old.getStatus() != <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// 订单不存在或者订单状态不是1，放弃处理</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3.尝试更新订单</span></span><br><span class="line">    <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Order</span>();</span><br><span class="line">    order.setId(orderId);</span><br><span class="line">    order.setStatus(<span class="number">2</span>);</span><br><span class="line">    order.setPayTime(LocalDateTime.now());</span><br><span class="line">    updateById(order);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述代码逻辑上符合了幂等判断的需求，但是由于判断和更新是两步动作，因此在极小概率下可能存在线程安全问题。</p>
<p>我们可以合并上述操作为这样：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">markOrderPaySuccess</span><span class="params">(Long orderId)</span> &#123;</span><br><span class="line">    <span class="comment">// UPDATE `order` SET status = ? , pay_time = ? WHERE id = ? AND status = 1</span></span><br><span class="line">    lambdaUpdate()</span><br><span class="line">            .set(Order::getStatus, <span class="number">2</span>)</span><br><span class="line">            .set(Order::getPayTime, LocalDateTime.now())</span><br><span class="line">            .eq(Order::getId, orderId)</span><br><span class="line">            .eq(Order::getStatus, <span class="number">1</span>)</span><br><span class="line">            .update();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意看，上述代码等同于这样的 SQL 语句：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> `<span class="keyword">order</span>` <span class="keyword">SET</span> status <span class="operator">=</span> ? , pay_time <span class="operator">=</span> ? <span class="keyword">WHERE</span> id <span class="operator">=</span> ? <span class="keyword">AND</span> status <span class="operator">=</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>我们在 where 条件中除了判断 id 以外，还加上了 status 必须为1的条件。如果条件不符(说明订单已支付)，则 SQL 匹配不到数据，根本不会执行。</p>
<h2 id="2-5-兜底方案"><a href="#2-5-兜底方案" class="headerlink" title="2.5 兜底方案"></a>2.5 兜底方案</h2><p>虽然我们利用各种机制尽可能增加了消息的可靠性，但也不好说能保证消息 100% 的可靠。万一真的 MQ 通知失败该怎么办呢？<br>有没有其它兜底方案，能够确保订单的支付状态一致呢？</p>
<p>其实思想很简单：既然 MQ 通知不一定发送到交易服务，那么交易服务就必须自己<strong>主动去查询</strong>支付状态。这样即便支付服务的 MQ 通知失败，我们依然能通过主动查询来保证订单状态的一致。</p>
<p>流程如下：</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/MQIMG/RabbitMQ/%E6%9C%8D%E5%8A%A1%E6%B5%81%E7%A8%8B.png" alt="服务流程" style="zoom: 50%;">

<p>图中黄色线圈起来的部分就是 MQ 通知失败后的兜底处理方案，由交易服务自己主动去查询支付状态。</p>
<p>不过需要注意的是，交易服务并不知道用户会在什么时候支付，如果查询的时机不正确(比如查询的时候用户正在支付中)，可能查询到的支付状态也不正确。</p>
<p>那么问题来了，我们到底该在什么时间主动查询支付状态呢？</p>
<p>这个时间是无法确定的，因此，通常我们采取的措施就是利用<strong>定时任务</strong>定期查询，例如每隔20秒就查询一次，并判断支付状态。如果发现订单已经支付，则立刻更新订单状态为已支付即可。定时任务具体的实现这里就不再赘述了😏</p>
<p>至此，消息可靠性的问题已经解决了。</p>
<p>综上，支付服务与交易服务之间的订单状态一致性是如何保证的？</p>
<ul>
<li>首先，支付服务会正在用户支付成功以后利用 MQ 消息通知交易服务，完成订单状态同步。</li>
<li>其次，为了保证MQ消息的可靠性，我们采用了生产者确认机制、消费者确认、消费者失败重试等策略，确保消息投递的可靠性</li>
<li>最后，我们还在交易服务设置了定时任务，定期查询订单支付状态。这样即便 MQ 通知失败，还可以利用定时任务作为兜底方案，确保订单支付状态的最终一致性。</li>
</ul>
<h1 id="4-延迟消息"><a href="#4-延迟消息" class="headerlink" title="4. 延迟消息"></a>4. 延迟消息</h1><p>在电商的支付业务中，对于一些库存有限的商品，为了更好的用户体验，通常都会在用户下单时立刻扣减商品库存。例如电影院购票、高铁购票，下单后就会锁定座位资源，其他人无法重复购买。</p>
<p>但是这样就存在一个问题，假如用户下单后一直不付款，就会一直占有库存资源，导致其他客户无法正常交易，最终导致商户利益受损！</p>
<p>因此，电商中通常的做法就是：<strong>对于超过一定时间未支付的订单，应该立刻取消订单并释放占用的库存</strong>。</p>
<p>例如，订单支付超时时间为30分钟，则我们应该在用户下单后的第30分钟检查订单支付状态，如果发现未支付，应该立刻取消订单，释放库存。</p>
<p>但问题来了：如何才能准确的实现在下单后第30分钟去检查支付状态呢？</p>
<p>像这种在一段时间以后才执行的任务，我们称之为<strong>延迟任务</strong>，而要实现延迟任务，最简单的方案就是利用 MQ 的延迟消息了。</p>
<p>在 RabbitMQ 中实现延迟消息也有两种方案：</p>
<ul>
<li>死信交换机+TTL</li>
<li>延迟消息插件</li>
</ul>
<p>这一章我们就一起研究下这两种方案的实现方式，以及优缺点。</p>
<h2 id="4-1-死信交换机和延迟消息"><a href="#4-1-死信交换机和延迟消息" class="headerlink" title="4.1 死信交换机和延迟消息"></a>4.1 死信交换机和延迟消息</h2><p>首先我们来学习一下基于死信交换机的延迟消息方案。</p>
<h3 id="4-1-1-死信交换机"><a href="#4-1-1-死信交换机" class="headerlink" title="4.1.1 死信交换机"></a>4.1.1 死信交换机</h3><p>什么是死信？</p>
<p>当一个队列中的消息满足下列情况之一时，可以成为死信(dead letter)：</p>
<ul>
<li>消费者使用 <code>basic.reject</code> 或  <code>basic.nack </code>声明消费失败，并且消息的 <code>requeue</code> 参数设置为 false</li>
<li>消息是一个过期消息，超时无人消费</li>
<li>要投递的队列消息满了，无法投递</li>
</ul>
<p>如果一个队列中的消息已经成为死信，并且这个队列通过 <code>dead-letter-exchange</code> 属性指定了一个交换机，那么队列中的死信就会投递到这个交换机中，而这个交换机就称为 <strong>死信交换机</strong>(Dead Letter Exchange)。而此时加入有队列与死信交换机绑定，则最终死信就会被投递到这个队列中。</p>
<p>死信交换机有什么作用呢？</p>
<ul>
<li>收集那些因处理失败而被拒绝的消息</li>
<li>收集那些因队列满了而被拒绝的消息</li>
<li>收集因TTL(有效期)到期的消息</li>
</ul>
<h3 id="4-1-2-延迟消息"><a href="#4-1-2-延迟消息" class="headerlink" title="4.1.2 延迟消息"></a>4.1.2 延迟消息</h3><p>前面两种作用场景可以看做是把死信交换机当做一种消息处理的最终兜底方案，与消费者重试时讲的 <code>RepublishMessageRecoverer</code> 作用类似。</p>
<p>而最后一种场景，大家设想一下这样的场景：</p>
<p>如图，有一组绑定的交换机 <code>ttl.fanout</code> 和队列 <code>ttl.queue</code>。但是 <code>ttl.queue</code> 没有消费者监听，而是设定了死信交换机<code>hmall.direct</code>，而队列 <code>direct.queue1 </code> 则与死信交换机绑定，<code>RoutingKey</code> 是 <code>blue</code>：<br><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/MQIMG/RabbitMQ/%E5%9C%BA%E6%99%AF.png" alt="场景"></p>
<p>假如我们现在发送一条消息到 <code>ttl.fanout</code>，<code>RoutingKey</code> 为 <code>blue</code>，并设置消息的<strong>有效期</strong>为 5000 毫秒：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/MQIMG/RabbitMQ/%E5%8F%91%E9%80%81%E4%B8%80%E6%9D%A1%E6%B6%88%E6%81%AF%E5%88%B0ttl.fanout.png" alt="发送一条消息到ttl.fanout"></p>
<p><strong>注意</strong>：尽管这里的 <code>ttl.fanout</code> 不需要 <code>RoutingKey</code>，但是当消息变为死信并投递到死信交换机时，会沿用之前的 <code>RoutingKey</code>，这样 <code>hmall.direct </code>才能正确路由消息。</p>
<p>消息肯定会被投递到 <code>ttl.queue</code> 之后，由于没有消费者，因此消息无人消费。5秒之后，消息的有效期到期，成为死信：<br><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/MQIMG/RabbitMQ/5%E7%A7%92%E5%90%8E%E6%B6%88%E6%81%AF%E6%88%90%E4%B8%BA%E6%AD%BB%E4%BF%A1.png" alt="5秒后消息成为死信"><br>死信被再次投递到死信交换机 <code>hmall.direct</code>，并沿用之前的 <code>RoutingKey</code>，也就是 <code>blue</code>：<br><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/MQIMG/RabbitMQ/%E6%AD%BB%E4%BF%A1%E8%A2%AB%E5%86%8D%E6%AC%A1%E6%8A%95%E9%80%92%E5%88%B0%E6%AD%BB%E4%BF%A1%E4%BA%A4%E6%8D%A2%E6%9C%BAhmall.direct.png" alt="死信被再次投递到死信交换机hmall.direct"></p>
<p>由于 <code>direct.queue1</code> 与 <code>hmall.direct</code> 绑定的 <code>key</code> 是 <code>blue</code>，因此最终消息被成功路由到 <code>direct.queue1</code>，如果此时有消费者与<code>direct.queue1</code> 绑定， 也就能成功消费消息了。但此时已经是5秒钟以后了：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/MQIMG/RabbitMQ/5%E7%A7%92%E9%92%9F%E4%BB%A5%E5%90%8E%E6%B6%88%E8%B4%B9%E6%B6%88%E6%81%AF.png" alt="5秒钟以后消费消息"><br>也就是说，publisher 发送了一条消息，但最终 consumer 在5秒后才收到消息。我们成功实现了<strong>延迟消息</strong>。</p>
<blockquote>
<p>总结</p>
</blockquote>
<p>RabbitMQ 的消息过期是基于追溯方式来实现的，也就是说当一个消息的 TTL 到期以后不一定会被移除或投递到死信交换机，而是在消息恰好处于队首时才会被处理。</p>
<p>当队列中消息堆积很多的时候，过期消息可能不会被按时处理，因此你设置的 TTL 时间不一定准确。</p>
<h2 id="4-2-DelayExchange插件"><a href="#4-2-DelayExchange插件" class="headerlink" title="4.2.DelayExchange插件"></a>4.2.DelayExchange插件</h2><p>基于死信队列虽然可以实现延迟消息，但是太麻烦了。因此 RabbitMQ 社区提供了一个延迟消息插件来实现相同的效果。</p>
<p>官方文档说明：<a href="https://blog.rabbitmq.com/posts/2015/04/scheduling-messages-with-rabbitmq">https://blog.rabbitmq.com/posts/2015/04/scheduling-messages-with-rabbitmq</a></p>
<h3 id="4-2-1-下载"><a href="#4-2-1-下载" class="headerlink" title="4.2.1.下载"></a>4.2.1.下载</h3><p>插件下载地址：<a href="https://github.com/rabbitmq/rabbitmq-delayed-message-exchange">https://github.com/rabbitmq/rabbitmq-delayed-message-exchange</a></p>
<p>由于我们安装的MQ是 <code>3.8</code> 版本，因此这里下载 <code>3.8.17</code> 版本：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/MQIMG/RabbitMQ/DelayExchange%E6%8F%92%E4%BB%B6v3.8.17.png" alt="DelayExchange插件v3.8.17"></p>
<h3 id="4-2-2-安装"><a href="#4-2-2-安装" class="headerlink" title="4.2.2.安装"></a>4.2.2.安装</h3><p>因为我们是基于 Docker 安装，所以需要先查看 RabbitMQ 的插件目录对应的数据卷。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker volume inspect mq-plugins</span><br></pre></td></tr></table></figure>
<p>结果如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;CreatedAt&quot;: &quot;2024-06-19T09:22:59+08:00&quot;,</span><br><span class="line">        &quot;Driver&quot;: &quot;local&quot;,</span><br><span class="line">        &quot;Labels&quot;: null,</span><br><span class="line">        &quot;Mountpoint&quot;: &quot;/var/lib/docker/volumes/mq-plugins/_data&quot;,</span><br><span class="line">        &quot;Name&quot;: &quot;mq-plugins&quot;,</span><br><span class="line">        &quot;Options&quot;: null,</span><br><span class="line">        &quot;Scope&quot;: &quot;local&quot;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>插件目录被挂载到了 <code>/var/lib/docker/volumes/mq-plugins/_data</code> 这个目录，我们上传插件到该目录下。</p>
<p>接下来执行命令，安装插件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec -it mq rabbitmq-plugins enable rabbitmq_delayed_message_exchange</span><br></pre></td></tr></table></figure>
<p>运行结果如下：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/MQIMG/RabbitMQ/DelayExchange%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85%E7%BB%93%E6%9E%9C.png" alt="DelayExchange插件安装结果"></p>
<h3 id="4-2-3-声明延迟交换机"><a href="#4-2-3-声明延迟交换机" class="headerlink" title="4.2.3.声明延迟交换机"></a>4.2.3.声明延迟交换机</h3><p>基于注解方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">        value = @Queue(name = &quot;delay.queue&quot;, durable = &quot;true&quot;),</span></span><br><span class="line"><span class="meta">        exchange = @Exchange(name = &quot;delay.direct&quot;, delayed = &quot;true&quot;),</span></span><br><span class="line"><span class="meta">        key = &quot;delay&quot;</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenDelayMessage</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;接收到delay.queue的延迟消息：&#123;&#125;&quot;</span>, msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>基于 <code>@Bean  </code> 的方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.muyoukule.consumer.config;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DelayExchangeConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DirectExchange <span class="title function_">delayExchange</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ExchangeBuilder</span><br><span class="line">                .directExchange(<span class="string">&quot;delay.direct&quot;</span>) <span class="comment">// 指定交换机类型和名称</span></span><br><span class="line">                .delayed() <span class="comment">// 设置delay的属性为true</span></span><br><span class="line">                .durable(<span class="literal">true</span>) <span class="comment">// 持久化</span></span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">delayedQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;delay.queue&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">delayQueueBinding</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(delayedQueue()).to(delayExchange()).with(<span class="string">&quot;delay&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-2-4-发送延迟消息"><a href="#4-2-4-发送延迟消息" class="headerlink" title="4.2.4.发送延迟消息"></a>4.2.4.发送延迟消息</h3><p>发送消息时，必须通过 <code>x-delay</code> 属性设定延迟时间：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testPublisherDelayMessage</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 1.创建消息</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;hello, delayed message&quot;</span>;</span><br><span class="line">    <span class="comment">// 2.发送消息，利用消息后置处理器添加消息头</span></span><br><span class="line">    rabbitTemplate.convertAndSend(<span class="string">&quot;delay.direct&quot;</span>, <span class="string">&quot;delay&quot;</span>, message, <span class="keyword">new</span> <span class="title class_">MessagePostProcessor</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Message <span class="title function_">postProcessMessage</span><span class="params">(Message message)</span> <span class="keyword">throws</span> AmqpException &#123;</span><br><span class="line">            <span class="comment">// 添加延迟消息属性</span></span><br><span class="line">            message.getMessageProperties().setDelay(<span class="number">5000</span>);</span><br><span class="line">            <span class="keyword">return</span> message;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong></p>
<p>延迟消息插件内部会维护一个本地数据库表，同时使用 Elang Timers 功能实现计时。如果消息的延迟时间设置较长，可能会导致堆积的延迟消息非常多，会带来较大的 CPU 开销，同时延迟消息的时间会存在误差。</p>
<p>因此，<strong>不建议设置延迟时间过长的延迟消息</strong>。</p>
]]></content>
      <categories>
        <category>MQ</category>
      </categories>
      <tags>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMQ基础</title>
    <url>/posts/RabbitMQ-Basics/</url>
    <content><![CDATA[<p>RabbitMQ官网：<a href="https://www.rabbitmq.com/">https://www.rabbitmq.com</a></p>
<p>参考视频：<a href="https://www.bilibili.com/video/BV1mN4y1Z7t9/">黑马程序员RabbitMQ入门到实战教程，MQ消息中间件，微服务rabbitmq消息队列实战，RabbitMQ面试题一套全覆盖</a></p>
<h1 id="0-写在前面"><a href="#0-写在前面" class="headerlink" title="0. 写在前面"></a>0. 写在前面</h1><p>微服务一旦拆分，必然涉及到服务之间的相互调用，目前我们服务之间调用采用的都是基于 OpenFeign 的调用。这种调用中，调用者发起请求后需要<strong>等待</strong>服务提供者执行业务返回结果后，才能继续执行后面的业务。也就是说调用者在调用过程中处于阻塞状态，因此我们成这种调用方式为<strong>同步调用</strong>，也可以叫<strong>同步通讯</strong>。但在很多场景下，我们可能需要采用<strong>异步通讯</strong>的方式，为什么呢？</p>
<p>我们先来看看什么是同步通讯和异步通讯。如图：</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/MQIMG/RabbitMQ/%E5%90%8C%E6%AD%A5%E9%80%9A%E8%AE%AF%E5%92%8C%E5%BC%82%E6%AD%A5%E9%80%9A%E8%AE%AF.png" alt="同步通讯和异步通讯" style="zoom:50%;">

<p>解读：</p>
<ul>
<li>同步通讯：就如同打视频电话，双方的交互都是实时的。因此同一时刻你只能跟一个人打视频电话。</li>
<li>异步通讯：就如同发微信聊天，双方的交互不是实时的，你不需要立刻给对方回应。因此你可以多线操作，同时跟多人聊天。</li>
</ul>
<p>两种方式各有优劣，打电话可以立即得到响应，但是你却不能跟多个人同时通话。发微信可以同时与多个人收发微信，但是往往响应会有延迟。</p>
<p>所以，如果我们的业务需要实时得到服务提供方的响应，则应该选择同步通讯(同步调用)。而如果我们追求更高的效率，并且不需要实时响应，则应该选择异步通讯(异步调用)。</p>
<p> OpenFeign 调用就是同步调用的方式。但是：</p>
<ul>
<li>异步调用又该如何实现？</li>
<li>哪些业务适合用异步调用来实现呢？</li>
</ul>
<p>通过今天的学习你就能明白这些问题了。</p>
<h1 id="1-初识MQ"><a href="#1-初识MQ" class="headerlink" title="1. 初识MQ"></a>1. 初识MQ</h1><h2 id="1-1-同步调用"><a href="#1-1-同步调用" class="headerlink" title="1.1 同步调用"></a>1.1 同步调用</h2><p>我们基于 OpenFeign 的调用都属于是同步调用，那么这种方式存在哪些问题呢？</p>
<p>举个例子，以<strong>余额支付功能</strong>为例来分析，首先看下整个流程：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/MQIMG/RabbitMQ/%E4%BD%99%E9%A2%9D%E6%94%AF%E4%BB%98%E5%8A%9F%E8%83%BD%E6%B5%81%E7%A8%8B.png" alt="余额支付功能流程"></p>
<p>目前我们采用的是基于 OpenFeign 的同步调用，也就是说业务执行流程是这样的：</p>
<ol>
<li>支付服务需要先调用用户服务完成余额扣减</li>
<li>然后支付服务自己要更新支付流水单的状态</li>
<li>然后支付服务调用交易服务，更新业务订单状态为已支付</li>
</ol>
<p>这其中就存在3个问题：</p>
<p><strong>拓展性差</strong></p>
<p>我们目前的业务相对简单，但是随着业务规模扩大，产品的功能也在不断完善。</p>
<p>在大多数电商业务中，用户支付成功后都会以短信或者其它方式通知用户，告知支付成功。假如后期产品经理提出这样新的需求，你怎么办？是不是要在上述业务中再加入通知用户的业务？</p>
<p>某些电商项目中，还会有积分或金币的概念。假如产品经理提出需求，用户支付成功后，给用户以积分奖励或者返还金币，你怎么办？是不是要在上述业务中再加入积分业务、返还金币业务？</p>
<p>最终你的支付业务会越来越臃肿：</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/MQIMG/RabbitMQ/%E6%94%AF%E4%BB%98%E4%B8%9A%E5%8A%A1.png" alt="支付业务" style="zoom: 50%;">

<p>也就是说每次有新的需求，现有支付逻辑都要跟着变化，代码经常变动，不符合开闭原则，拓展性不好。</p>
<p><strong>性能下降</strong></p>
<p>由于我们采用了同步调用，调用者需要等待服务提供者执行完返回结果后，才能继续向下执行，也就是说每次远程调用，调用者都是阻塞等待状态。最终整个业务的响应时长就是每次远程调用的执行时长之和：</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/MQIMG/RabbitMQ/%E6%89%A7%E8%A1%8C%E6%97%B6%E9%95%BF.png" alt="执行时长" style="zoom: 50%;">

<p>假如每个微服务的执行时长都是 50ms，则最终整个业务的耗时可能高达 300ms，性能太差了。</p>
<p><strong>级联失败</strong></p>
<p>由于我们是基于 OpenFeign 调用交易服务、通知服务。当交易服务、通知服务出现故障时，整个事务都会回滚，交易失败。</p>
<p>这其实就是同步调用的<strong>级联失败</strong>问题。</p>
<p>但是大家思考一下，我们假设用户余额充足，扣款已经成功，此时我们应该确保支付流水单更新为已支付，确保交易成功。毕竟收到手里的钱没道理再退回去吧。😬</p>
<p>因此，这里不能因为短信通知、更新订单状态失败而回滚整个事务。</p>
<blockquote>
<p>总结</p>
</blockquote>
<p>综上，同步调用的方式存在下列问题：</p>
<ul>
<li>拓展性差</li>
<li>性能下降</li>
<li>级联失败</li>
</ul>
<p>而要解决这些问题，我们就必须用<strong>异步调用</strong>的方式来代替<strong>同步调用</strong>。</p>
<h2 id="1-2-异步调用"><a href="#1-2-异步调用" class="headerlink" title="1.2 异步调用"></a>1.2 异步调用</h2><p>异步调用方式其实就是基于消息通知的方式，一般包含三个角色：</p>
<ul>
<li>消息发送者：投递消息的人，就是原来的调用方</li>
<li>消息 Broker：管理、暂存、转发消息，你可以把它理解成微信服务器</li>
<li>消息接收者：接收和处理消息的人，就是原来的服务提供方</li>
</ul>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/MQIMG/RabbitMQ/%E5%BC%82%E6%AD%A5%E8%B0%83%E7%94%A8%E4%B8%89%E8%A7%92%E8%89%B2.png" alt="异步调用三角色"></p>
<p>在异步调用中，发送者不再直接同步调用接收者的业务接口，而是发送一条消息投递给消息Broker。然后接收者根据自己的需求从消息 Broker 那里订阅消息。每当发送方发送消息后，接受者都能获取消息并处理。</p>
<p>这样，发送消息的人和接收消息的人就完全解耦了。</p>
<p>还是以余额支付业务为例：</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/MQIMG/RabbitMQ/%E4%BD%99%E9%A2%9D%E6%94%AF%E4%BB%98%E4%B8%9A%E5%8A%A1.png" alt="余额支付业务" style="zoom: 50%;">

<p>除了扣减余额、更新支付流水单状态以外，其它调用逻辑全部取消。而是改为发送一条消息到 Broker。而相关的微服务都可以订阅消息通知，一旦消息到达 Broker，则会分发给每一个订阅了的微服务，处理各自的业务。</p>
<p>假如产品经理提出了新的需求，比如要在支付成功后更新用户积分。支付代码完全不用变更，而仅仅是让积分服务也订阅消息即可：</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/MQIMG/RabbitMQ/%E5%A2%9E%E5%8A%A0%E6%9B%B4%E6%96%B0%E7%94%A8%E6%88%B7%E7%A7%AF%E5%88%86.png" alt="增加更新用户积分" style="zoom:50%;">

<p>不管后期增加了多少消息订阅者，作为支付服务来讲，执行问扣减余额、更新支付流水状态后，发送消息即可。业务耗时仅仅是这三部分业务耗时，仅仅 100ms，大大提高了业务性能。</p>
<p>另外，不管是交易服务、通知服务，还是积分服务，他们的业务与支付关联度低。现在采用了异步调用，解除了耦合，他们即便执行过程中出现了故障，也不会影响到支付服务。</p>
<blockquote>
<p>总结</p>
</blockquote>
<p>综上，异步调用的优势包括</p>
<ul>
<li>耦合度更低</li>
<li>性能更好</li>
<li>业务拓展性强</li>
<li>故障隔离，避免级联失败</li>
</ul>
<p>当然，异步通信也并非完美无缺，它存在下列缺点：</p>
<ul>
<li>完全依赖于 Broker 的可靠性、安全性和性能</li>
<li>架构复杂，后期维护和调试麻烦</li>
</ul>
<h2 id="1-3-技术选型"><a href="#1-3-技术选型" class="headerlink" title="1.3 技术选型"></a>1.3 技术选型</h2><p>消息 Broker，目前常见的实现方案就是消息队列(MessageQueue)，简称为 MQ。</p>
<p>目比较常见的 MQ 实现对比：</p>
<table>
<thead>
<tr>
<th align="center"></th>
<th align="center"><strong>RabbitMQ</strong></th>
<th align="center"><strong>ActiveMQ</strong></th>
<th align="center"><strong>RocketMQ</strong></th>
<th align="center"><strong>Kafka</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center">公司&#x2F;社区</td>
<td align="center">Rabbit</td>
<td align="center">Apache</td>
<td align="center">阿里</td>
<td align="center">Apache</td>
</tr>
<tr>
<td align="center">开发语言</td>
<td align="center">Erlang</td>
<td align="center">Java</td>
<td align="center">Java</td>
<td align="center">Scala&amp;Java</td>
</tr>
<tr>
<td align="center">协议支持</td>
<td align="center">AMQP，XMPP，SMTP，STOMP</td>
<td align="center">OpenWire,STOMP，REST,XMPP,AMQP</td>
<td align="center">自定义协议</td>
<td align="center">自定义协议</td>
</tr>
<tr>
<td align="center">可用性</td>
<td align="center">高</td>
<td align="center">一般</td>
<td align="center">高</td>
<td align="center">高</td>
</tr>
<tr>
<td align="center">单机吞吐量</td>
<td align="center">一般</td>
<td align="center">差</td>
<td align="center">高</td>
<td align="center">非常高</td>
</tr>
<tr>
<td align="center">消息延迟</td>
<td align="center">微秒级</td>
<td align="center">毫秒级</td>
<td align="center">毫秒级</td>
<td align="center">毫秒以内</td>
</tr>
<tr>
<td align="center">消息可靠性</td>
<td align="center">高</td>
<td align="center">一般</td>
<td align="center">高</td>
<td align="center">一般</td>
</tr>
</tbody></table>
<p>追求可用性：Kafka、 RocketMQ 、RabbitMQ</p>
<p>追求可靠性：RabbitMQ、RocketMQ</p>
<p>追求吞吐能力：RocketMQ、Kafka</p>
<p>追求消息低延迟：RabbitMQ、Kafka</p>
<p>据统计，目前国内消息队列使用最多的还是 RabbitMQ，其各方面都比较均衡，稳定性也好。</p>
<h1 id="2-RabbitMQ"><a href="#2-RabbitMQ" class="headerlink" title="2. RabbitMQ"></a>2. RabbitMQ</h1><p>RabbitMQ 是基于 Erlang 语言开发的开源消息通信中间件，官网地址：<a href="https://www.rabbitmq.com/">https://www.rabbitmq.com</a></p>
<h2 id="2-1-安装"><a href="#2-1-安装" class="headerlink" title="2.1 安装"></a>2.1 安装</h2><p>我们基于 Docker 来安装 RabbitMQ，使用下面的命令即可：</p>
<p>1、拉取镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull rabbitmq:3.8-management</span><br></pre></td></tr></table></figure>

<p>2、创建并运行容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run \</span><br><span class="line"> -e RABBITMQ_DEFAULT_USER=muyoukule \</span><br><span class="line"> -e RABBITMQ_DEFAULT_PASS=123456 \</span><br><span class="line"> -v mq-plugins:/plugins \</span><br><span class="line"> --name mq \</span><br><span class="line"> --hostname mq \</span><br><span class="line"> -p 15672:15672 \</span><br><span class="line"> -p 5672:5672 \</span><br><span class="line"> --network hmall \</span><br><span class="line"> -d \</span><br><span class="line"> rabbitmq:3.8-management</span><br></pre></td></tr></table></figure>

<p>可以看到在安装命令中有两个映射的端口：</p>
<ul>
<li>15672：RabbitMQ 提供的管理控制台的端口</li>
<li>5672：RabbitMQ 的消息发送处理接口</li>
</ul>
<p>安装完成后，我们访问 <code>http://YourIp:15672/</code> 即可看到管理控制台。首次访问需要登录，默认的用户名和密码在配置文件中已经指定了。</p>
<p>登录后即可看到管理控制台总览页面：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/MQIMG/RabbitMQ/RabbitMQ%E7%AE%A1%E7%90%86%E6%8E%A7%E5%88%B6%E5%8F%B0%E6%80%BB%E8%A7%88%E9%A1%B5%E9%9D%A2.png" alt="RabbitMQ管理控制台总览页面"></p>
<p>RabbitMQ 对应的架构如图：<br><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/MQIMG/RabbitMQ/RabbitMQ%E6%9E%B6%E6%9E%84%E5%A6%82%E5%9B%BE.png" alt="RabbitMQ架构如图"></p>
<p>其中包含几个概念：</p>
<ul>
<li><code>publisher</code>：生产者，也就是发送消息的一方</li>
<li><code>consumer</code>：消费者，也就是消费消息的一方</li>
<li><code>queue</code>：队列，存储消息。生产者投递的消息会暂存在消息队列中，等待消费者处理</li>
<li><code>exchange</code>：交换机，负责消息路由。生产者发送的消息由交换机决定投递到哪个队列。</li>
<li><code>virtual host</code>：虚拟主机，起到数据隔离的作用。每个虚拟主机相互独立，有各自的exchange、queue</li>
</ul>
<p>上述这些东西都可以在 RabbitMQ 的管理控制台来管理，下一节我们就一起来学习控制台的使用。</p>
<h2 id="2-2-收发消息"><a href="#2-2-收发消息" class="headerlink" title="2.2 收发消息"></a>2.2 收发消息</h2><h3 id="2-2-1-交换机"><a href="#2-2-1-交换机" class="headerlink" title="2.2.1 交换机"></a>2.2.1 交换机</h3><p>我们打开 <code>Exchanges</code> 选项卡，可以看到已经存在很多交换机：</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/MQIMG/RabbitMQ/RabbitMQ%E9%BB%98%E8%AE%A4%E4%BA%A4%E6%8D%A2%E6%9C%BA.png" alt="RabbitMQ默认交换机" style="zoom:50%;">

<p>我们点击任意交换机，即可进入交换机详情页面。仍然会利用控制台中的 <code>publish message</code> 发送一条消息：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/MQIMG/RabbitMQ/RabbitMQ%E4%BA%A4%E6%8D%A2%E6%9C%BA%E8%AF%A6%E6%83%85%E9%A1%B5%E9%9D%A2.png" alt="RabbitMQ交换机详情页面"><br><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/MQIMG/RabbitMQ/RabbitMQ%E6%8E%A7%E5%88%B6%E5%8F%B0%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF.png" alt="RabbitMQ控制台发送消息" style="zoom:50%;"></p>
<p>点击后会提示<code>Message published, but not routed.</code>这里是由控制台模拟了生产者发送的消息。由于没有消费者存在，最终消息丢失了，这样说明交换机没有存储消息的能力。</p>
<h3 id="2-2-2-队列"><a href="#2-2-2-队列" class="headerlink" title="2.2.2 队列"></a>2.2.2 队列</h3><p>我们打开 <code>Queues</code> 选项卡，新建一个队列：<br><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/MQIMG/RabbitMQ/RabbitMQ%E6%96%B0%E5%BB%BA%E9%98%9F%E5%88%97.png" alt="RabbitMQ新建队列" style="zoom: 67%;"></p>
<p>命名为 <code>hello.queue1</code>：</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/MQIMG/RabbitMQ/%E5%91%BD%E5%90%8D%E9%98%9F%E5%88%97%E4%B8%BAhello.queue1.png" alt="命名队列为hello.queue1" style="zoom: 67%;">

<p>再以相同的方式，创建一个队列，命名为 <code>hello.queue2</code>，最终队列列表如下：</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/MQIMG/RabbitMQ/%E5%91%BD%E5%90%8D%E9%98%9F%E5%88%97%E4%B8%BAhello.queue2.png" alt="命名队列为hello.queue2" style="zoom:67%;">

<p>此时，我们再次向 <code>amq.fanout</code> 交换机发送一条消息。会发现消息依然没有到达队列！！</p>
<p>怎么回事呢？</p>
<p>发送到交换机的消息，只会路由到与其绑定的队列，因此仅仅创建队列是不够的，我们还需要将其与交换机绑定。</p>
<h3 id="2-2-3-绑定关系"><a href="#2-2-3-绑定关系" class="headerlink" title="2.2.3 绑定关系"></a>2.2.3 绑定关系</h3><p>点击 <code>Exchanges</code> 选项卡，点击 <code>amq.fanout</code> 交换机，进入交换机详情页，然后点击<code>Bindings</code>菜单，在表单中填写要绑定的队列名称：</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/MQIMG/RabbitMQ/%E5%A1%AB%E5%86%99%E8%A6%81%E7%BB%91%E5%AE%9A%E7%9A%84%E9%98%9F%E5%88%97%E5%90%8D%E7%A7%B0.png" alt="填写要绑定的队列名称" style="zoom: 50%;">

<p>相同的方式，将 <code>hello.queue2</code> 也绑定到改交换机。</p>
<p>最终，绑定结果如下：</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/MQIMG/RabbitMQ/%E4%BA%A4%E6%8D%A2%E6%9C%BA%E7%BB%91%E5%AE%9A%E7%BB%93%E6%9E%9C.png" alt="交换机绑定结果" style="zoom:67%;">

<h3 id="2-2-4-发送消息"><a href="#2-2-4-发送消息" class="headerlink" title="2.2.4 发送消息"></a>2.2.4 发送消息</h3><p>再次回到 <code>Exchange</code> 页面，找到刚刚绑定的 <code>amq.fanout</code>，点击进入详情页，再次发送一条消息：</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/MQIMG/RabbitMQ/%E5%A1%AB%E5%86%99%E8%A6%81%E7%BB%91%E5%AE%9A%E7%9A%84%E9%98%9F%E5%88%97%E5%90%8D%E7%A7%B0.png" alt="填写要绑定的队列名称" style="zoom: 50%;">

<p>回到 <code>Queues</code> 页面，可以发现 <code>hello.queue</code> 中已经有一条消息了：</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/MQIMG/RabbitMQ/hello.queue%E4%B8%AD%E5%B7%B2%E6%9C%89%E4%B8%80%E6%9D%A1%E6%B6%88%E6%81%AF.png" alt="hello.queue中已有一条消息" style="zoom:67%;">

<p>点击队列名称，进入详情页，查看队列详情，这次我们点击 <code>Get message</code>：</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/MQIMG/RabbitMQ/%E7%82%B9%E5%87%BBgetmessage.png" alt="点击getmessage" style="zoom: 80%;">

<p>可以看到消息到达队列了：</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/MQIMG/RabbitMQ/%E6%B6%88%E6%81%AF%E5%88%B0%E8%BE%BE%E9%98%9F%E5%88%97.png" alt="消息到达队列" style="zoom: 80%;">



<p>这个时候如果有消费者监听了 MQ 的 <code>hello.queue1</code> 或 <code>hello.queue2</code> 队列，自然就能接收到消息了。</p>
<p><strong>总结</strong></p>
<ul>
<li><p>交换机负责路由和转发消息，没有存储消息的能力</p>
</li>
<li><p>一旦队列与交换机绑定，每个队列都可以收到信息</p>
</li>
</ul>
<h2 id="2-3-数据隔离"><a href="#2-3-数据隔离" class="headerlink" title="2.3 数据隔离"></a>2.3 数据隔离</h2><h3 id="2-3-1-用户管理"><a href="#2-3-1-用户管理" class="headerlink" title="2.3.1 用户管理"></a>2.3.1 用户管理</h3><p>点击 <code>Admin</code> 选项卡，首先会看到 RabbitMQ 控制台的用户管理界面：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/MQIMG/RabbitMQ/RabbitMQ%E6%8E%A7%E5%88%B6%E5%8F%B0%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86%E7%95%8C%E9%9D%A2.png" alt="RabbitMQ控制台用户管理界面"></p>
<p>这里的用户都是 RabbitMQ 的管理或运维人员。目前只有安装 RabbitMQ 时添加的 <code>muyoukule</code> 这个用户。仔细观察用户表格中的字段，如下：</p>
<ul>
<li><code>Name</code>：<code>muyoukule</code>，也就是用户名</li>
<li><code>Tags</code>：<code>administrator</code>，说明 <code>muyoukule</code> 用户是超级管理员，拥有所有权限</li>
<li><code>Can access virtual host</code>： <code>/</code>，可以访问的<code>virtual host</code>，这里的 <code>/ </code>是默认的 <code>virtual host</code></li>
</ul>
<p>对于小型企业而言，出于成本考虑，我们通常只会搭建一套 MQ 集群，公司内的多个不同项目同时使用。这个时候为了避免互相干扰，我们会利用 <code>virtual host</code> 的隔离特性，将不同项目隔离。一般会做两件事情：</p>
<ul>
<li>给每个项目创建独立的运维账号，将管理权限分离。</li>
<li>给每个项目创建不同的 <code>virtual host</code> ，将每个项目的数据隔离。</li>
</ul>
<p>比如，我们给黑马商城创建一个新的用户，命名为 <code>hmall</code> ,密码为  <code>123</code> ：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/MQIMG/RabbitMQ/%E5%88%9B%E5%BB%BA%E6%96%B0%E7%94%A8%E6%88%B7hmall-1711859231732-4.png" alt="创建新用户hmall"></p>
<p>你会发现此时 hmall 用户没有任何 <code>virtual host</code> 的访问权限：<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/MQIMG/RabbitMQ/hmall%E6%97%A0%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90.png" alt="hmall无访问权限"></p>
<p>别急，接下来我们就来授权。</p>
<h3 id="2-3-2-virtual-host"><a href="#2-3-2-virtual-host" class="headerlink" title="2.3.2 virtual host"></a>2.3.2 virtual host</h3><p>我们先退出登录：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/MQIMG/RabbitMQ/%E9%80%80%E5%87%BA%E7%99%BB%E5%BD%95.png" alt="退出登录"></p>
<p>切换到刚刚创建的 hmall 用户登录，然后点击 <code>Virtual Hosts</code> 菜单，进入 <code>virtual host</code> 管理页：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/MQIMG/RabbitMQ/%E8%BF%9B%E5%85%A5virtual%20host%E7%AE%A1%E7%90%86%E9%A1%B5.png" alt="进入virtual host管理页"></p>
<p>可以看到目前只有一个默认的 <code>virtual host</code>，名字为 <code>/</code>。</p>
<p> 我们可以给黑马商城项目创建一个单独的 <code>virtual host</code>，而不是使用默认的<code>/</code>。<font color="red">PS：注意 hmall 前面有个 <code>/</code> </font></p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/MQIMG/RabbitMQ/%E5%88%9B%E5%BB%BA%E5%8D%95%E7%8B%AC%E7%9A%84virtual%20host.png" alt="创建单独的virtual host"></p>
<p>创建完成后如图：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/MQIMG/RabbitMQ/%E5%88%9B%E5%BB%BA%E5%8D%95%E7%8B%AC%E7%9A%84virtual%20host%E5%AE%8C%E6%88%90.png" alt="创建单独的virtual host完成"></p>
<p>由于我们是登录 <code>hmall</code> 账户后创建的 <code>virtual host</code>，因此回到 <code>users</code> 菜单，你会发现当前用户已经具备了对 <code>/hmall</code> 这个<code>virtual host</code> 的访问权限了：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/MQIMG/RabbitMQ/%E5%85%B7%E5%A4%87%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90.png" alt="具备访问权限"></p>
<p>此时，点击页面右上角的 <code>virtual host</code> 下拉菜单，切换 <code>virtual host</code> 为  <code>/hmall</code>：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/MQIMG/RabbitMQ/%E5%88%87%E6%8D%A2virtual%20host.png" alt="切换virtual host"></p>
<p>然后再次查看 <code>Queues</code> 选项卡，会发现之前的队列已经看不到了：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/MQIMG/RabbitMQ/%E9%98%9F%E5%88%97%E5%88%97%E8%A1%A8.png" alt="队列列表"></p>
<p>这就是基于<code>virtual host </code>的隔离效果。</p>
<h1 id="3-SpringAMQP"><a href="#3-SpringAMQP" class="headerlink" title="3. SpringAMQP"></a>3. SpringAMQP</h1><p>将来我们开发业务功能的时候，肯定不会在控制台收发消息，而是应该基于编程的方式。由于<code>RabbitMQ</code>采用了AMQP协议，因此它具备跨语言的特性。任何语言只要遵循 AMQP 协议收发消息，都可以与 RabbitMQ 交互。并且 RabbitMQ 官方也提供了各种不同语言的客户端。</p>
<p>但是，RabbitMQ 官方提供的 Java 客户端编码相对复杂，一般生产环境下我们更多会结合 Spring 来使用。而 Spring 的官方刚好基于RabbitMQ 提供了这样一套消息收发的模板工具：SpringAMQP。并且还基于 SpringBoot 对其实现了自动装配，使用起来非常方便。</p>
<p>SpringAMQP 的官方地址：<a href="https://spring.io/projects/spring-amqp/">https://spring.io/projects/spring-amqp/</a></p>
<p>SpringAMQP 提供了三个功能：</p>
<ul>
<li>自动声明队列、交换机及其绑定关系</li>
<li>基于注解的监听器模式，异步接收消息</li>
<li>封装了RabbitTemplate工具，用于发送消息</li>
</ul>
<p>这一章我们就一起学习一下，如何利用 SpringAMQP 实现对 RabbitMQ 的消息收发。</p>
<h2 id="3-1-导入Demo工程"><a href="#3-1-导入Demo工程" class="headerlink" title="3.1 导入Demo工程"></a>3.1 导入Demo工程</h2><p>项目结构如图：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/MQIMG/RabbitMQ/Demo%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84.png" alt="Demo项目结构"></p>
<p>包括三部分：</p>
<ul>
<li>mq-demo：父工程，管理项目依赖</li>
<li>publisher：消息的发送者</li>
<li>consumer：消息的消费者</li>
</ul>
<p>在 <code>mq-demo</code> 这个父工程中，已经配置好了 SpringAMQP 相关的依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.itcast.demo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mq-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>publisher<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>consumer<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--AMQP依赖，包含RabbitMQ--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--单元测试--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>因此，子工程中就可以直接使用 SpringAMQP 了。</p>
<h2 id="3-2-快速入门"><a href="#3-2-快速入门" class="headerlink" title="3.2 快速入门"></a>3.2 快速入门</h2><p>在之前的案例中，我们都是经过交换机发送消息到队列，不过有时候为了测试方便，我们也可以直接向队列发送消息，跳过交换机。</p>
<p>在入门案例中，我们就演示这样的简单模型，如图：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/MQIMG/RabbitMQ/MQ%E7%AE%80%E5%8D%95%E6%A8%A1%E5%9E%8B.jpeg" alt="MQ简单模型"></p>
<p>也就是：</p>
<ul>
<li>publisher直接发送消息到队列</li>
<li>消费者监听并处理队列中的消息</li>
</ul>
<p>注意：这种模式一般测试使用，很少在生产中使用。</p>
<p>为了方便测试，我们现在控制台新建一个队列：<code>simple.queue</code></p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/MQIMG/RabbitMQ/%E6%96%B0%E5%BB%BA%E9%98%9F%E5%88%97simple.queue.png" alt="新建队列simple.queue" style="zoom:67%;">

<p>添加成功：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/MQIMG/RabbitMQ/%E9%98%9F%E5%88%97simple.queue.png" alt="队列simple.queue"></p>
<p>接下来，我们就可以利用 Java 代码收发消息了。</p>
<h3 id="3-1-1-消息发送"><a href="#3-1-1-消息发送" class="headerlink" title="3.1.1 消息发送"></a>3.1.1 消息发送</h3><p>首先配置 MQ 地址，在 <code>publisher</code> 服务的 <code>application.yml</code> 中添加配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.88</span><span class="number">.132</span> <span class="comment"># 你的虚拟机IP</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span> <span class="comment"># 端口</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/hmall</span> <span class="comment"># 虚拟主机</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">hmall</span> <span class="comment"># 用户名</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123</span> <span class="comment"># 密码</span></span><br></pre></td></tr></table></figure>

<p>然后在 <code>publisher</code> 服务中编写测试类 <code>SpringAmqpTest</code>，并利用 <code>RabbitTemplate</code> 实现消息发送：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.muyoukule.publisher.amqp;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringAmqpTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSimpleQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 队列名称</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;simple.queue&quot;</span>;</span><br><span class="line">        <span class="comment">// 消息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;hello, spring amqp!&quot;</span>;</span><br><span class="line">        <span class="comment">// 发送消息</span></span><br><span class="line">        rabbitTemplate.convertAndSend(queueName, message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>打开控制台，可以看到消息已经发送到队列中：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/MQIMG/RabbitMQ/%E6%B6%88%E6%81%AF%E5%B7%B2%E7%BB%8F%E5%8F%91%E9%80%81%E5%88%B0%E9%98%9F%E5%88%97.png" alt="消息已经发送到队列"></p>
<h3 id="3-1-2-消息接收"><a href="#3-1-2-消息接收" class="headerlink" title="3.1.2 消息接收"></a>3.1.2 消息接收</h3><p>首先配置 MQ 地址，在 <code>consumer</code> 服务的 <code>application.yml</code> 中添加配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.88</span><span class="number">.132</span> <span class="comment"># 你的虚拟机IP</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span> <span class="comment"># 端口</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/hmall</span> <span class="comment"># 虚拟主机</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">hmall</span> <span class="comment"># 用户名</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123</span> <span class="comment"># 密码</span></span><br></pre></td></tr></table></figure>

<p>然后在 <code>consumer</code> 服务的 <code>com.muyoukule.consumer.listener</code> 包中新建一个类 <code>SpringRabbitListener</code>，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.muyoukule.consumer.listener;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringRabbitListener</span> &#123;</span><br><span class="line">	<span class="comment">// 利用RabbitListener来声明要监听的队列信息</span></span><br><span class="line">    <span class="comment">// 将来一旦监听的队列中有了消息，就会推送给当前服务，调用当前方法，处理消息。</span></span><br><span class="line">    <span class="comment">// 可以看到方法体中接收的就是消息体的内容</span></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenSimpleQueueMessage</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;spring 消费者接收到消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>测试</p>
</blockquote>
<p>启动 <code>consumer</code> 服务，然后在 <code>publisher</code> 服务中运行测试代码，发送 MQ 消息。最终 <code>consumer</code> 收到消息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring 消费者接收到消息：【hello, spring amqp!】</span><br></pre></td></tr></table></figure>

<h2 id="3-3-WorkQueues模型"><a href="#3-3-WorkQueues模型" class="headerlink" title="3.3 WorkQueues模型"></a>3.3 WorkQueues模型</h2><p>Work queues，任务模型。简单来说就是<strong>让多个消费者绑定到一个队列，共同消费队列中的消息</strong>。</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/MQIMG/RabbitMQ/WorkQueues%E6%A8%A1%E5%9E%8B.png" alt="WorkQueues模型"></p>
<p>当消息处理比较耗时的时候，可能生产消息的速度会远远大于消息的消费速度。长此以往，消息就会堆积越来越多，无法及时处理。</p>
<p>此时就可以使用 work 模型，<strong>多个消费者共同处理消息处理，消息处理的速度就能大大提高</strong>了。</p>
<p>接下来，我们就来模拟这样的场景。</p>
<p>首先，我们在控制台创建一个新的队列，命名为 <code>work.queue</code>：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/MQIMG/RabbitMQ/%E6%96%B0%E5%BB%BAwork.queue.png" alt="新建work.queue"></p>
<h3 id="3-3-1-消息发送"><a href="#3-3-1-消息发送" class="headerlink" title="3.3.1 消息发送"></a>3.3.1 消息发送</h3><p>这次我们循环发送，模拟大量消息堆积现象。</p>
<p>在 <code>publisher</code> 服务中的 <code>SpringAmqpTest</code> 类中添加一个测试方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * workQueue</span></span><br><span class="line"><span class="comment"> * 向队列中不停发送消息，模拟消息堆积。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testWorkQueue</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="comment">// 队列名称</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;work.queue&quot;</span>;</span><br><span class="line">    <span class="comment">// 消息</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;hello, message_&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// 发送消息，每20毫秒发送一次，相当于每秒发送50条消息</span></span><br><span class="line">        rabbitTemplate.convertAndSend(queueName, message + i);</span><br><span class="line">        Thread.sleep(<span class="number">20</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-3-2-消息接收"><a href="#3-3-2-消息接收" class="headerlink" title="3.3.2 消息接收"></a>3.3.2 消息接收</h3><p>要模拟多个消费者绑定同一个队列，我们在 <code>consumer</code> 服务的 <code>SpringRabbitListener</code> 中添加2个新的方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queues = &quot;work.queue&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenWorkQueue1</span><span class="params">(String msg)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者1接收到消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span> + Localtime.now());</span><br><span class="line">    Thread.sleep(<span class="number">20</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;work.queue&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenWorkQueue2</span><span class="params">(String msg)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    System.err.println(<span class="string">&quot;消费者2........接收到消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span> + Localtime.now());</span><br><span class="line">    Thread.sleep(<span class="number">200</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意到这两消费者，都设置了 <code>Thead.sleep</code>，模拟任务耗时：</p>
<ul>
<li>消费者1 sleep了20毫秒，相当于每秒钟处理 50 个消息</li>
<li>消费者2 sleep了200毫秒，相当于每秒处理 5 个消息</li>
</ul>
<blockquote>
<p>测试</p>
</blockquote>
<p>启动 <code>ConsumerApplication</code> 后，在执行 publisher 服务中刚刚编写的发送测试方法 <code>testWorkQueue</code>。</p>
<p>最终结果如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_0】<span class="number">13</span>:<span class="number">32</span>:<span class="number">09.536087700</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_1】<span class="number">13</span>:<span class="number">32</span>:<span class="number">09.551980600</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_3】<span class="number">13</span>:<span class="number">32</span>:<span class="number">09.613422600</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_5】<span class="number">13</span>:<span class="number">32</span>:<span class="number">09.675505600</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_7】<span class="number">13</span>:<span class="number">32</span>:<span class="number">09.736149700</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_2】<span class="number">13</span>:<span class="number">32</span>:<span class="number">09.750059700</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_9】<span class="number">13</span>:<span class="number">32</span>:<span class="number">09.798666</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_11】<span class="number">13</span>:<span class="number">32</span>:<span class="number">09.858968900</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_13】<span class="number">13</span>:<span class="number">32</span>:<span class="number">09.921156200</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_4】<span class="number">13</span>:<span class="number">32</span>:<span class="number">09.964499700</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_15】<span class="number">13</span>:<span class="number">32</span>:<span class="number">09.981896500</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_17】<span class="number">13</span>:<span class="number">32</span>:<span class="number">10.042619700</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_19】<span class="number">13</span>:<span class="number">32</span>:<span class="number">10.104275100</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_21】<span class="number">13</span>:<span class="number">32</span>:<span class="number">10.165434600</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_6】<span class="number">13</span>:<span class="number">32</span>:<span class="number">10.178848100</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_23】<span class="number">13</span>:<span class="number">32</span>:<span class="number">10.225494800</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_25】<span class="number">13</span>:<span class="number">32</span>:<span class="number">10.287941400</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_27】<span class="number">13</span>:<span class="number">32</span>:<span class="number">10.349246100</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_8】<span class="number">13</span>:<span class="number">32</span>:<span class="number">10.393275300</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_29】<span class="number">13</span>:<span class="number">32</span>:<span class="number">10.409556700</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_31】<span class="number">13</span>:<span class="number">32</span>:<span class="number">10.471235500</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_33】<span class="number">13</span>:<span class="number">32</span>:<span class="number">10.532975600</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_35】<span class="number">13</span>:<span class="number">32</span>:<span class="number">10.594234</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_10】<span class="number">13</span>:<span class="number">32</span>:<span class="number">10.608551200</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_37】<span class="number">13</span>:<span class="number">32</span>:<span class="number">10.655375500</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_39】<span class="number">13</span>:<span class="number">32</span>:<span class="number">10.716239400</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_41】<span class="number">13</span>:<span class="number">32</span>:<span class="number">10.777315</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_12】<span class="number">13</span>:<span class="number">32</span>:<span class="number">10.822535300</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_43】<span class="number">13</span>:<span class="number">32</span>:<span class="number">10.838913400</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_45】<span class="number">13</span>:<span class="number">32</span>:<span class="number">10.900169200</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_47】<span class="number">13</span>:<span class="number">32</span>:<span class="number">10.961616800</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_49】<span class="number">13</span>:<span class="number">32</span>:<span class="number">11.022953200</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_14】<span class="number">13</span>:<span class="number">32</span>:<span class="number">11.037243800</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_16】<span class="number">13</span>:<span class="number">32</span>:<span class="number">11.251656100</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_18】<span class="number">13</span>:<span class="number">32</span>:<span class="number">11.465585400</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_20】<span class="number">13</span>:<span class="number">32</span>:<span class="number">11.665810700</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_22】<span class="number">13</span>:<span class="number">32</span>:<span class="number">11.880131200</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_24】<span class="number">13</span>:<span class="number">32</span>:<span class="number">12.094026700</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_26】<span class="number">13</span>:<span class="number">32</span>:<span class="number">12.309042400</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_28】<span class="number">13</span>:<span class="number">32</span>:<span class="number">12.523591600</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_30】<span class="number">13</span>:<span class="number">32</span>:<span class="number">12.724700700</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_32】<span class="number">13</span>:<span class="number">32</span>:<span class="number">12.939740200</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_34】<span class="number">13</span>:<span class="number">32</span>:<span class="number">13.141516900</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_36】<span class="number">13</span>:<span class="number">32</span>:<span class="number">13.354740500</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_38】<span class="number">13</span>:<span class="number">32</span>:<span class="number">13.555752900</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_40】<span class="number">13</span>:<span class="number">32</span>:<span class="number">13.771193800</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_42】<span class="number">13</span>:<span class="number">32</span>:<span class="number">13.984944100</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_44】<span class="number">13</span>:<span class="number">32</span>:<span class="number">14.198056</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_46】<span class="number">13</span>:<span class="number">32</span>:<span class="number">14.412763700</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_48】<span class="number">13</span>:<span class="number">32</span>:<span class="number">14.627655600</span></span><br></pre></td></tr></table></figure>

<p>可以看到消费者 1 和消费者 2 竟然每人消费了 25 条消息：</p>
<ul>
<li>消费者1很快完成了自己的 25 条消息</li>
<li>消费者 2 却在缓慢的处理自己的 25 条消息。</li>
</ul>
<p>也就是说消息是平均分配给每个消费者，并没有考虑到消费者的处理能力。导致 1 个消费者空闲，另一个消费者忙的不可开交。没有充分利用每一个消费者的能力，最终消息处理的耗时远远超过了1秒。这样显然是有问题的。</p>
<h3 id="3-3-3-能者多劳"><a href="#3-3-3-能者多劳" class="headerlink" title="3.3.3 能者多劳"></a>3.3.3 能者多劳</h3><p>在 spring 中有一个简单的配置，可以解决这个问题。我们修改 <code>consumer</code> 服务的 <code>application.yml</code> 文件，添加配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">listener:</span></span><br><span class="line">      <span class="attr">simple:</span></span><br><span class="line">        <span class="attr">prefetch:</span> <span class="number">1</span> <span class="comment"># 每次只能获取一条消息，处理完成才能获取下一个消息</span></span><br></pre></td></tr></table></figure>

<p>再次测试，发现结果如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_0】<span class="number">13</span>:<span class="number">35</span>:<span class="number">42.160102800</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_1】<span class="number">13</span>:<span class="number">35</span>:<span class="number">42.181459500</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_2】<span class="number">13</span>:<span class="number">35</span>:<span class="number">42.212252400</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_3】<span class="number">13</span>:<span class="number">35</span>:<span class="number">42.243198500</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_4】<span class="number">13</span>:<span class="number">35</span>:<span class="number">42.273495200</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_5】<span class="number">13</span>:<span class="number">35</span>:<span class="number">42.304288600</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_6】<span class="number">13</span>:<span class="number">35</span>:<span class="number">42.334585200</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_7】<span class="number">13</span>:<span class="number">35</span>:<span class="number">42.366371400</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_8】<span class="number">13</span>:<span class="number">35</span>:<span class="number">42.396668300</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_9】<span class="number">13</span>:<span class="number">35</span>:<span class="number">42.427462</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_10】<span class="number">13</span>:<span class="number">35</span>:<span class="number">42.458255100</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_11】<span class="number">13</span>:<span class="number">35</span>:<span class="number">42.489047900</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_12】<span class="number">13</span>:<span class="number">35</span>:<span class="number">42.519842500</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_13】<span class="number">13</span>:<span class="number">35</span>:<span class="number">42.550635400</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_14】<span class="number">13</span>:<span class="number">35</span>:<span class="number">42.581428100</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_15】<span class="number">13</span>:<span class="number">35</span>:<span class="number">42.612221700</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_16】<span class="number">13</span>:<span class="number">35</span>:<span class="number">42.643014600</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_17】<span class="number">13</span>:<span class="number">35</span>:<span class="number">42.674304900</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_18】<span class="number">13</span>:<span class="number">35</span>:<span class="number">42.704601200</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_19】<span class="number">13</span>:<span class="number">35</span>:<span class="number">42.735394900</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_20】<span class="number">13</span>:<span class="number">35</span>:<span class="number">42.766188100</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_21】<span class="number">13</span>:<span class="number">35</span>:<span class="number">42.796458</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_22】<span class="number">13</span>:<span class="number">35</span>:<span class="number">42.830668700</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_23】<span class="number">13</span>:<span class="number">35</span>:<span class="number">42.858482500</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_24】<span class="number">13</span>:<span class="number">35</span>:<span class="number">42.888778200</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_25】<span class="number">13</span>:<span class="number">35</span>:<span class="number">42.920069300</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_26】<span class="number">13</span>:<span class="number">35</span>:<span class="number">42.950364900</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_27】<span class="number">13</span>:<span class="number">35</span>:<span class="number">42.981163300</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_28】<span class="number">13</span>:<span class="number">35</span>:<span class="number">43.011454900</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_29】<span class="number">13</span>:<span class="number">35</span>:<span class="number">43.042248</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_30】<span class="number">13</span>:<span class="number">35</span>:<span class="number">43.073042600</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_31】<span class="number">13</span>:<span class="number">35</span>:<span class="number">43.103835100</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_32】<span class="number">13</span>:<span class="number">35</span>:<span class="number">43.134628400</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_33】<span class="number">13</span>:<span class="number">35</span>:<span class="number">43.165923</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_34】<span class="number">13</span>:<span class="number">35</span>:<span class="number">43.196219900</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_35】<span class="number">13</span>:<span class="number">35</span>:<span class="number">43.227505100</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_36】<span class="number">13</span>:<span class="number">35</span>:<span class="number">43.259292700</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_37】<span class="number">13</span>:<span class="number">35</span>:<span class="number">43.289091200</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_38】<span class="number">13</span>:<span class="number">35</span>:<span class="number">43.319387700</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_39】<span class="number">13</span>:<span class="number">35</span>:<span class="number">43.350181800</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_40】<span class="number">13</span>:<span class="number">35</span>:<span class="number">43.380978800</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_41】<span class="number">13</span>:<span class="number">35</span>:<span class="number">43.411920700</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_42】<span class="number">13</span>:<span class="number">35</span>:<span class="number">43.443211600</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_43】<span class="number">13</span>:<span class="number">35</span>:<span class="number">43.474500800</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_44】<span class="number">13</span>:<span class="number">35</span>:<span class="number">43.504301700</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_45】<span class="number">13</span>:<span class="number">35</span>:<span class="number">43.535094800</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_46】<span class="number">13</span>:<span class="number">35</span>:<span class="number">43.565888200</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_47】<span class="number">13</span>:<span class="number">35</span>:<span class="number">43.596681100</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_48】<span class="number">13</span>:<span class="number">35</span>:<span class="number">43.627474500</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_49】<span class="number">13</span>:<span class="number">35</span>:<span class="number">43.658764100</span></span><br></pre></td></tr></table></figure>

<p>可以发现，由于消费者 1 处理速度较快，所以处理了更多的消息；消费者 2 处理速度较慢，只处理了 6 条消息。而最终总的执行耗时也在 1 秒左右，大大提升。</p>
<p>正所谓能者多劳，这样充分利用了每一个消费者的处理能力，可以有效避免消息积压问题。</p>
<blockquote>
<p>总结</p>
</blockquote>
<p>Work 模型的使用：</p>
<ul>
<li>多个消费者绑定到一个队列，同一条消息只会被一个消费者处理</li>
<li>通过设置prefetch来控制消费者预取的消息数量</li>
</ul>
<h2 id="3-4-交换机类型"><a href="#3-4-交换机类型" class="headerlink" title="3.4 交换机类型"></a>3.4 交换机类型</h2><p>在之前的两个测试案例中，都没有交换机，生产者直接发送消息到队列。而一旦引入交换机，消息发送的模式会有很大变化：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/MQIMG/RabbitMQ/%E6%B6%88%E6%81%AF%E5%8F%91%E9%80%81%E6%A8%A1%E5%BC%8F%E5%BC%95%E5%85%A5%E4%BA%A4%E6%8D%A2%E6%9C%BA.png" alt="消息发送模式引入交换机"><br>可以看到，在订阅模型中，多了一个 Exchange 角色，而且过程略有变化：</p>
<ul>
<li><strong>Publisher</strong>：生产者，不再发送消息到队列中，而是发给交换机</li>
<li><strong>Exchange</strong>：交换机，一方面，接收生产者发送的消息。另一方面，知道如何处理消息，例如递交给某个特别队列、递交给所有队列、或是将消息丢弃。到底如何操作，取决于 Exchange 的类型。</li>
<li><strong>Queue</strong>：消息队列也与以前一样，接收消息、缓存消息。不过队列一定要与交换机绑定。</li>
<li><strong>Consumer</strong>：消费者，与以前一样，订阅队列，没有变化</li>
</ul>
<p><strong>Exchange (交换机)只负责转发消息，不具备存储消息的能力</strong>，因此如果没有任何队列与 Exchange 绑定，或者没有符合路由规则的队列，那么消息会丢失！</p>
<p>交换机的类型有四种：</p>
<ul>
<li><strong>Fanout</strong>：广播，将消息交给所有绑定到交换机的队列。我们最早在控制台使用的正是Fanout交换机</li>
<li><strong>Direct</strong>：订阅，基于 RoutingKey (路由 key )发送给订阅了消息的队列</li>
<li><strong>Topic</strong>：通配符订阅，与 Direct 类似，只不过 RoutingKey 可以使用通配符</li>
<li><strong>Headers</strong>：头匹配，基于 MQ 的消息头匹配，用的较少。</li>
</ul>
<p>这里，我们讲解前面的三种交换机模式。</p>
<h2 id="3-5-Fanout交换机"><a href="#3-5-Fanout交换机" class="headerlink" title="3.5 Fanout交换机"></a>3.5 Fanout交换机</h2><p>Fanout，英文翻译是扇出，我觉得在 MQ 中叫广播更合适。</p>
<p>在广播模式下，消息发送流程是这样的：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/MQIMG/RabbitMQ/%E5%B9%BF%E6%92%AD%E6%A8%A1%E5%BC%8F%E4%B8%8B%E6%B6%88%E6%81%AF%E5%8F%91%E9%80%81%E6%B5%81%E7%A8%8B.png" alt="广播模式下消息发送流程"></p>
<ul>
<li> 可以有多个队列</li>
<li>每个队列都要绑定到 Exchange (交换机)</li>
<li>生产者发送的消息，只能发送到交换机</li>
<li>机把消息发送给绑定过的所有队列</li>
<li>订阅队列的消费者都能拿到消息</li>
</ul>
<p><strong>案例需求如图：</strong><br><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/MQIMG/RabbitMQ/Fanout%E4%BA%A4%E6%8D%A2%E6%9C%BA%E9%9C%80%E6%B1%82%E6%A1%88%E4%BE%8B.png" alt="Fanout交换机需求案例"></p>
<ul>
<li>创建一个名为 <code>hmall.fanout</code> 的交换机，类型是 <code>Fanout</code></li>
<li>创建两个队列 <code>fanout.queue1 </code> 和 <code>fanout.queue2</code>，绑定到交换机 <code>hmall.fanout</code></li>
</ul>
<h3 id="3-5-1-声明队列和交换机"><a href="#3-5-1-声明队列和交换机" class="headerlink" title="3.5.1 声明队列和交换机"></a>3.5.1 声明队列和交换机</h3><p>在控制台创建队列 <code>fanout.queue1</code>，创建一个队列  <code>fanout.queue2</code>，然后再创建一个交换机 <code>hmall.fanout</code>：</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/MQIMG/RabbitMQ/%E5%A3%B0%E6%98%8EFanout%E9%98%9F%E5%88%97%E5%92%8C%E4%BA%A4%E6%8D%A2%E6%9C%BA.png" alt="声明Fanout队列和交换机" style="zoom:67%;">

<p>然后绑定两个队列到交换机：</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/MQIMG/RabbitMQ/%E7%BB%91%E5%AE%9Afanout.queue1%E9%98%9F%E5%88%97%E5%88%B0%E4%BA%A4%E6%8D%A2%E6%9C%BA.png" alt="绑定fanout.queue1队列到交换机" style="zoom:67%;">
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/MQIMG/RabbitMQ/%E7%BB%91%E5%AE%9Afanout.queue2%E9%98%9F%E5%88%97%E5%88%B0%E4%BA%A4%E6%8D%A2%E6%9C%BA.png" alt="绑定fanout.queue2队列到交换机" style="zoom:67%;">


<h3 id="3-5-2-消息发送"><a href="#3-5-2-消息发送" class="headerlink" title="3.5.2 消息发送"></a>3.5.2 消息发送</h3><p>在 <code>publisher</code> 服务的 <code>SpringAmqpTest</code> 类中添加测试方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFanoutExchange</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 交换机名称</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">exchangeName</span> <span class="operator">=</span> <span class="string">&quot;hmall.fanout&quot;</span>;</span><br><span class="line">    <span class="comment">// 消息</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;hello, everyone!&quot;</span>;</span><br><span class="line">    rabbitTemplate.convertAndSend(exchangeName, <span class="string">&quot;&quot;</span>, message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-5-3-消息接收"><a href="#3-5-3-消息接收" class="headerlink" title="3.5.3 消息接收"></a>3.5.3 消息接收</h3><p>在 <code>consumer</code> 服务的 <code>SpringRabbitListener</code> 中添加两个方法，作为消费者：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queues = &quot;fanout.queue1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenFanoutQueue1</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者1接收到Fanout消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;fanout.queue2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenFanoutQueue2</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者2接收到Fanout消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">消费者2接收到Fanout消息：【hello, everyone!】</span><br><span class="line">消费者1接收到Fanout消息：【hello, everyone!】</span><br></pre></td></tr></table></figure>

<blockquote>
<p>总结</p>
</blockquote>
<p>交换机的作用是什么？</p>
<ul>
<li>接收 publisher 发送的消息</li>
<li>将消息按照规则路由到与之绑定的队列</li>
<li>不能缓存消息，路由失败，消息丢失</li>
<li>FanoutExchange 的会将消息路由到每个绑定的队列</li>
</ul>
<h2 id="3-6-Direct交换机"><a href="#3-6-Direct交换机" class="headerlink" title="3.6 Direct交换机"></a>3.6 Direct交换机</h2><p>在 Fanout 模式中，一条消息，会被所有订阅的队列都消费。但是，在某些场景下，我们希望不同的消息被不同的队列消费。这时就要用到 Direct 类型的 Exchange。</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/MQIMG/RabbitMQ/Direct%E4%BA%A4%E6%8D%A2%E6%9C%BA.png" alt="Direct交换机"></p>
<p>在 Direct 模型下：</p>
<ul>
<li>队列与交换机的绑定，不能是任意绑定了，而是要指定一个 <code>RoutingKey</code> (路由 key )</li>
<li>消息的发送方在 向 Exchange 发送消息时，也必须指定消息的 <code>RoutingKey</code></li>
<li>Exchange不再把消息交给每一个绑定的队列，而是根据消息的 <code>Routing Key</code> 进行判断，只有队列的 <code>Routingkey</code> 与消息的 <code>Routing key</code> 完全一致，才会接收到消息</li>
</ul>
<p><strong>案例需求如图：</strong></p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/MQIMG/RabbitMQ/Direct%E4%BA%A4%E6%8D%A2%E6%9C%BA%E9%9C%80%E6%B1%82%E6%A1%88%E4%BE%8B.png" alt="Direct交换机需求案例"></p>
<ul>
<li>声明一个名为 <code>hmall.direct</code> 的交换机</li>
<li>声明队列 <code>direct.queue1</code>，绑定 <code>hmall.direct</code>，<code>bindingKey </code>为 <code>blud </code>和 <code>red</code></li>
<li>声明队列 <code>direct.queue2</code>，绑定 <code>hmall.direct</code>，<code>bindingKey</code> 为 <code>yellow</code>和 <code>red</code></li>
<li>在<code>consumer</code>服务中，编写两个消费者方法，分别监听 <code>direct.queue1</code> 和 <code>direct.queue2</code> </li>
<li>在 publisher 中编写测试方法，向 <code>hmall.direct</code> 发送消息</li>
</ul>
<h3 id="3-6-1-声明队列和交换机"><a href="#3-6-1-声明队列和交换机" class="headerlink" title="3.6.1 声明队列和交换机"></a>3.6.1 声明队列和交换机</h3><p>首先在控制台声明两个队列 <code>direct.queue1</code> 和 <code>direct.queue2 </code>，这里不再展示过程：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/MQIMG/RabbitMQ/%E5%A3%B0%E6%98%8EDirect%E9%98%9F%E5%88%97%E5%92%8C%E4%BA%A4%E6%8D%A2%E6%9C%BA.png" alt="声明Direct队列和交换机"></p>
<p>然后声明一个 Direct 类型的交换机，命名为 <code>hmall.direct</code>：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/MQIMG/RabbitMQ/Direct%E4%BA%A4%E6%8D%A2%E6%9C%BAhmall.direct.png" alt="Direct交换机hmall.direct"></p>
<p>然后使用 <code>red  </code> 和 <code>blue  </code> 作为 key，绑定 <code>direct.queue1 </code>到  <code>hmall.direct</code>：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/MQIMG/RabbitMQ/%E4%BD%BF%E7%94%A8red%E4%BD%9C%E4%B8%BAkey%E7%BB%91%E5%AE%9Adirect.queue1.png" alt="使用red作为key绑定direct.queue1"><br><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/MQIMG/RabbitMQ/%E4%BD%BF%E7%94%A8blue%E4%BD%9C%E4%B8%BAkey%E7%BB%91%E5%AE%9Adirect.queue1.png" alt="使用blue作为key绑定direct.queue1"></p>
<p>同理，使用 <code>red </code> 和 <code>yellow   </code>作为 key，绑定 <code>direct.queue2</code> 到 <code>hmall.direct</code>，步骤略，最终结果：<br><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/MQIMG/RabbitMQ/hmall.direct%E4%BA%A4%E6%8D%A2%E6%9C%BA%E7%BB%91%E5%AE%9A%E7%BB%93%E6%9E%9C.png" alt="hmall.direct交换机绑定结果"></p>
<h3 id="3-6-2-消息接收"><a href="#3-6-2-消息接收" class="headerlink" title="3.6.2 消息接收"></a>3.6.2 消息接收</h3><p>在 <code>consumer</code> 服务的 <code>SpringRabbitListener</code> 中添加方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queues = &quot;direct.queue1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenDirectQueue1</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者1接收到direct.queue1的消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;direct.queue2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenDirectQueue2</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者2接收到direct.queue2的消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="3-6-3-消息发送"><a href="#3-6-3-消息发送" class="headerlink" title="3.6.3 消息发送"></a>3.6.3 消息发送</h3><p>在 <code>publisher</code> 服务的 <code>SpringAmqpTest</code> 类中添加测试方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendDirectExchange</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 交换机名称</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">exchangeName</span> <span class="operator">=</span> <span class="string">&quot;hmall.direct&quot;</span>;</span><br><span class="line">    <span class="comment">// 消息</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;红色警报！日本乱排核废水，导致海洋生物变异，惊现哥斯拉！&quot;</span>;</span><br><span class="line">    <span class="comment">// 发送消息</span></span><br><span class="line">    rabbitTemplate.convertAndSend(exchangeName, <span class="string">&quot;red&quot;</span>, message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由于使用的 <code>red</code> 这个 key，所以两个消费者都收到了消息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">消费者2接收到direct.queue2的消息：【红色警报！日本乱排核废水，导致海洋生物变异，惊现哥斯拉！】</span><br><span class="line">消费者1接收到direct.queue1的消息：【红色警报！日本乱排核废水，导致海洋生物变异，惊现哥斯拉！】</span><br></pre></td></tr></table></figure>

<p>我们再切换为 <code>blue</code> 这个 key：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendDirectExchange</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 交换机名称</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">exchangeName</span> <span class="operator">=</span> <span class="string">&quot;hmall.direct&quot;</span>;</span><br><span class="line">    <span class="comment">// 消息</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;最新报道，哥斯拉是居民自治巨型气球，虚惊一场！&quot;</span>;</span><br><span class="line">    <span class="comment">// 发送消息</span></span><br><span class="line">    rabbitTemplate.convertAndSend(exchangeName, <span class="string">&quot;blue&quot;</span>, message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>会发现，只有消费者 1 收到了消息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">消费者1接收到direct.queue1的消息：【最新报道，哥斯拉是居民自治巨型气球，虚惊一场！】</span><br></pre></td></tr></table></figure>

<blockquote>
<p>总结</p>
</blockquote>
<p>描述下 Direct 交换机与 Fanout 交换机的差异？</p>
<ul>
<li>Fanout 交换机将消息路由给每一个与之绑定的队列</li>
<li>Direct交换机根据 RoutingKey 判断路由给哪个队列</li>
<li>如果多个队列具有相同的 RoutingKey，则与 Fanout 功能类似</li>
</ul>
<h2 id="3-7-Topic交换机"><a href="#3-7-Topic交换机" class="headerlink" title="3.7 Topic交换机"></a>3.7 Topic交换机</h2><h3 id="3-7-1-说明"><a href="#3-7-1-说明" class="headerlink" title="3.7.1 说明"></a>3.7.1 说明</h3><p><code>Topic</code> 类型的 <code>Exchange</code> 与 <code>Direct</code> 相比，都是可以根据 <code>RoutingKey</code> 把消息路由到不同的队列。</p>
<p>只不过 <code>Topic</code> 类型 <code>Exchange</code> 可以让队列在绑定 <code>BindingKey</code> 的时候使用通配符！</p>
<p><code>BindingKey</code> 一般都是有一个或多个单词组成，多个单词之间以  <code>. </code> 分割，例如： <code>item.insert</code></p>
<p>通配符规则：</p>
<ul>
<li><code>#</code>：匹配一个或多个词</li>
<li><code>*</code>：匹配不多不少恰好1个词</li>
</ul>
<p>举例：</p>
<ul>
<li><code>item.#</code>：能够匹配 <code>item.spu.insert</code> 或者 <code>item.spu</code></li>
<li><code>item.*</code>：只能匹配 <code>item.spu</code></li>
</ul>
<p>图示：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/MQIMG/RabbitMQ/Topic%E4%BA%A4%E6%8D%A2%E6%9C%BA.png" alt="Topic交换机"></p>
<p>假如此时 publisher 发送的消息使用的 <code>RoutingKey</code> 共有四种：</p>
<ul>
<li><code>china.news </code> 代表有中国的新闻消息；</li>
<li><code>china.weather</code> 代表中国的天气消息；</li>
<li><code>japan.news</code> 则代表日本新闻</li>
<li><code>japan.weather</code> 代表日本的天气消息；</li>
</ul>
<p>解释：</p>
<ul>
<li><code>topic.queue1</code>：绑定的是 <code>china.#</code> ，凡是以 <code>china.</code>开头的 <code>routing key</code> 都会被匹配到，包括：<ul>
<li><code>china.news</code></li>
<li><code>china.weather</code></li>
</ul>
</li>
<li><code>topic.queue2</code>：绑定的是 <code>#.news</code> ，凡是以 <code>.news </code>结尾的 <code>routing key</code> 都会被匹配。包括:<ul>
<li><code>china.news</code></li>
<li><code>japan.news</code></li>
</ul>
</li>
</ul>
<p>接下来，我们就按照上图所示，来演示一下 Topic 交换机的用法。</p>
<p>首先，在控制台按照图示例子创建队列、交换机，并利用通配符绑定队列和交换机。此处步骤略。最终结果如下：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/MQIMG/RabbitMQ/%E5%88%A9%E7%94%A8%E9%80%9A%E9%85%8D%E7%AC%A6%E7%BB%91%E5%AE%9A%E9%98%9F%E5%88%97%E5%92%8C%E4%BA%A4%E6%8D%A2%E6%9C%BA.png" alt="利用通配符绑定队列和交换机"></p>
<h3 id="3-7-2-消息发送"><a href="#3-7-2-消息发送" class="headerlink" title="3.7.2 消息发送"></a>3.7.2 消息发送</h3><p>在 publisher 服务的 <code>SpringAmqpTest</code> 类中添加测试方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * topicExchange</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendTopicExchange</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 交换机名称</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">exchangeName</span> <span class="operator">=</span> <span class="string">&quot;hmall.topic&quot;</span>;</span><br><span class="line">    <span class="comment">// 消息</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;喜报！孙悟空大战哥斯拉，胜!&quot;</span>;</span><br><span class="line">    <span class="comment">// 发送消息</span></span><br><span class="line">    rabbitTemplate.convertAndSend(exchangeName, <span class="string">&quot;china.news&quot;</span>, message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-7-3-消息接收"><a href="#3-7-3-消息接收" class="headerlink" title="3.7.3 消息接收"></a>3.7.3 消息接收</h3><p>在 <code>consumer</code> 服务的 <code>SpringRabbitListener</code> 中添加方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queues = &quot;topic.queue1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenTopicQueue1</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者1接收到topic.queue1的消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;topic.queue2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenTopicQueue2</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者2接收到topic.queue2的消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">消费者2接收到topic.queue2的消息：【喜报！孙悟空大战哥斯拉，胜!】</span><br><span class="line">消费者1接收到topic.queue1的消息：【喜报！孙悟空大战哥斯拉，胜!】</span><br></pre></td></tr></table></figure>

<p>我们再切换为 <code>china.message</code> 这个 key 测试：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">消费者1接收到topic.queue1的消息：【喜报！孙悟空大战哥斯拉，胜!】</span><br></pre></td></tr></table></figure>

<p>我们再切换为 <code>chengdu.news</code> 这个 key 测试：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">消费者2接收到topic.queue2的消息：【喜报！孙悟空大战哥斯拉，胜!】</span><br></pre></td></tr></table></figure>

<blockquote>
<p>总结</p>
</blockquote>
<p>描述下 Direct 交换机与 Topic 交换机的差异？</p>
<ul>
<li>Topic 交换机接收的消息 RoutingKey 可以是多个单词，以 <code>**.**</code> 分割</li>
<li>Topic交换机与队列绑定时的 bindingKey 可以指定通配符</li>
<li><code>#</code>：代表0个或多个词</li>
<li><code>*</code>：代表1个词</li>
</ul>
<h2 id="3-8-声明队列和交换机"><a href="#3-8-声明队列和交换机" class="headerlink" title="3.8 声明队列和交换机"></a>3.8 声明队列和交换机</h2><p>在之前我们都是基于 RabbitMQ 控制台来创建队列、交换机。但是在实际开发时，队列和交换机是程序员定义的，将来项目上线，又要交给运维去创建。那么程序员就需要把程序中运行的所有队列和交换机都写下来，交给运维。在这个过程中是很容易出现错误的。</p>
<p>因此推荐的做法是由程序启动时检查队列和交换机是否存在，如果不存在自动创建。</p>
<h3 id="3-8-1-基本API"><a href="#3-8-1-基本API" class="headerlink" title="3.8.1 基本API"></a>3.8.1 基本API</h3><p>SpringAMQP 提供了一个 Queue 类，用来创建队列：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Queue</span> <span class="keyword">extends</span> <span class="title class_">AbstractDeclarable</span> <span class="keyword">implements</span> <span class="title class_">Cloneable</span> &#123;</span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>SpringAMQP 还提供了一个 <code>Exchange</code> 接口，来表示所有不同类型的交换机：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/MQIMG/RabbitMQ/Exchange%E6%8E%A5%E5%8F%A3.png" alt="Exchange接口"></p>
<p>我们可以自己创建队列和交换机，不过 SpringAMQP 还提供了 <code>ExchangeBuilder</code> 来简化这个过程：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/MQIMG/RabbitMQ/ExchangeBuilder.png" alt="ExchangeBuilder"></p>
<p>而在绑定队列和交换机时，则需要使用 <code>BindingBuilder</code> 来创建 Binding 对象：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/MQIMG/RabbitMQ/BindingBuilder%E4%B8%AD%E7%9A%84%E6%96%B9%E6%B3%95.png" alt="BindingBuilder中的方法"></p>
<h3 id="3-8-2-Fanout示例"><a href="#3-8-2-Fanout示例" class="headerlink" title="3.8.2 Fanout示例"></a>3.8.2 Fanout示例</h3><p>在 <code>consumer</code> 中创建一个类，声明队列和交换机：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.muyoukule.consumer.config;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FanoutConfig</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 声明交换机</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Fanout类型交换机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> FanoutExchange <span class="title function_">fanoutExchange</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FanoutExchange</span>(<span class="string">&quot;hmall.fanout&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 第1个队列</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">fanoutQueue1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;fanout.queue1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 绑定队列和交换机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bindingQueue1</span><span class="params">(Queue fanoutQueue1, FanoutExchange fanoutExchange)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(fanoutQueue1).to(fanoutExchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 第2个队列</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">fanoutQueue2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;fanout.queue2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 绑定队列和交换机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bindingQueue2</span><span class="params">(Queue fanoutQueue2, FanoutExchange fanoutExchange)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(fanoutQueue2).to(fanoutExchange);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-8-3-Direct示例"><a href="#3-8-3-Direct示例" class="headerlink" title="3.8.3 Direct示例"></a>3.8.3 Direct示例</h3><p>Direct 模式由于要绑定多个 Key，会非常麻烦，每一个 Key 都要编写一个 binding：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.muyoukule.consumer.config;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DirectConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 声明交换机</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Direct类型交换机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DirectExchange <span class="title function_">directExchange</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ExchangeBuilder.directExchange(<span class="string">&quot;hmall.direct&quot;</span>).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 第1个队列</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">directQueue1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;direct.queue1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 绑定队列和交换机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bindingQueue1WithRed</span><span class="params">(Queue directQueue1, DirectExchange directExchange)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(directQueue1).to(directExchange).with(<span class="string">&quot;red&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 绑定队列和交换机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bindingQueue1WithBlue</span><span class="params">(Queue directQueue1, DirectExchange directExchange)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(directQueue1).to(directExchange).with(<span class="string">&quot;blue&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 第2个队列</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">directQueue2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;direct.queue2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 绑定队列和交换机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bindingQueue2WithRed</span><span class="params">(Queue directQueue2, DirectExchange directExchange)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(directQueue2).to(directExchange).with(<span class="string">&quot;red&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 绑定队列和交换机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bindingQueue2WithYellow</span><span class="params">(Queue directQueue2, DirectExchange directExchange)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(directQueue2).to(directExchange).with(<span class="string">&quot;yellow&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-8-4-基于注解声明"><a href="#3-8-4-基于注解声明" class="headerlink" title="3.8.4 基于注解声明"></a>3.8.4 基于注解声明</h3><p>基于 <code>@Bean</code> 的方式声明队列和交换机比较麻烦，Spring 还提供了基于注解方式来声明。<font color="red">PS：不要导错包了哦，是注解类型的包</font>😀</p>
<p>例如，我们同样声明 Direct 模式的交换机和队列：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">        value = @Queue(name = &quot;direct.queue1&quot;),</span></span><br><span class="line"><span class="meta">        exchange = @Exchange(name = &quot;hmall.direct&quot;, type = ExchangeTypes.DIRECT),</span></span><br><span class="line"><span class="meta">        key = &#123;&quot;red&quot;, &quot;blue&quot;&#125;</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenDirectQueue1</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者1接收到direct.queue1的消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">        value = @Queue(name = &quot;direct.queue2&quot;),</span></span><br><span class="line"><span class="meta">        exchange = @Exchange(name = &quot;hmall.direct&quot;, type = ExchangeTypes.DIRECT),</span></span><br><span class="line"><span class="meta">        key = &#123;&quot;red&quot;, &quot;yellow&quot;&#125;</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenDirectQueue2</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者2接收到direct.queue2的消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>是不是简单多了。</p>
<p>再试试 Topic 模式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">        value = @Queue(name = &quot;topic.queue1&quot;),</span></span><br><span class="line"><span class="meta">        exchange = @Exchange(name = &quot;hmall.topic&quot;, type = ExchangeTypes.TOPIC),</span></span><br><span class="line"><span class="meta">        key = &quot;china.#&quot;</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenTopicQueue1</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者1接收到topic.queue1的消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">        value = @Queue(name = &quot;topic.queue2&quot;),</span></span><br><span class="line"><span class="meta">        exchange = @Exchange(name = &quot;hmall.topic&quot;, type = ExchangeTypes.TOPIC),</span></span><br><span class="line"><span class="meta">        key = &quot;#.news&quot;</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenTopicQueue2</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者2接收到topic.queue2的消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="3-9-消息转换器"><a href="#3-9-消息转换器" class="headerlink" title="3.9 消息转换器"></a>3.9 消息转换器</h2><p>Spring 的消息发送代码接收的消息体是一个 Object：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/MQIMG/RabbitMQ/%E6%8E%A5%E6%94%B6%E7%9A%84Object.png" alt="接收的Object"></p>
<p>而在数据传输时，它会把你发送的消息序列化为字节发送给 MQ，接收消息的时候，还会把字节反序列化为 Java 对象。</p>
<p>只不过，默认情况下 Spring 采用的序列化方式是 JDK 序列化。众所周知，JDK 序列化存在下列问题：</p>
<ul>
<li>数据体积过大</li>
<li>有安全漏洞</li>
<li>可读性差</li>
</ul>
<p>我们来测试一下。</p>
<h3 id="3-9-1-测试默认转换器"><a href="#3-9-1-测试默认转换器" class="headerlink" title="3.9.1 测试默认转换器"></a>3.9.1 测试默认转换器</h3><p>1、创建测试队列</p>
<p>首先，我们在 <code>consumer</code> 服务中声明一个新的配置类 <code>MessageConfig</code>，利用 <code>@Bean</code> 的方式创建一个队列，具体代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MessageConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">objectQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;object.queue&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意，这里我们先不要给这个队列添加消费者，我们要查看消息体的格式。</p>
<p>重启 <code>consumer</code> 服务以后，该队列就会被自动创建出来了：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/MQIMG/RabbitMQ/object.queue%E9%98%9F%E5%88%97.png" alt="object.queue队列"></p>
<p>2、发送消息</p>
<p>我们在 publisher 模块的 <code>SpringAmqpTest</code> 中新增一个消息发送的代码，发送一个 Map 对象：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendMap</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 准备消息</span></span><br><span class="line">    Map&lt;String, Object&gt; msg = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    msg.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;柳岩&quot;</span>);</span><br><span class="line">    msg.put(<span class="string">&quot;age&quot;</span>, <span class="number">21</span>);</span><br><span class="line">    <span class="comment">// 发送消息</span></span><br><span class="line">    rabbitTemplate.convertAndSend(<span class="string">&quot;object.queue&quot;</span>, msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3、发送消息后查看控制台：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/MQIMG/RabbitMQ/JDK%E5%BA%8F%E5%88%97%E5%8C%96%E6%B6%88%E6%81%AF.png" alt=" JDK序列化消息"></p>
<p>可以看到消息格式非常不友好。</p>
<h3 id="3-9-2-配置JSON转换器"><a href="#3-9-2-配置JSON转换器" class="headerlink" title="3.9.2 配置JSON转换器"></a>3.9.2 配置JSON转换器</h3><p>显然，JDK 序列化方式并不合适。我们希望消息体的体积更小、可读性更高，因此可以使用 JSON 方式来做序列化和反序列化。</p>
<p>1、在父工程引入依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--jackson--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.dataformat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-dataformat-xml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>PS：如果项目中引入了 <code>spring-boot-starter-web</code> 依赖，则无需再次引入 <code>Jackson</code> 依赖。</p>
<p>2、配置消息转换器，在 <code>publisher </code>和 <code>consumer</code> 两个服务的启动类中添加一个 Bean 即可：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> MessageConverter <span class="title function_">messageConverter</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 1.定义消息转换器</span></span><br><span class="line">    <span class="type">Jackson2JsonMessageConverter</span> <span class="variable">jackson2JsonMessageConverter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jackson2JsonMessageConverter</span>();</span><br><span class="line">    <span class="comment">// 2.配置自动创建消息id，用于识别不同消息，也可以在业务中基于ID判断是否是重复消息</span></span><br><span class="line">    jackson2JsonMessageConverter.setCreateMessageIds(<span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">return</span> jackson2JsonMessageConverter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>消息转换器中添加的 messageId 可以便于我们将来做幂等性判断。</p>
<p>3、此时，再次执行刚才的消息发送的代码，到 RabbitMQ 的控制台查看消息结构(Get messages 填 <code>2</code> ) ：</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/MQIMG/RabbitMQ/RabbitMQ%E6%8E%A7%E5%88%B6%E5%8F%B0%E6%9F%A5%E7%9C%8B%E6%B6%88%E6%81%AF%E7%BB%93%E6%9E%84.png" alt="RabbitMQ控制台查看消息结构" style="zoom: 80%;">

<p>对比发现数据体积小了很多。</p>
<h3 id="3-9-3-消费者接收Object"><a href="#3-9-3-消费者接收Object" class="headerlink" title="3.9.3 消费者接收Object"></a>3.9.3 消费者接收Object</h3><p>我们在consumer服务中定义一个新的消费者，publisher是用 Map 发送，那么消费者也一定要用 Map 接收，格式如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queues = &quot;object.queue&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenSimpleQueueMessage</span><span class="params">(Map&lt;String, Object&gt; msg)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者接收到object.queue消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>会发现接收第一条消息报错，第二条消息正常。但是回到 RabbitMQ 控制台发现第一条消息消失了，说明第一条消息丢失了。</p>
<p>怎么解决呢？</p>
<p>请参考文章 <code>RabbitMQ高级</code> 😁</p>
]]></content>
      <categories>
        <category>MQ</category>
      </categories>
      <tags>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>【第1章】 初识SpringMVC</title>
    <url>/posts/SpringMVC-Chapter-One-Acquaintance-SpringMVC/</url>
    <content><![CDATA[<p>参考视频：<a href="https://www.bilibili.com/video/BV1sC411L76f/">SpringMVC教程，SpringMVC从零到精通，老杜SpringMVC，动力节点SpringMVC</a></p>
<h1 id="0-学习前的知识储备"><a href="#0-学习前的知识储备" class="headerlink" title="0. 学习前的知识储备"></a>0. 学习前的知识储备</h1><ul>
<li><strong>JavaSE</strong></li>
<li><strong>HTML+CSS+JavaScript</strong></li>
<li><strong>Vue</strong></li>
<li><strong>AJAX + axios</strong></li>
<li><strong>Thymeleaf</strong></li>
<li><strong>Servlet</strong></li>
<li><strong>Maven</strong></li>
<li><strong>Spring</strong></li>
</ul>
<h1 id="1-什么是MVC"><a href="#1-什么是MVC" class="headerlink" title="1. 什么是MVC"></a>1. 什么是MVC</h1><p>MVC是一种软件架构模式（是一种软件架构设计思想，不止Java开发中用到，其它语言也需要用到），它将应用分为三块：</p>
<ul>
<li>M：Model（模型）</li>
<li>V：View（视图）</li>
<li>C：Controller（控制器）</li>
</ul>
<p>应用为什么要被分为三块，优点是什么？</p>
<ul>
<li>低耦合，扩展能力增强</li>
<li>代码复用性增强</li>
<li>代码可维护性增强</li>
<li>高内聚，让程序员更加专注业务的开发</li>
</ul>
<p>MVC将应用分为三块，每一块各司其职，都有自己专注的事情要做，他们属于分工协作，互相配合：</p>
<ul>
<li>Model：负责业务处理及数据的收集。</li>
<li>View：负责数据的展示</li>
<li>Controller：负责调度。它是一个调度中心，它来决定什么时候调用Model来处理业务，什么时候调用View视图来展示数据。</li>
</ul>
<p>MVC架构模式如下所示：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/SpringMVC/MVC%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F.png" alt="MVC架构模式"></p>
<p>MVC架构模式的描述：前端浏览器发送请求给Web服务器，Web服务器中的Controller接收到用户的请求，Controller负责将前端提交的数据进行封装，然后Controller调用Model来处理业务，当Model处理完业务后会返回处理之后的数据给Controller，Controller再调用View来完成数据的展示，最终将结果响应给浏览器，浏览器进行渲染展示页面。</p>
<blockquote>
<p>什么是三层模型？MVC架构模式与三层模型有什么区别？</p>
</blockquote>
<p>三层模型：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/SpringMVC/%E4%B8%89%E5%B1%82%E6%A8%A1%E5%9E%8B.png" alt="三层模型" style="zoom: 67%;">                            <img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/SpringMVC/MVC%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F%E4%B8%8E%E4%B8%89%E5%B1%82%E6%A8%A1%E5%9E%8B.png" alt="MVC架构模式与三层模型" style="zoom: 67%;"></p>
<p>MVC和三层模型都采用了分层结构来设计应用程序，都是降低耦合度，提高扩展力，提高组件复用性。区别在于：他们的关注点不同，三层模型更加关注业务逻辑组件的划分。</p>
<p>MVC架构模式关注的是整个应用程序的层次关系和分离思想。现代的开发方式大部分都是MVC架构模式结合三层模型一起用。</p>
<h1 id="2-什么是SpringMVC"><a href="#2-什么是SpringMVC" class="headerlink" title="2. 什么是SpringMVC"></a>2. 什么是SpringMVC</h1><h2 id="2-1-SpringMVC概述"><a href="#2-1-SpringMVC概述" class="headerlink" title="2.1 SpringMVC概述"></a>2.1 SpringMVC概述</h2><p>SpringMVC是一个实现了MVC架构模式的Web框架，底层基于Servlet实现。</p>
<p>SpringMVC已经将MVC架构模式实现了，因此只要我们是基于SpringMVC框架写代码，编写的程序就是符合MVC架构模式的。（<strong>MVC的架子搭好了，我们只需要添添补补</strong>）</p>
<p>Spring框架中有一个子项目叫做Spring Web，Spring Web子项目当中包含很多模块，例如：</p>
<ul>
<li>Spring MVC</li>
<li>Spring WebFlux</li>
<li>Spring Web Services</li>
<li>Spring Web Flow</li>
<li>Spring WebSocket</li>
<li>Spring Web Services Client</li>
</ul>
<p>可见SpringMVC是Spring Web子项目当中的一个模块。因此也可以说SpringMVC是Spring框架的一部分。</p>
<p>所以学习SpringMVC框架之前要先学习Spring框架中的IoC和AOP等内容。</p>
<p>另外，使用SpringMVC框架的时候同样也可以使用IoC和AOP。</p>
<p>以下就是Spring官方给出的Spring架构图，其中Web中的servlet指的就是Spring MVC：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/SpringMVC/Spring%E6%9E%B6%E6%9E%84%E5%9B%BE.png" alt="Spring架构图"></p>
<h2 id="2-2-SpringMVC帮我们做了什么"><a href="#2-2-SpringMVC帮我们做了什么" class="headerlink" title="2.2 SpringMVC帮我们做了什么"></a>2.2 SpringMVC帮我们做了什么</h2><p>SpringMVC框架帮我们做了什么，与纯粹的Servlet开发有什么区别？</p>
<ul>
<li>入口控制：SpringMVC框架通过DispatcherServlet作为入口控制器，负责接收请求和分发请求。而在Servlet开发中，需要自己编写Servlet程序，并在web.xml中进行配置，才能接受和处理请求。 </li>
<li>在SpringMVC中，表单提交时可以自动将表单数据绑定到相应的JavaBean对象中，只需要在控制器方法的参数列表中声明该JavaBean对象即可，无需手动获取和赋值表单数据。而在纯粹的Servlet开发中，这些都是需要自己手动完成的。</li>
<li>IoC容器：SpringMVC框架通过IoC容器管理对象，只需要在配置文件中进行相应的配置即可获取实例对象，而在Servlet开发中需要手动创建对象实例。 </li>
<li>统一处理请求：SpringMVC框架提供了拦截器、异常处理器等统一处理请求的机制，并且可以灵活地配置这些处理器。而在Servlet开发中，需要自行编写过滤器、异常处理器等，增加了代码的复杂度和开发难度。 </li>
<li>视图解析：SpringMVC框架提供了多种视图模板，如JSP、Freemarker、Velocity等，并且支持国际化、主题等特性。而在Servlet开发中需要手动处理视图层，增加了代码的复杂度。</li>
</ul>
<p>总之，与Servlet开发相比，SpringMVC框架可以帮我们节省很多时间和精力，减少代码的复杂度，更加专注于业务开发。同时，也提供了更多的功能和扩展性，可以更好地满足企业级应用的开发需求。</p>
<h2 id="2-3-SpringMVC框架的特点"><a href="#2-3-SpringMVC框架的特点" class="headerlink" title="2.3 SpringMVC框架的特点"></a>2.3 SpringMVC框架的特点</h2><ul>
<li>轻量级：相对于其他Web框架，Spring MVC框架比较小巧轻便。（只有几个几百KB左右的Jar包文件） </li>
<li>模块化：请求处理过程被分成多个模块，以模块化的方式进行处理。<ul>
<li>控制器模块：Controller</li>
<li>业务逻辑模块：Model</li>
<li>视图模块：View</li>
</ul>
</li>
<li>依赖注入：Spring MVC框架利用Spring框架的依赖注入功能实现对象的管理，实现松散耦合。</li>
<li>易于扩展：提供了很多口子，允许开发者根据需要插入自己的代码，以扩展实现应用程序的特殊需求。<ul>
<li>Spring MVC框架允许开发人员通过自定义模块和组件来扩展和增强框架的功能。</li>
<li>Spring MVC框架与其他Spring框架及第三方框架集成得非常紧密，这使得开发人员可以非常方便地集成其他框架，以获得更好的功能。</li>
</ul>
</li>
<li>易于测试：支持单元测试框架，提高代码质量和可维护性。（对SpringMVC中的Controller测试时，不需要依靠Web服务器。）</li>
<li>自动化配置：提供自动化配置，减少配置细节。<ul>
<li>Spring MVC框架基于约定大于配置的原则，对常用的配置约定进行自动化配置。</li>
</ul>
</li>
<li>灵活性：Spring MVC框架支持多种视图技术，如JSP、FreeMarker、Thymeleaf、FreeMarker等，针对不同的视图配置不同的视图解析器即可。</li>
</ul>
<blockquote>
<p>自用软件相关版本</p>
</blockquote>
<ul>
<li>JDK版本：Java17</li>
<li>Maven版本：3.6.1</li>
<li>Tomcat版本：10</li>
<li>Spring版本：6.1.4</li>
<li>SpringMVC版本：6.1.4</li>
<li>IDEA版本：2022.2</li>
<li>Thymeleaf版本：3.1.2</li>
</ul>
<h1 id="3-第一个SpringMVC程序"><a href="#3-第一个SpringMVC程序" class="headerlink" title="3. 第一个SpringMVC程序"></a>3. 第一个SpringMVC程序</h1><h2 id="3-1-创建Maven模块"><a href="#3-1-创建Maven模块" class="headerlink" title="3.1 创建Maven模块"></a>3.1 创建Maven模块</h2><p>1、创建Empty Project，起名为springmvc (<font color="red">PS：记得设置项目JDK版本和Maven仓库</font>)</p>
<p>2、创建Maven模块，起名为springmvc-001</p>
<p>3、将<code>pom.xml</code>文件中的打包方式修改为<code>war</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.muyoukule<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springmvc-001<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 打包方式设置为war方式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>4、添加如下依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Spring MVC依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--日志框架Logback依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Servlet依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jakarta.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jakarta.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Spring6和Thymeleaf整合依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-spring6<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-2-添加web支持"><a href="#3-2-添加web支持" class="headerlink" title="3.2 添加web支持"></a>3.2 添加web支持</h2><p>1、在main目录下创建一个webapp目录</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/SpringMVC/webapp%E7%9B%AE%E5%BD%95.png" alt="webapp目录"></p>
<p>2、添加web.xml配置文件</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/SpringMVC/%E6%B7%BB%E5%8A%A0web.xml%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.png" alt="添加web.xml配置文件" style="zoom:50%;">

<p>注意<code>web.xml</code>文件的位置：\springmvc-001\ <code>src\main\webapp\</code> WEB-INF\web.xml</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/SpringMVC/web.xml%E6%96%87%E4%BB%B6%E7%9A%84%E4%BD%8D%E7%BD%AE.png" alt="web.xml文件的位置" style="zoom:50%;">

<p>添加web支持后的目录结构：</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/SpringMVC/%E6%B7%BB%E5%8A%A0web%E6%94%AF%E6%8C%81%E5%90%8E%E7%9A%84%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.png" alt="添加web支持后的目录结构" style="zoom:67%;">

<h2 id="3-3-配置web-xml文件"><a href="#3-3-配置web-xml文件" class="headerlink" title="3.3 配置web.xml文件"></a>3.3 配置web.xml文件</h2><p>Spring MVC是一个Web框架，在JavaWeb中谁来负责接收请求、处理请求、以及响应呢？</p>
<p>当然是Servlet。在SpringMVC框架中已经为我们写好了一个Servlet，它的名字叫做：<code>DispatcherServlet</code>，我们称其为 <code>前端控制器</code> </p>
<p>既然是Servlet，那么它就需要在web.xml文件中进行配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--SpringMVC提供的前端控制器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- /* 表示任何一个请求都交给DispatcherServlet来处理 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- / 表示当请求不是xx.jsp的时候，DispatcherServlet来负责处理本次请求--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- jsp本质就是Servlet，因此如果请求是jsp的话，应该走它自己的Servlet，而不应该走DispatcherServlet --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 因此我们的 url-pattern 使用 / --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>DispatcherServlet</code>是SpringMVC框架为我们提供的最核心的类，它是整个SpringMVC框架的前端控制器，负责接收HTTP请求、将请求路由到处理程序、处理响应信息，最终将响应返回给客户端。DispatcherServlet是Web应用程序的主要入口点之一，它的职责包括：</p>
<ul>
<li>接收客户端的HTTP请求：DispatcherServlet监听来自Web浏览器的HTTP请求，然后根据请求的URL将请求数据解析为Request对象</li>
<li>处理请求的URL：DispatcherServlet将请求的URL（Uniform Resource Locator）与处理程序进行匹配，确定要调用哪个控制器（Controller）来处理此请求</li>
<li>调用相应的控制器：DispatcherServlet将请求发送给找到的控制器处理，控制器将执行业务逻辑，然后返回一个模型对象（Model）</li>
<li>渲染视图：DispatcherServlet将调用视图引擎，将模型对象呈现为用户可以查看的HTML页面</li>
<li>返回响应给客户端：DispatcherServlet将为用户生成的响应发送回浏览器，响应可以包括表单、JSON、XML、HTML以及其它类型的数据</li>
</ul>
<h2 id="3-4-编写控制器FirstController"><a href="#3-4-编写控制器FirstController" class="headerlink" title="3.4 编写控制器FirstController"></a>3.4 编写控制器FirstController</h2><p>DispatcherServlet接收到请求之后，会根据请求路径分发到对应的Controller，Controller来负责处理请求的核心业务。在SpringMVC框架中Controller是一个普通的Java类（一个普通的POJO类，不需要继承任何类或实现任何接口）。</p>
<p><strong>需要注意</strong>的是：POJO类要纳入IoC容器来管理，POJO类的生命周期由Spring来管理，因此要使用注解标注：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.muyoukule.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FirstController</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-5-配置springmvc-servlet-xml文件"><a href="#3-5-配置springmvc-servlet-xml文件" class="headerlink" title="3.5 配置springmvc-servlet.xml文件"></a>3.5 配置springmvc-servlet.xml文件</h2><p>SpringMVC框架有它自己的配置文件，该配置文件的名字默认为：<code>&lt;servlet-name&gt;-servlet.xml</code>，默认存放的位置是WEB-INF目录下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--组件扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.muyoukule.controller&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--视图解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;thymeleafViewResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring6.view.ThymeleafViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--作用于视图渲染的过程中，可以设置视图渲染后输出时采用的编码字符集--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;characterEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--如果配置多个视图解析器，它来决定优先使用哪个视图解析器，它的值越小优先级越高--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;order&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--当 ThymeleafViewResolver 渲染模板时，会使用该模板引擎来解析、编译和渲染模板--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateEngine&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring6.SpringTemplateEngine&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--用于指定 Thymeleaf 模板引擎使用的模板解析器。模板解析器负责根据模板位置、模板资源名称、文件编码等信息，加载模板并对其进行解析--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateResolver&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring6.templateresolver.SpringResourceTemplateResolver&quot;</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!--设置模板文件的位置（前缀）--&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/templates/&quot;</span>/&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!--设置模板文件后缀（后缀），Thymeleaf文件扩展名不一定是html，也可以是其他，例如txt，大部分都是html--&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.html&quot;</span>/&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!--设置模板类型，例如：HTML,TEXT,JAVASCRIPT,CSS等--&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateMode&quot;</span> <span class="attr">value</span>=<span class="string">&quot;HTML&quot;</span>/&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!--用于模板文件在读取和解析过程中采用的编码字符集--&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;characterEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在WEB-INF目录下新建<code>springmvc-servlet.xml</code>文件，并且提供以上配置信息：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/SpringMVC/%E6%8F%90%E4%BE%9B%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF.png" alt="提供配置信息"></p>
<p>以上配置主要两项：</p>
<ul>
<li>组件扫描。Spring扫描这个包中的类，将这个包中的类实例化并纳入IoC容器的管理。</li>
<li>视图解析器。视图解析器（View Resolver）的作用主要是将Controller方法返回的逻辑视图名称解析成实际的视图对象。视图解析器将解析出的视图对象返回给DispatcherServlet，并最终由DispatcherServlet将该视图对象转化为响应结果，呈现给用户。</li>
</ul>
<p><font color="red">PS：如果采用了其它视图，请配置对应的视图解析器。</font>例如：</p>
<ul>
<li>JSP的视图解析器：InternalResourceViewResolver</li>
<li>FreeMarker视图解析器：FreeMarkerViewResolver</li>
<li>Velocity视图解析器：VelocityViewResolver</li>
</ul>
<h2 id="3-6-提供视图"><a href="#3-6-提供视图" class="headerlink" title="3.6 提供视图"></a>3.6 提供视图</h2><p>在WEB-INF目录下新建<code>templates</code>目录，在templates目录中新建html文件。例如：first.html，并提供以下代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--指定 th 命名空间，让 Thymeleaf 标准表达式可以被解析和执行--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--th不是固定的，可以指定其它的命名空间，只不过大部分情况下用th--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--表示程序中出现的 th 开头的后面代码都是 Thymeleaf 语法，需要被 Thymeleaf识别--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>first springmvc<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>我的第一个Spring MVC程序<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>对于每一个Thymeleaf文件来说 <code>xmlns:th=&quot;http://www.thymeleaf.org&quot;</code> 是必须要写的，为了方便后续开发，可以将其添加到html模板文件中：</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/SpringMVC/%E6%B7%BB%E5%8A%A0%E5%88%B0html%E6%A8%A1%E6%9D%BF%E6%96%87%E4%BB%B6.png" alt="添加到html模板文件" style="zoom:50%;">

<h2 id="3-7-控制器FirstController处理请求返回逻辑视图名称"><a href="#3-7-控制器FirstController处理请求返回逻辑视图名称" class="headerlink" title="3.7 控制器FirstController处理请求返回逻辑视图名称"></a>3.7 控制器FirstController处理请求返回逻辑视图名称</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FirstController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/haha&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String 名字随意() &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在处理请求....&quot;</span>);</span><br><span class="line">        <span class="comment">// 返回逻辑视图名称（决定跳转到哪个页面）</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;first&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>测试</p>
</blockquote>
<p>1、配置Tomcat服务器</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/SpringMVC/%E9%85%8D%E7%BD%AETomcat%E6%9C%8D%E5%8A%A1%E5%99%A8.png" alt="配置Tomcat服务器" style="zoom: 50%;">

<p>2、部署Web模块到Tomcat服务器</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/SpringMVC/%E9%83%A8%E7%BD%B2Web%E6%A8%A1%E5%9D%97%E5%88%B0Tomcat%E6%9C%8D%E5%8A%A1%E5%99%A8.png" alt="部署Web模块到Tomcat服务器" style="zoom: 50%;">

<p>3、启动Tomcat服务器</p>
<p>如果在控制台输出的信息有中文乱码，请修改Tomcat服务器配置文件：<code>apache-tomcat-10.1.19\conf\logging.properties</code></p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/SpringMVC/%E5%A4%84%E7%90%86Tomcat%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B9%B1%E7%A0%81.png" alt="处理Tomcat服务器乱码" style="zoom:50%;">

<p>4、在浏览器地址栏上输入地址：<a href="http://localhost:8080/springmvc/haha">http://localhost:8080/springmvc/haha</a></p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/SpringMVC/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AASpringMVC%E7%A8%8B%E5%BA%8F.png" alt="我的第一个SpringMVC程序"></p>
<p>5、后端控制台输出：</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/SpringMVC/%E5%90%8E%E7%AB%AF%E6%8E%A7%E5%88%B6%E5%8F%B0%E8%BE%93%E5%87%BA.png" alt="后端控制台输出"></p>
<h2 id="3-8-执行流程总结"><a href="#3-8-执行流程总结" class="headerlink" title="3.8 执行流程总结"></a>3.8 执行流程总结</h2><ol>
<li>浏览器发送请求：<a href="http://localhost:8080/springmvc/haha">http://localhost:8080/springmvc/haha</a></li>
<li>SpringMVC的前端控制器DispatcherServlet接收到请求</li>
<li>DispatcherServlet根据请求路径 &#x2F;haha 映射到 FirstController#名字随意()，调用该方法</li>
<li>FirstController#名字随意() 处理请求</li>
<li>FirstController#名字随意() 返回逻辑视图名称 first 给视图解析器</li>
<li>视图解析器找到 <code>/WEB-INF/templates/first.html</code> 文件，并进行解析，生成视图解析对象返回给前端控制器DispatcherServlet</li>
<li>前端控制器DispatcherServlet响应结果到浏览器</li>
</ol>
<h2 id="3-9-Controller编写多个方法"><a href="#3-9-Controller编写多个方法" class="headerlink" title="3.9 Controller编写多个方法"></a>3.9 Controller编写多个方法</h2><p>一个Controller可以提供多个方法，每个方法通常是处理对应的请求。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FirstController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/haha&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String 名字随意() &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在处理请求....&quot;</span>);</span><br><span class="line">        <span class="comment">// 返回逻辑视图名称（决定跳转到哪个页面）</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;first&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/other&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">other</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在处理其它请求...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;other&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>提供 other.html 文件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>other<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>other ...<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在 first.html 文件中，添加超链接，用超链接发送 <code>/other</code> 请求：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--指定 th 命名空间，让 Thymeleaf 标准表达式可以被解析和执行--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--th不是固定的，可以指定其它的命名空间，只不过大部分情况下用th--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--表示程序中出现的 th 开头的后面代码都是 Thymeleaf语法，需要被 Thymeleaf 识别--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>first springmvc<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>我的第一个Spring MVC程序<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- th: 表示后面的代码可以编写Thymeleaf语法，可以被Thymeleaf语法解析 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Thymeleaf检测到以 / 开始，表示绝对路径，自动会将webapp的上下文路径加上去 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 最终的效果是：href=&quot;/springmvc/other&quot; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/other&#125;&quot;</span>&gt;</span>other请求<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>启动Tomcat，打开浏览器，输入请求路径：<a href="http://localhost:8080/springmvc/haha">http://localhost:8080/springmvc/haha</a></p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/SpringMVC/%E6%90%BA%E5%B8%A6%E8%B6%85%E9%93%BE%E6%8E%A5.png" alt="携带超链接"></p>
<p>点击超链接：other请求</p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/SpringMVC/%E7%82%B9%E5%87%BB%E8%B6%85%E9%93%BE%E6%8E%A5.png" alt="点击超链接"></p>
<h1 id="4-第二个SpringMVC程序"><a href="#4-第二个SpringMVC程序" class="headerlink" title="4. 第二个SpringMVC程序"></a>4. 第二个SpringMVC程序</h1><h2 id="4-1-创建Maven模块"><a href="#4-1-创建Maven模块" class="headerlink" title="4.1 创建Maven模块"></a>4.1 创建Maven模块</h2><p>1、<code>pom.xml</code> 文件中添加依赖</p>
<ul>
<li>springmvc依赖</li>
<li>logback依赖</li>
<li>servlet依赖（scope为provided）</li>
<li>thymeleaf与spring6整合依赖</li>
</ul>
<p>2、打包方式 <code>war</code></p>
<h2 id="4-2-添加web支持"><a href="#4-2-添加web支持" class="headerlink" title="4.2 添加web支持"></a>4.2 添加web支持</h2><p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/SpringMVC/webapp%E6%B2%A1%E6%9C%89%E5%B0%8F%E8%93%9D%E7%82%B9.png" alt="webapp没有小蓝点"></p>
<blockquote>
<p>webapp目录没有小蓝点怎么办？</p>
</blockquote>
<p>添加Web支持：</p>
<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/SpringMVC/%E6%B7%BB%E5%8A%A0Web%E6%94%AF%E6%8C%81.png" alt="添加Web支持" style="zoom:50%;">

<img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/SpringMVC/%E4%BF%AE%E6%94%B9web.xml%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84.png" alt="修改web.xml文件路径" style="zoom: 50%;">

<h2 id="4-3-配置web-xml文件"><a href="#4-3-配置web-xml文件" class="headerlink" title="4.3 配置web.xml文件"></a>4.3 配置web.xml文件</h2><p><font color="red"><strong>PS：SpringMVC配置文件的名字和路径是可以手动设置的。</strong></font>😮 如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置前端控制器--&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--手动设置springmvc配置文件的路径及名字--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--为了提高用户的第一次访问效率，建议在web服务器启动时初始化前端控制器--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>通过<code>&lt;init-param&gt;</code>来设置SpringMVC配置文件的路径和名字，在DispatcherServlet的<code>init</code>方法执行时设置的。</strong><br><strong><code>&lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</code>建议加上，这样可以提高用户第一次访问的效率。表示在web服务器启动时初始化DispatcherServlet。</strong></p>
<h2 id="4-4-编写IndexController"><a href="#4-4-编写IndexController" class="headerlink" title="4.4 编写IndexController"></a>4.4 编写IndexController</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IndexController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toIndex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>表示请求路径如果是：<a href="http://localhost:8080/springmvc/">http://localhost:8080/springmvc/</a> ，则直接进入 <code>/WEB-INF/templates/index.html</code> 页面。</p>
<p><strong>这就是项目的首页效果！！！！！</strong></p>
<h2 id="4-5-在resources目录下配置springmvc-xml文件"><a href="#4-5-在resources目录下配置springmvc-xml文件" class="headerlink" title="4.5 在resources目录下配置springmvc.xml文件"></a>4.5 在resources目录下配置springmvc.xml文件</h2><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/SpringMVC/%E9%85%8D%E7%BD%AEspringmvc.xml%E6%96%87%E4%BB%B6.png" alt="配置springmvc.xml文件" style="zoom: 67%;">

<p>配置内容和之前一样，一个是视图解析器，一个是组件扫描。</p>
<h2 id="4-6-提供视图"><a href="#4-6-提供视图" class="headerlink" title="4.6 提供视图"></a>4.6 提供视图</h2><p>在WEB-INF目录下新建<code>templates</code>目录，在templates目录中新建index.html文件：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>index page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>index page<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>测试</p>
</blockquote>
<p>部署到web服务器，启动web服务器，打开浏览器，在地址栏上输入：<a href="http://localhost:8080/springmvc/">http://localhost:8080/springmvc/</a></p>
<p><img src="https://muyoukule-blog-pics.oss-cn-chengdu.aliyuncs.com/SSMIMG/SpringMVC/indexPage.png" alt="indexPage"></p>
]]></content>
      <categories>
        <category>SSM</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>SpringMVC</tag>
      </tags>
  </entry>
</search>
